stages:
  - Tests
  - Build
  - Tools
  - Release
  - Deploy test
  - Deploy acc
  - Deploy prod
  - Scan

Go go.mod tidy test:
  stage: Tests
  script:
    - cp go.mod go.mod.orig
    - /usr/local/go/bin/go mod download
    - /usr/local/go/bin/go mod tidy
    - diff go.mod.orig go.mod
  tags:
    - nlx
    - shell-executor
  except:
    - schedules

Go tests:
  stage: Tests
  script:
    - /usr/local/go/bin/go mod download
    - /usr/local/go/bin/go test ./... -coverprofile coverage.out
    - /usr/local/go/bin/go tool cover -html=coverage.out -o coverage.html
    - /usr/local/go/bin/go tool cover -func=coverage.out
  coverage: /total:\t+\(statements\)\t+([\d\.]+?%)/
  artifacts:
    expire_in: 1 month
    paths:
      - coverage.html
  tags:
    - nlx
    - shell-executor
  except:
    - schedules

Go linter:
  stage: Tests
  before_script:
   - export PATH=$PATH:/usr/local/go/bin
  script: 
    - golangci-lint run --new-from-rev $(git rev-parse origin/master)
  tags:
    - nlx
    - shell-executor
  except:
    - schedules
  
Directory-ui tests:
  image: node:10.16.0-alpine
  stage: Tests
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
    - node_modules/
  before_script:
    - cd directory-ui/
    - npm install
  script:
    - npm test -- --coverage
  coverage: /All\sfiles.*?\s+(\d+.\d+)/
  artifacts:
    expire_in: 1 month
    paths:
      - directory-ui/coverage
  tags:
    - nlx
    - docker-executor
  except:
    - schedules

Insight-ui tests:
  image: node:10.16.0-alpine
  stage: Tests
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
    - node_modules/
  before_script:
    - cd insight-ui/
    - npm install
  script:
    - npm test -- --coverage
  coverage: /All\sfiles.*?\s+(\d+.\d+)/
  artifacts:
    expire_in: 1 month
    paths:
      - insight-ui/coverage
  tags:
    - nlx
    - docker-executor
  except:
    - schedules

Database diff test:
  stage: Tests
  script:
    - ./directory-db/diff.sh ci-once
    - ./txlog-db/diff.sh ci-once
  except:
    - schedules
  tags:
    - nlx
    - shell-executor

Build:
  stage: Build
  script:
    - skaffold build
  except:
    - master
    - tags
    - schedules
  tags:
    - nlx
    - shell-executor

Run semantic release:
  image: node:10.16.0
  stage: Tools
  before_script:
  - npm ci
  script:
    - npx semantic-release
  only:
    - master
  except:
    - schedules
  when: manual
  tags:
    - nlx
    - docker-executor  

Release container images:
  stage: Release
  script:
    - skaffold build --profile release
  only:
    - master
    - tags
  except:
    - schedules
  tags:
    - nlx-privileged
    - shell-executor

.deploy:
  script:
    - skaffold run --profile release --profile deploy-${CI_ENVIRONMENT_NAME}
  tags:
    - nlx-privileged
    - shell-executor
  except:
    - schedules

Deploy test:
  extends: .deploy
  stage: Deploy test
  before_script:
    - kubectl config use-context delta.k8s.nlx.io
  environment:
    name: test
  only:
    - master

Deploy acceptance:
  extends: .deploy
  stage: Deploy acc
  environment:
    name: acc
  before_script:
    - kubectl config use-context delta.k8s.nlx.io
  only:
    - tags

Deploy demo:
  extends: .deploy
  stage: Deploy prod
  environment:
    name: demo
  before_script:
    - kubectl config use-context delta.k8s.nlx.io
  only:
    - tags
  when: manual

Deploy preprod:
  extends: .deploy
  stage: Deploy prod
  environment:
    name: preprod
  before_script:
    - kubectl config use-context delta.k8s.nlx.io
  only:
    - tags
  when: manual

Deploy prod:
  extends: .deploy
  stage: Deploy prod
  environment:
    name: prod
  before_script:
    - kubectl config use-context delta.k8s.nlx.io
  only:
    - tags
  when: manual

Docker tag latest:
  stage: Deploy prod
  script:
    - skaffold build --profile release | ./docker-tag-latest.awk
  only:
    - tags
  except:
    - schedules
  when: manual
  tags:
    - nlx-privileged
    - shell-executor

# Scan configuration based on
# the offical GitLab documentation and adjusted to be able to:
# - scan multiple images, based on `container-scanning/images-to-scan.txt`
# - transform the output files of the scans into one file named gl-container-scanning-report.json
# Via https://docs.gitlab.com/ee/user/application_security/container_scanning/#including-the-provided-template
Scan images:
  stage: Scan
  image: docker:stable
  tags:
    - docker
    - linux
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
  services:
    - docker:dind
  variables:
    CLAIR_LOCAL_SCAN_VERSION: v2.0.8_fe9b059d930314b54c78f75afe265955faf4fdc1
    NO_PROXY: docker,localhost
  only:
    - schedules
  allow_failure: true
  script:
    - apk add jq
    - docker run -d --name db arminc/clair-db:latest
    - docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:${CLAIR_LOCAL_SCAN_VERSION}
    - apk add -U wget ca-certificates
    - cat container-scanning/images-to-scan.txt | xargs -n1 docker pull
    - wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
    - mv clair-scanner_linux_amd64 clair-scanner
    - chmod +x clair-scanner
    - touch clair-whitelist.yml
    - retries=0
    - echo "Waiting for clair daemon to start"
    - while( ! wget -T 10 -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done
    - sh container-scanning/generate-report.sh container-scanning/images-to-scan.txt gl-container-scanning-report.json
  artifacts:
    paths:
      - tmp-scanning-reports/
      - gl-container-scanning-report.json
    reports:
      container_scanning: gl-container-scanning-report.json
