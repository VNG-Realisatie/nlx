Deploy review:
  stage: Deploy
  image: registry.gitlab.com/commonground/core/review-app-deployer:latest
  variables:
    REVIEW_BASE_DOMAIN: nlx.reviews
    K8S_NAMESPACE: "nlx-${CI_ENVIRONMENT_SLUG}"
    HELM_CHARTS_TO_DEPLOY: "shared rvrd gemeente-stijns vergunningsoftware-bv"
  before_script:
    - source ./.gitlab/ci/functions.sh
  script:
    - |
      export IMAGE_REGISTRY=$(cat ci_build_image_registry.txt)
      export IMAGE_TAG=$(cat ci_build_image_tag.txt)
      export IMAGE_VERSION=$(cat ci_build_image_version.txt)
      export DOMAIN_SUFFIX="${K8S_NAMESPACE}.${REVIEW_BASE_DOMAIN}"
      echo -e -n "${DOMAIN_SUFFIX}" > ci_environment_url.txt
    - |
      start_section helm_repo "Update Helm repositories"
      helm repo add stable "https://charts.helm.sh/stable"
      helm repo update
      stop_section helm_repo
    - |
      start_section namespace "Create namespace '${K8S_NAMESPACE}'"
      kubectl version
      kubectl create namespace "${K8S_NAMESPACE}" || true
      stop_section namespace
    - |
      for CHART in ${HELM_CHARTS_TO_DEPLOY}; do
        start_section deploy_${CHART} "Deploying chart '${CHART}'"
        CHART_DIRECTORY="./helm/deploy/${CHART}"

        if [ -f ${CHART_DIRECTORY}/Chart.lock ]; then
          start_section dependency_${CHART} "Installing Chart dependencies"
          helm dependency build ./helm/deploy/${CHART}
          stop_section dependency_${CHART}
        fi

        helm upgrade ${CHART} ${CHART_DIRECTORY} \
          --install \
          --namespace ${K8S_NAMESPACE} \
          --set-string global.imageRegistry=${IMAGE_REGISTRY} \
          --set-string global.imageTag=${IMAGE_TAG} \
          --values ${CHART_DIRECTORY}/values-review.yaml
        stop_section deploy_${CHART}
      done
    - |
      start_section deploy_review_page "Deploy review page chart"
      helm upgrade review-page ./helm/charts/review-page \
        --install \
        --namespace ${K8S_NAMESPACE} \
        --set-string global.imageRegistry=${IMAGE_REGISTRY} \
        --set-string global.imageTag=${IMAGE_TAG} \
        --set-string config.environmentSlugWithDomain=${DOMAIN_SUFFIX} \
        --set ingress.enabled=true \
        --set-string ingress.class=traefik \
        --set-string ingress.hosts[0]=${DOMAIN_SUFFIX}
      stop_section deploy_review_page
    - |
      echo "export CYPRESS_INWAY_NAME=rvrd-nlx-inway" >> e2e_environment.sh
      echo "export CYPRESS_LOGIN_ORGANIZATION_NAME=RvRD" >> e2e_environment.sh
      echo "export CYPRESS_LOGIN_USERNAME=admin@example.com" >> e2e_environment.sh
      echo "export CYPRESS_LOGIN_PASSWORD=password" >> e2e_environment.sh
  environment:
    name: $CI_COMMIT_REF_NAME
    url: https://nlx-${CI_ENVIRONMENT_SLUG}.${REVIEW_BASE_DOMAIN}
    on_stop: Remove review
    auto_stop_in: 1 week
  rules:
      # Review jobs are only accepted for environments prefixed with review/*
      # see: https://gitlab.com/groups/commonground/nlx/-/clusters
    - if: '$CI_COMMIT_BRANCH =~ /^review\/.*$/ && $CI_PROJECT_PATH == "commonground/nlx/nlx"'
  dependencies:
    - Build review
  artifacts:
    paths:
      - ci_environment_url.txt
      - e2e_environment.sh
  tags:
    - cg
    - docker

Remove review:
  stage: Deploy
  image: registry.gitlab.com/commonground/core/review-app-deployer:latest
  variables:
    K8S_NAMESPACE: "nlx-${CI_ENVIRONMENT_SLUG}"
  before_script:
    - source ./.gitlab/ci/functions.sh
  script:
    - |
      for RELEASE in $(helm list --all --short --namespace "${K8S_NAMESPACE}"); do
        start_section "uninstall_${RELEASE}" "Uninstall relasese ${RELEASE}"
        helm uninstall "${RELEASE}" --namespace "${K8S_NAMESPACE}"
        stop_section "uninstall_${RELEASE}"
      done
    - |
      start_section namespace "Delete namespace '${K8S_NAMESPACE}'"
      kubectl delete namespace "${K8S_NAMESPACE}"
      stop_section namespace
  environment:
    name: $CI_COMMIT_REF_NAME
    action: stop
  rules:
      # Review jobs are only accepted for environments prefixed with review/*
      # see: https://gitlab.com/groups/commonground/nlx/-/clusters
    - if: '$CI_COMMIT_BRANCH =~ /^review\/.*$/ && $CI_PROJECT_PATH == "commonground/nlx/nlx"'
      when: manual
      allow_failure: true
      # The combination `when: manual` and `allow_failure: true` allow this step to be manual without blocking
      # the pipeline. See https://docs.gitlab.com/ee/ci/yaml/README.html#rulesallow_failure
  tags:
    - cg
    - docker
