Lint commit messages:
  extends: .node-base
  stage: Tests
  script:
    - apk --no-cache add git
    - install_npm_dependencies
    - start_section lint "Linting commit messages"
    - npx commitlint --from $(git rev-parse origin/master)
    - stop_section lint
  rules:
    - if: '$CI_COMMIT_BRANCH' # do not run for tags
  tags:
    - docker
    - linux

Go go.mod tidy test:
  stage: Tests
  image: golang:1.17.0
  script:
    - cp go.mod go.mod.orig
    - /usr/local/go/bin/go mod download
    - /usr/local/go/bin/go mod tidy
    - diff go.mod.orig go.mod
  rules:
    - if: '$CI_COMMIT_BRANCH' # do not run for tags
  tags:
    - docker
    - linux

services:
  - postgres:12.8-alpine

variables:
  POSTGRES_DB: nlx
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: ""
  POSTGRES_HOST_AUTH_METHOD: trust

Go tests (unit & integration):
  stage: Tests
  image: golang:1.17.0
  variables:
    POSTGRES_DSN: "postgres://postgres@postgres:5432/nlx?sslmode=disable"
  before_script:
    - mkdir -p tmp-coverage-reports/
  script:
    - ./pki/fix-permissions.sh
    - /usr/local/go/bin/go mod download
    - /usr/local/go/bin/go test ./... --tags=integration -coverprofile tmp-coverage-reports/coverage.out.tmp
    - cat tmp-coverage-reports/coverage.out.tmp | grep -v '.pb.go\|.pb.gw.go' > tmp-coverage-reports/coverage.out
    - rm tmp-coverage-reports/coverage.out.tmp
    - /usr/local/go/bin/go tool cover -html=tmp-coverage-reports/coverage.out -o tmp-coverage-reports/coverage.html
    - /usr/local/go/bin/go tool cover -func=tmp-coverage-reports/coverage.out
  coverage: /total:\t+\(statements\)\t+([\d\.]+?%)/
  artifacts:
    expire_in: 1 month
    paths:
      - tmp-coverage-reports/coverage.html
  rules:
    - if: '$CI_COMMIT_BRANCH' # do not run for tags
  tags:
    - docker
    - linux

Go linter:
  stage: Tests
  image: golangci/golangci-lint:v1.42.0-alpine
  before_script:
   - export PATH=$PATH:/usr/local/go/bin
   - apk --no-cache add jq
  script:
    - golangci-lint version
    # Command based on https://docs.gitlab.com/ee/development/go_guide/index.html#automatic-linting
    # Write the code coverage report to gl-code-quality-report.json
    # and print linting issues to stdout in the format: path/to/file:line description
    # remove `--issues-exit-code 0` or set to non-zero to fail the job if linting issues are detected
    - golangci-lint run --timeout=5m --new-from-rev $(git rev-parse origin/master) --out-format code-climate | tee gl-code-quality-report.json | jq -r '.[] | "\(.location.path):\(.location.lines.begin) \(.description)"'
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json
  rules:
    - if: '$CI_COMMIT_BRANCH' # do not run for tags
  tags:
    - docker
    - linux

Directory-ui linter and tests:
  extends: .node-base
  stage: Tests
  script:
    - cd directory-ui/
    - install_npm_dependencies
    - start_section lint "Running linter"
    - npm run lint
    - stop_section lint
    - start_section test "Running tests"
    - npm test -- --coverage
    - stop_section test
  coverage: /All\sfiles.*?\s+(\d+.\d+)/
  artifacts:
    expire_in: 1 month
    paths:
      - directory-ui/coverage
  rules:
    - if: '$CI_COMMIT_BRANCH' # do not run for tags
  tags:
    - docker
    - linux

Management-ui linter and tests:
  extends: .node-base
  stage: Tests
  script:
    - >
      if grep -rin "\.only" management-ui/src/ management-ui-e2e-tests/cypress/integration/; then
        echo "Found `.only` in management-ui, please remove to run all tests"
        exit 1
      fi
    - cd management-ui/
    - install_npm_dependencies
    - start_section i18n "Checking translations"
    - cp public/i18n/en/common.json public/i18n/en/common.json.orig
    - cp public/i18n/nl/common.json public/i18n/nl/common.json.orig
    - npm run validate-translations
    - diff -u public/i18n/en/common.json.orig public/i18n/en/common.json
    - diff -u public/i18n/nl/common.json.orig public/i18n/nl/common.json
    - stop_section i18n
    - start_section lint "Running linter"
    - npm run lint
    - stop_section lint
    - start_section test "Running tests"
    - npm test -- --coverage --watchAll=false --runInBand
    - stop_section test
  coverage: /All\sfiles.*?\s+(\d+.\d+)/
  artifacts:
    expire_in: 1 month
    paths:
      - management-ui/coverage
  rules:
    - if: '$CI_COMMIT_BRANCH' # do not run for tags
  tags:
    - docker
    - linux

Helm lint:
  extends: .base
  stage: Tests
  image: registry.gitlab.com/commonground/core/review-app-deployer:latest
  script:
    - cd helm/
    - |
      for CHART in $(find charts/* -type d -maxdepth 0 -print); do
        start_section lint "Linting chart '${CHART}'"
        helm lint --strict ${CHART}
        stop_section lint
      done
  rules:
    - if: '$CI_COMMIT_BRANCH' # do not run for tags
  tags:
    - docker
    - linux
