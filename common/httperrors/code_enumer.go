// Code generated by "enumer -type=Code -linecomment -json ./common/httperrors"; DO NOT EDIT.

package httperrors

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _CodeName = "EMPTY_PATHSERVICE_DOES_NOT_EXISTERROR_EXECUTING_PLUGIN_CHAINSERVICE_UNREACHABLEMISSING_PEER_CERTIFICATEINVALID_CERTIFICATEACCESS_DENIEDERROR_WHILE_AUTHORIZING_REQUESTUNAUTHORIZEDUNABLE_TO_VERIFY_CLAIMREQUESTING_ORGANIZATION_IS_NOT_DELEGATEEDELEGATOR_DOES_NOT_HAVE_ACCESS_TO_SERVICEMISSING_LOG_RECORD_IDSERVER_ERRORINVALID_URLPROXY_MODE_DISABLEDUNSUPPORTED_METHODUNABLE_TO_PARSE_DELEGATION_METADATAUNABLE_TO_SETUP_MANAGEMENT_CLIENTORDER_NOT_FOUNDORDER_DOES_NOT_EXIST_FOR_YOUR_ORGANIZATIONORDER_REVOKEDORDER_EXPIREDORDER_DOES_NOT_CONTAIN_SERVICEUNABLE_TO_REQUEST_CLAIMRECEIVED_INVALID_CLAIMINVALID_DATA_SUBJECT_HEADER"

var _CodeIndex = [...]uint16{0, 10, 32, 60, 79, 103, 122, 135, 166, 178, 200, 240, 281, 302, 314, 325, 344, 362, 397, 430, 445, 487, 500, 513, 543, 566, 588, 615}

const _CodeLowerName = "empty_pathservice_does_not_existerror_executing_plugin_chainservice_unreachablemissing_peer_certificateinvalid_certificateaccess_deniederror_while_authorizing_requestunauthorizedunable_to_verify_claimrequesting_organization_is_not_delegateedelegator_does_not_have_access_to_servicemissing_log_record_idserver_errorinvalid_urlproxy_mode_disabledunsupported_methodunable_to_parse_delegation_metadataunable_to_setup_management_clientorder_not_foundorder_does_not_exist_for_your_organizationorder_revokedorder_expiredorder_does_not_contain_serviceunable_to_request_claimreceived_invalid_claiminvalid_data_subject_header"

func (i Code) String() string {
	i -= 1
	if i < 0 || i >= Code(len(_CodeIndex)-1) {
		return fmt.Sprintf("Code(%d)", i+1)
	}
	return _CodeName[_CodeIndex[i]:_CodeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CodeNoOp() {
	var x [1]struct{}
	_ = x[EmptyPath-(1)]
	_ = x[ServiceDoesNotExist-(2)]
	_ = x[ErrorExecutingPluginChain-(3)]
	_ = x[ServiceUnreachable-(4)]
	_ = x[MissingPeerCertificate-(5)]
	_ = x[InvalidCertificate-(6)]
	_ = x[AccessDenied-(7)]
	_ = x[ErrorWhileAuthorizingRequest-(8)]
	_ = x[Unauthorized-(9)]
	_ = x[UnableToVerifyClaim-(10)]
	_ = x[RequestingOrganizationIsNotDelegatee-(11)]
	_ = x[DelegatorDoesNotHaveAccessToService-(12)]
	_ = x[MissingLogRecordID-(13)]
	_ = x[ServerError-(14)]
	_ = x[InvalidURL-(15)]
	_ = x[ProxyModeDisabled-(16)]
	_ = x[UnsupportedMethod-(17)]
	_ = x[UnableToParseDelegationMetadata-(18)]
	_ = x[UnableToSetupManagementClient-(19)]
	_ = x[OrderNotFound-(20)]
	_ = x[OrderDoesNotExistForYourOrganization-(21)]
	_ = x[OrderRevoked-(22)]
	_ = x[OrderExpired-(23)]
	_ = x[OrderDoesNotContainService-(24)]
	_ = x[UnableToRequestClaim-(25)]
	_ = x[ReceivedInvalidClaim-(26)]
	_ = x[InvalidDataSubjectHeader-(27)]
}

var _CodeValues = []Code{EmptyPath, ServiceDoesNotExist, ErrorExecutingPluginChain, ServiceUnreachable, MissingPeerCertificate, InvalidCertificate, AccessDenied, ErrorWhileAuthorizingRequest, Unauthorized, UnableToVerifyClaim, RequestingOrganizationIsNotDelegatee, DelegatorDoesNotHaveAccessToService, MissingLogRecordID, ServerError, InvalidURL, ProxyModeDisabled, UnsupportedMethod, UnableToParseDelegationMetadata, UnableToSetupManagementClient, OrderNotFound, OrderDoesNotExistForYourOrganization, OrderRevoked, OrderExpired, OrderDoesNotContainService, UnableToRequestClaim, ReceivedInvalidClaim, InvalidDataSubjectHeader}

var _CodeNameToValueMap = map[string]Code{
	_CodeName[0:10]:         EmptyPath,
	_CodeLowerName[0:10]:    EmptyPath,
	_CodeName[10:32]:        ServiceDoesNotExist,
	_CodeLowerName[10:32]:   ServiceDoesNotExist,
	_CodeName[32:60]:        ErrorExecutingPluginChain,
	_CodeLowerName[32:60]:   ErrorExecutingPluginChain,
	_CodeName[60:79]:        ServiceUnreachable,
	_CodeLowerName[60:79]:   ServiceUnreachable,
	_CodeName[79:103]:       MissingPeerCertificate,
	_CodeLowerName[79:103]:  MissingPeerCertificate,
	_CodeName[103:122]:      InvalidCertificate,
	_CodeLowerName[103:122]: InvalidCertificate,
	_CodeName[122:135]:      AccessDenied,
	_CodeLowerName[122:135]: AccessDenied,
	_CodeName[135:166]:      ErrorWhileAuthorizingRequest,
	_CodeLowerName[135:166]: ErrorWhileAuthorizingRequest,
	_CodeName[166:178]:      Unauthorized,
	_CodeLowerName[166:178]: Unauthorized,
	_CodeName[178:200]:      UnableToVerifyClaim,
	_CodeLowerName[178:200]: UnableToVerifyClaim,
	_CodeName[200:240]:      RequestingOrganizationIsNotDelegatee,
	_CodeLowerName[200:240]: RequestingOrganizationIsNotDelegatee,
	_CodeName[240:281]:      DelegatorDoesNotHaveAccessToService,
	_CodeLowerName[240:281]: DelegatorDoesNotHaveAccessToService,
	_CodeName[281:302]:      MissingLogRecordID,
	_CodeLowerName[281:302]: MissingLogRecordID,
	_CodeName[302:314]:      ServerError,
	_CodeLowerName[302:314]: ServerError,
	_CodeName[314:325]:      InvalidURL,
	_CodeLowerName[314:325]: InvalidURL,
	_CodeName[325:344]:      ProxyModeDisabled,
	_CodeLowerName[325:344]: ProxyModeDisabled,
	_CodeName[344:362]:      UnsupportedMethod,
	_CodeLowerName[344:362]: UnsupportedMethod,
	_CodeName[362:397]:      UnableToParseDelegationMetadata,
	_CodeLowerName[362:397]: UnableToParseDelegationMetadata,
	_CodeName[397:430]:      UnableToSetupManagementClient,
	_CodeLowerName[397:430]: UnableToSetupManagementClient,
	_CodeName[430:445]:      OrderNotFound,
	_CodeLowerName[430:445]: OrderNotFound,
	_CodeName[445:487]:      OrderDoesNotExistForYourOrganization,
	_CodeLowerName[445:487]: OrderDoesNotExistForYourOrganization,
	_CodeName[487:500]:      OrderRevoked,
	_CodeLowerName[487:500]: OrderRevoked,
	_CodeName[500:513]:      OrderExpired,
	_CodeLowerName[500:513]: OrderExpired,
	_CodeName[513:543]:      OrderDoesNotContainService,
	_CodeLowerName[513:543]: OrderDoesNotContainService,
	_CodeName[543:566]:      UnableToRequestClaim,
	_CodeLowerName[543:566]: UnableToRequestClaim,
	_CodeName[566:588]:      ReceivedInvalidClaim,
	_CodeLowerName[566:588]: ReceivedInvalidClaim,
	_CodeName[588:615]:      InvalidDataSubjectHeader,
	_CodeLowerName[588:615]: InvalidDataSubjectHeader,
}

var _CodeNames = []string{
	_CodeName[0:10],
	_CodeName[10:32],
	_CodeName[32:60],
	_CodeName[60:79],
	_CodeName[79:103],
	_CodeName[103:122],
	_CodeName[122:135],
	_CodeName[135:166],
	_CodeName[166:178],
	_CodeName[178:200],
	_CodeName[200:240],
	_CodeName[240:281],
	_CodeName[281:302],
	_CodeName[302:314],
	_CodeName[314:325],
	_CodeName[325:344],
	_CodeName[344:362],
	_CodeName[362:397],
	_CodeName[397:430],
	_CodeName[430:445],
	_CodeName[445:487],
	_CodeName[487:500],
	_CodeName[500:513],
	_CodeName[513:543],
	_CodeName[543:566],
	_CodeName[566:588],
	_CodeName[588:615],
}

// CodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CodeString(s string) (Code, error) {
	if val, ok := _CodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Code values", s)
}

// CodeValues returns all values of the enum
func CodeValues() []Code {
	return _CodeValues
}

// CodeStrings returns a slice of all String values of the enum
func CodeStrings() []string {
	strs := make([]string, len(_CodeNames))
	copy(strs, _CodeNames)
	return strs
}

// IsACode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Code) IsACode() bool {
	for _, v := range _CodeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Code
func (i Code) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Code
func (i *Code) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Code should be a string, got %s", data)
	}

	var err error
	*i, err = CodeString(s)
	return err
}
