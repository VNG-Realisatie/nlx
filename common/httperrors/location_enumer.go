// Code generated by "enumer -type=Location -json"; DO NOT EDIT.

package httperrors

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _LocationName = "A1IAS1C1M1O1OAS1"

var _LocationIndex = [...]uint8{0, 2, 6, 8, 10, 12, 16}

const _LocationLowerName = "a1ias1c1m1o1oas1"

func (i Location) String() string {
	i -= 1
	if i < 0 || i >= Location(len(_LocationIndex)-1) {
		return fmt.Sprintf("Location(%d)", i+1)
	}
	return _LocationName[_LocationIndex[i]:_LocationIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _LocationNoOp() {
	var x [1]struct{}
	_ = x[A1-(1)]
	_ = x[IAS1-(2)]
	_ = x[C1-(3)]
	_ = x[M1-(4)]
	_ = x[O1-(5)]
	_ = x[OAS1-(6)]
}

var _LocationValues = []Location{A1, IAS1, C1, M1, O1, OAS1}

var _LocationNameToValueMap = map[string]Location{
	_LocationName[0:2]:        A1,
	_LocationLowerName[0:2]:   A1,
	_LocationName[2:6]:        IAS1,
	_LocationLowerName[2:6]:   IAS1,
	_LocationName[6:8]:        C1,
	_LocationLowerName[6:8]:   C1,
	_LocationName[8:10]:       M1,
	_LocationLowerName[8:10]:  M1,
	_LocationName[10:12]:      O1,
	_LocationLowerName[10:12]: O1,
	_LocationName[12:16]:      OAS1,
	_LocationLowerName[12:16]: OAS1,
}

var _LocationNames = []string{
	_LocationName[0:2],
	_LocationName[2:6],
	_LocationName[6:8],
	_LocationName[8:10],
	_LocationName[10:12],
	_LocationName[12:16],
}

// LocationString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func LocationString(s string) (Location, error) {
	if val, ok := _LocationNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _LocationNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Location values", s)
}

// LocationValues returns all values of the enum
func LocationValues() []Location {
	return _LocationValues
}

// LocationStrings returns a slice of all String values of the enum
func LocationStrings() []string {
	strs := make([]string, len(_LocationNames))
	copy(strs, _LocationNames)
	return strs
}

// IsALocation returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Location) IsALocation() bool {
	for _, v := range _LocationValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Location
func (i Location) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Location
func (i *Location) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Location should be a string, got %s", data)
	}

	var err error
	*i, err = LocationString(s)
	return err
}
