// Code generated by MockGen. DO NOT EDIT.
// Source: ./transactionlog/logger.go

// Package mock_transactionlog is a generated GoMock package.
package mock_transactionlog

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	transactionlog "go.nlx.io/nlx/common/transactionlog"
)

// MockTransactionLogger is a mock of TransactionLogger interface.
type MockTransactionLogger struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionLoggerMockRecorder
}

// MockTransactionLoggerMockRecorder is the mock recorder for MockTransactionLogger.
type MockTransactionLoggerMockRecorder struct {
	mock *MockTransactionLogger
}

// NewMockTransactionLogger creates a new mock instance.
func NewMockTransactionLogger(ctrl *gomock.Controller) *MockTransactionLogger {
	mock := &MockTransactionLogger{ctrl: ctrl}
	mock.recorder = &MockTransactionLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionLogger) EXPECT() *MockTransactionLoggerMockRecorder {
	return m.recorder
}

// AddRecord mocks base method.
func (m *MockTransactionLogger) AddRecord(rec *transactionlog.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRecord", rec)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRecord indicates an expected call of AddRecord.
func (mr *MockTransactionLoggerMockRecorder) AddRecord(rec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRecord", reflect.TypeOf((*MockTransactionLogger)(nil).AddRecord), rec)
}

// Close mocks base method.
func (m *MockTransactionLogger) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTransactionLoggerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTransactionLogger)(nil).Close))
}
