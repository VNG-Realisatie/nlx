// Code generated by MockGen. DO NOT EDIT.
// Source: domain/directory/storage/repository.go

// Package directory_mock is a generated GoMock package.
package directory_mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	domain "go.nlx.io/nlx/directory-api/domain"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// ClearIfSetAsOrganizationInway mocks base method.
func (m *MockRepository) ClearIfSetAsOrganizationInway(ctx context.Context, organizationSerialNumber, inwayAddress string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearIfSetAsOrganizationInway", ctx, organizationSerialNumber, inwayAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearIfSetAsOrganizationInway indicates an expected call of ClearIfSetAsOrganizationInway.
func (mr *MockRepositoryMockRecorder) ClearIfSetAsOrganizationInway(ctx, organizationSerialNumber, inwayAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearIfSetAsOrganizationInway", reflect.TypeOf((*MockRepository)(nil).ClearIfSetAsOrganizationInway), ctx, organizationSerialNumber, inwayAddress)
}

// ClearOrganizationInway mocks base method.
func (m *MockRepository) ClearOrganizationInway(ctx context.Context, organizationSerialNumber string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearOrganizationInway", ctx, organizationSerialNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearOrganizationInway indicates an expected call of ClearOrganizationInway.
func (mr *MockRepositoryMockRecorder) ClearOrganizationInway(ctx, organizationSerialNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearOrganizationInway", reflect.TypeOf((*MockRepository)(nil).ClearOrganizationInway), ctx, organizationSerialNumber)
}

// GetInway mocks base method.
func (m *MockRepository) GetInway(name, organizationSerialNumber string) (*domain.Inway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInway", name, organizationSerialNumber)
	ret0, _ := ret[0].(*domain.Inway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInway indicates an expected call of GetInway.
func (mr *MockRepositoryMockRecorder) GetInway(name, organizationSerialNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInway", reflect.TypeOf((*MockRepository)(nil).GetInway), name, organizationSerialNumber)
}

// GetOrganizationInwayAddress mocks base method.
func (m *MockRepository) GetOrganizationInwayAddress(ctx context.Context, organizationSerialNumber string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationInwayAddress", ctx, organizationSerialNumber)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationInwayAddress indicates an expected call of GetOrganizationInwayAddress.
func (mr *MockRepositoryMockRecorder) GetOrganizationInwayAddress(ctx, organizationSerialNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationInwayAddress", reflect.TypeOf((*MockRepository)(nil).GetOrganizationInwayAddress), ctx, organizationSerialNumber)
}

// GetOutway mocks base method.
func (m *MockRepository) GetOutway(name, organizationSerialNumber string) (*domain.Outway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutway", name, organizationSerialNumber)
	ret0, _ := ret[0].(*domain.Outway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutway indicates an expected call of GetOutway.
func (mr *MockRepositoryMockRecorder) GetOutway(name, organizationSerialNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutway", reflect.TypeOf((*MockRepository)(nil).GetOutway), name, organizationSerialNumber)
}

// GetService mocks base method.
func (m *MockRepository) GetService(id uint) (*domain.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", id)
	ret0, _ := ret[0].(*domain.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockRepositoryMockRecorder) GetService(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockRepository)(nil).GetService), id)
}

// ListOrganizations mocks base method.
func (m *MockRepository) ListOrganizations(ctx context.Context) ([]*domain.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizations", ctx)
	ret0, _ := ret[0].([]*domain.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizations indicates an expected call of ListOrganizations.
func (mr *MockRepositoryMockRecorder) ListOrganizations(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizations", reflect.TypeOf((*MockRepository)(nil).ListOrganizations), ctx)
}

// ListParticipants mocks base method.
func (m *MockRepository) ListParticipants(ctx context.Context) ([]*domain.Participant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListParticipants", ctx)
	ret0, _ := ret[0].([]*domain.Participant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListParticipants indicates an expected call of ListParticipants.
func (mr *MockRepositoryMockRecorder) ListParticipants(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListParticipants", reflect.TypeOf((*MockRepository)(nil).ListParticipants), ctx)
}

// ListServices mocks base method.
func (m *MockRepository) ListServices(ctx context.Context, organizationSerialNumber string) ([]*domain.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServices", ctx, organizationSerialNumber)
	ret0, _ := ret[0].([]*domain.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices.
func (mr *MockRepositoryMockRecorder) ListServices(ctx, organizationSerialNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockRepository)(nil).ListServices), ctx, organizationSerialNumber)
}

// ListVersionStatistics mocks base method.
func (m *MockRepository) ListVersionStatistics(ctx context.Context) ([]*domain.VersionStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVersionStatistics", ctx)
	ret0, _ := ret[0].([]*domain.VersionStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVersionStatistics indicates an expected call of ListVersionStatistics.
func (mr *MockRepositoryMockRecorder) ListVersionStatistics(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVersionStatistics", reflect.TypeOf((*MockRepository)(nil).ListVersionStatistics), ctx)
}

// RegisterInway mocks base method.
func (m *MockRepository) RegisterInway(arg0 *domain.Inway) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterInway", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterInway indicates an expected call of RegisterInway.
func (mr *MockRepositoryMockRecorder) RegisterInway(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterInway", reflect.TypeOf((*MockRepository)(nil).RegisterInway), arg0)
}

// RegisterOutway mocks base method.
func (m *MockRepository) RegisterOutway(arg0 *domain.Outway) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterOutway", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterOutway indicates an expected call of RegisterOutway.
func (mr *MockRepositoryMockRecorder) RegisterOutway(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterOutway", reflect.TypeOf((*MockRepository)(nil).RegisterOutway), arg0)
}

// RegisterService mocks base method.
func (m *MockRepository) RegisterService(arg0 *domain.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterService", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterService indicates an expected call of RegisterService.
func (mr *MockRepositoryMockRecorder) RegisterService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterService", reflect.TypeOf((*MockRepository)(nil).RegisterService), arg0)
}

// SetOrganizationEmailAddress mocks base method.
func (m *MockRepository) SetOrganizationEmailAddress(ctx context.Context, organization *domain.Organization, emailAddress string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOrganizationEmailAddress", ctx, organization, emailAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOrganizationEmailAddress indicates an expected call of SetOrganizationEmailAddress.
func (mr *MockRepositoryMockRecorder) SetOrganizationEmailAddress(ctx, organization, emailAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOrganizationEmailAddress", reflect.TypeOf((*MockRepository)(nil).SetOrganizationEmailAddress), ctx, organization, emailAddress)
}

// SetOrganizationInway mocks base method.
func (m *MockRepository) SetOrganizationInway(ctx context.Context, organizationSerialNumber, inwayAddress string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOrganizationInway", ctx, organizationSerialNumber, inwayAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOrganizationInway indicates an expected call of SetOrganizationInway.
func (mr *MockRepositoryMockRecorder) SetOrganizationInway(ctx, organizationSerialNumber, inwayAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOrganizationInway", reflect.TypeOf((*MockRepository)(nil).SetOrganizationInway), ctx, organizationSerialNumber, inwayAddress)
}

// Shutdown mocks base method.
func (m *MockRepository) Shutdown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockRepositoryMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockRepository)(nil).Shutdown))
}
