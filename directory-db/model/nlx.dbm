<?xml version="1.0" encoding="UTF-8"?>
<!--
CAUTION: Do not modify this file unless you know what you are doing.
         Unexpected results may occur if the code is changed deliberately.
-->
<dbmodel pgmodeler-ver="0.9.2-alpha" last-position="0,0" last-zoom="1"
	 default-schema="public" default-owner="postgres">
<role name="nlx-directory"
      login="true"
      encrypted="true"
      password="nlx-directory">
</role>

<database name="nlx" is-template="false" allow-conns="true">
</database>

<schema name="public" fill-color="#e1e1e1" sql-disabled="true">
</schema>

<schema name="directory" rect-visible="true" fill-color="#e1e1e1">
	<role name="postgres"/>
</schema>

<table name="organizations" hide-ext-attribs="true">
	<schema name="directory"/>
	<role name="postgres"/>
	<appended-sql><![CDATA[GRANT USAGE, SELECT ON SEQUENCE organizations_id_seq TO "nlx-directory";]]></appended-sql>
	<position x="120" y="280"/>
	<column name="id" not-null="true">
		<type name="serial" length="0"/>
	</column>
	<column name="name" not-null="true">
		<type name="varchar" length="100"/>
	</column>
	<column name="insight_log_endpoint">
		<type name="varchar" length="250"/>
	</column>
	<column name="insight_irma_endpoint">
		<type name="varchar" length="250"/>
	</column>
	<constraint name="organizations_pk" type="pk-constr" table="directory.organizations">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="organizations_uq_name" type="uq-constr" table="directory.organizations">
		<columns names="name" ref-type="src-columns"/>
	</constraint>
</table>

<table name="services">
	<schema name="directory"/>
	<role name="postgres"/>
	<appended-sql><![CDATA[GRANT USAGE, SELECT ON SEQUENCE services_id_seq TO "nlx-directory";]]></appended-sql>
	<position x="1260" y="540"/>
	<column name="id" not-null="true">
		<type name="serial" length="0"/>
	</column>
	<column name="organization_id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="name" not-null="true">
		<type name="varchar" length="100"/>
	</column>
	<column name="internal" not-null="true" default-value="false">
		<type name="boolean" length="0"/>
	</column>
	<column name="documentation_url">
		<type name="varchar" length="250"/>
	</column>
	<column name="api_specification_type">
		<type name="varchar" length="20"/>
	</column>
	<column name="tech_support_contact">
		<type name="varchar" length="250"/>
	</column>
	<column name="public_support_contact">
		<type name="varchar" length="250"/>
	</column>
	<constraint name="services_pk" type="pk-constr" table="directory.services">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="services_uq_name" type="uq-constr" table="directory.services">
		<columns names="organization_id,name" ref-type="src-columns"/>
	</constraint>
	<constraint name="services_check_typespec" type="ck-constr" table="directory.services">
			<expression><![CDATA[api_specification_type IS NULL OR (
	api_specification_type = 'OpenAPI2'
	OR
	api_specification_type = 'OpenAPI3'
)]]></expression>
	</constraint>
</table>

<table name="inways">
	<schema name="directory"/>
	<role name="postgres"/>
	<appended-sql><![CDATA[GRANT USAGE, SELECT ON SEQUENCE inways_id_seq TO "nlx-directory";]]></appended-sql>
	<position x="1300" y="80"/>
	<column name="id" not-null="true">
		<type name="serial" length="0"/>
	</column>
	<column name="organization_id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="address" not-null="true">
		<type name="varchar" length="100"/>
	</column>
	<constraint name="inways_pk" type="pk-constr" table="directory.inways">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="inways_uq_address" type="uq-constr" table="directory.inways">
		<columns names="organization_id,address" ref-type="src-columns"/>
	</constraint>
</table>

<table name="availabilities">
	<schema name="directory"/>
	<role name="postgres"/>
	<appended-sql><![CDATA[GRANT USAGE, SELECT ON SEQUENCE availabilities_id_seq TO "nlx-directory";]]></appended-sql>
	<position x="2580" y="200"/>
	<column name="id" not-null="true">
		<type name="serial" length="0"/>
	</column>
	<column name="inway_id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="service_id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="healthy" not-null="true" default-value="false">
		<type name="bool" length="0"/>
	</column>
	<constraint name="availabilities_pk" type="pk-constr" table="directory.availabilities">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="availabilities_uq_inway_service" type="uq-constr" table="directory.availabilities">
		<columns names="inway_id,service_id" ref-type="src-columns"/>
	</constraint>
</table>

<function name="availabilities_verify"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="directory"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="0"/>
	</return-type>
	<definition><![CDATA[DECLARE
	_inway_org_id integer;
	_service_org_id integer;
BEGIN
	SELECT organization_id INTO _inway_org_id
		FROM directory.inways
		WHERE id = NEW.inway_id;
	SELECT organization_id INTO _service_org_id
		FROM directory.services
		WHERE id = NEW.service_id;
	IF _inway_org_id != _service_org_id THEN
		RAISE EXCEPTION 'service organization does not match inway organization';
	END IF;
	RETURN NEW;
END]]></definition>
</function>

<trigger name="availabilities_verify" firing-type="AFTER" per-line="true" constraint="true"
	 ins-event="true" del-event="false" upd-event="true" trunc-event="false"
	 table="directory.availabilities">
		<function signature="directory.availabilities_verify()"/>
</trigger>

<function name="availabilities_notify_event"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="directory"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="0"/>
	</return-type>
	<definition><![CDATA[DECLARE 
        data json;
        notification json;
    BEGIN
        IF (TG_OP = 'DELETE') THEN
            data = row_to_json(OLD);
        ELSE
             SELECT row_to_json(t) into data from (
                SELECT
                    availabilities.id,
                    organizations.name AS organization_name,
                    services.name AS service_name,
                    inways.address
                FROM directory.availabilities
                    INNER JOIN directory.inways
                        ON availabilities.inway_id = inways.id
                    INNER JOIN directory.services
                        ON availabilities.service_id = services.id
                    INNER JOIN directory.organizations
                        ON services.organization_id = organizations.id
                WHERE 
                    availabilities.id = NEW.id
             ) t;
        END IF;

      
        notification = json_build_object(
                          'action', TG_OP,
                          'availability', data);
                
        PERFORM pg_notify('availabilities',notification::text);
   
        RETURN NULL; 
    END;]]></definition>
</function>

<trigger name="availabilities_notify" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="false" trunc-event="false"
	 table="directory.availabilities">
		<function signature="directory.availabilities_notify_event()"/>
</trigger>

<constraint name="services_fk_organization" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="directory.organizations" table="directory.services">
	<columns names="organization_id" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="inways_fk_organization" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="directory.organizations" table="directory.inways">
	<columns names="organization_id" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="availabilities_fk_inway" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="directory.inways" table="directory.availabilities">
	<columns names="inway_id" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="availabilities_fk_service" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="directory.services" table="directory.availabilities">
	<columns names="service_id" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<relationship name="rel_services_organizations" type="relfk"
	 src-table="directory.services"
	 dst-table="directory.organizations" reference-fk="services_fk_organization"
	 src-required="false" dst-required="false"/>

<relationship name="rel_inways_organizations" type="relfk"
	 src-table="directory.inways"
	 dst-table="directory.organizations" reference-fk="inways_fk_organization"
	 src-required="false" dst-required="false"/>

<relationship name="rel_availability_inways" type="relfk"
	 src-table="directory.availabilities"
	 dst-table="directory.inways" reference-fk="availabilities_fk_inway"
	 src-required="false" dst-required="false"/>

<relationship name="rel_availability_services" type="relfk"
	 src-table="directory.availabilities"
	 dst-table="directory.services" reference-fk="availabilities_fk_service"
	 src-required="false" dst-required="false"/>

<permission>
	<object name="directory.organizations" type="table"/>
	<roles names="&quot;nlx-directory&quot;"/>
	<privileges select="true" delete="true" insert="true" update="true"/>
</permission>
<permission>
	<object name="directory.inways" type="table"/>
	<roles names="&quot;nlx-directory&quot;"/>
	<privileges select="true" delete="true" insert="true" update="true"/>
</permission>
<permission>
	<object name="directory.services" type="table"/>
	<roles names="&quot;nlx-directory&quot;"/>
	<privileges select="true" delete="true" insert="true" update="true"/>
</permission>
<permission>
	<object name="directory.availabilities" type="table"/>
	<roles names="&quot;nlx-directory&quot;"/>
	<privileges select="true" delete="true" insert="true" update="true"/>
</permission>
<permission>
	<object name="directory" type="schema"/>
	<roles names="&quot;nlx-directory&quot;"/>
	<privileges usage="true"/>
</permission>
</dbmodel>
