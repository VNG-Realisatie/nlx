// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package inspectionapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DirectoryInspectionClient is the client API for DirectoryInspection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DirectoryInspectionClient interface {
	ListServices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListServicesResponse, error)
	ListOrganizations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListOrganizationsResponse, error)
	GetOrganizationInway(ctx context.Context, in *GetOrganizationInwayRequest, opts ...grpc.CallOption) (*GetOrganizationInwayResponse, error)
	ListInOutwayStatistics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListInOutwayStatisticsResponse, error)
}

type directoryInspectionClient struct {
	cc grpc.ClientConnInterface
}

func NewDirectoryInspectionClient(cc grpc.ClientConnInterface) DirectoryInspectionClient {
	return &directoryInspectionClient{cc}
}

func (c *directoryInspectionClient) ListServices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListServicesResponse, error) {
	out := new(ListServicesResponse)
	err := c.cc.Invoke(ctx, "/DirectoryInspection/ListServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryInspectionClient) ListOrganizations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListOrganizationsResponse, error) {
	out := new(ListOrganizationsResponse)
	err := c.cc.Invoke(ctx, "/DirectoryInspection/ListOrganizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryInspectionClient) GetOrganizationInway(ctx context.Context, in *GetOrganizationInwayRequest, opts ...grpc.CallOption) (*GetOrganizationInwayResponse, error) {
	out := new(GetOrganizationInwayResponse)
	err := c.cc.Invoke(ctx, "/DirectoryInspection/GetOrganizationInway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryInspectionClient) ListInOutwayStatistics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListInOutwayStatisticsResponse, error) {
	out := new(ListInOutwayStatisticsResponse)
	err := c.cc.Invoke(ctx, "/DirectoryInspection/ListInOutwayStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DirectoryInspectionServer is the server API for DirectoryInspection service.
// All implementations must embed UnimplementedDirectoryInspectionServer
// for forward compatibility
type DirectoryInspectionServer interface {
	ListServices(context.Context, *emptypb.Empty) (*ListServicesResponse, error)
	ListOrganizations(context.Context, *emptypb.Empty) (*ListOrganizationsResponse, error)
	GetOrganizationInway(context.Context, *GetOrganizationInwayRequest) (*GetOrganizationInwayResponse, error)
	ListInOutwayStatistics(context.Context, *emptypb.Empty) (*ListInOutwayStatisticsResponse, error)
	mustEmbedUnimplementedDirectoryInspectionServer()
}

// UnimplementedDirectoryInspectionServer must be embedded to have forward compatible implementations.
type UnimplementedDirectoryInspectionServer struct {
}

func (UnimplementedDirectoryInspectionServer) ListServices(context.Context, *emptypb.Empty) (*ListServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (UnimplementedDirectoryInspectionServer) ListOrganizations(context.Context, *emptypb.Empty) (*ListOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizations not implemented")
}
func (UnimplementedDirectoryInspectionServer) GetOrganizationInway(context.Context, *GetOrganizationInwayRequest) (*GetOrganizationInwayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationInway not implemented")
}
func (UnimplementedDirectoryInspectionServer) ListInOutwayStatistics(context.Context, *emptypb.Empty) (*ListInOutwayStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInOutwayStatistics not implemented")
}
func (UnimplementedDirectoryInspectionServer) mustEmbedUnimplementedDirectoryInspectionServer() {}

// UnsafeDirectoryInspectionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DirectoryInspectionServer will
// result in compilation errors.
type UnsafeDirectoryInspectionServer interface {
	mustEmbedUnimplementedDirectoryInspectionServer()
}

func RegisterDirectoryInspectionServer(s grpc.ServiceRegistrar, srv DirectoryInspectionServer) {
	s.RegisterService(&DirectoryInspection_ServiceDesc, srv)
}

func _DirectoryInspection_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryInspectionServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DirectoryInspection/ListServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryInspectionServer).ListServices(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryInspection_ListOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryInspectionServer).ListOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DirectoryInspection/ListOrganizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryInspectionServer).ListOrganizations(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryInspection_GetOrganizationInway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationInwayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryInspectionServer).GetOrganizationInway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DirectoryInspection/GetOrganizationInway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryInspectionServer).GetOrganizationInway(ctx, req.(*GetOrganizationInwayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryInspection_ListInOutwayStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryInspectionServer).ListInOutwayStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DirectoryInspection/ListInOutwayStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryInspectionServer).ListInOutwayStatistics(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// DirectoryInspection_ServiceDesc is the grpc.ServiceDesc for DirectoryInspection service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DirectoryInspection_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DirectoryInspection",
	HandlerType: (*DirectoryInspectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListServices",
			Handler:    _DirectoryInspection_ListServices_Handler,
		},
		{
			MethodName: "ListOrganizations",
			Handler:    _DirectoryInspection_ListOrganizations_Handler,
		},
		{
			MethodName: "GetOrganizationInway",
			Handler:    _DirectoryInspection_GetOrganizationInway_Handler,
		},
		{
			MethodName: "ListInOutwayStatistics",
			Handler:    _DirectoryInspection_ListInOutwayStatistics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inspectionapi.proto",
}
