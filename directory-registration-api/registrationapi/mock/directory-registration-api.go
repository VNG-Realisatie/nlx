// Copyright Â© VNG Realisatie 2018
// Licensed under the EUPL

// Code generated by MockGen. DO NOT EDIT.
// Source: registrationapi.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	registrationapi "go.nlx.io/nlx/directory-registration-api/registrationapi"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockDirectoryRegistrationClient is a mock of DirectoryRegistrationClient interface
type MockDirectoryRegistrationClient struct {
	ctrl     *gomock.Controller
	recorder *MockDirectoryRegistrationClientMockRecorder
}

// MockDirectoryRegistrationClientMockRecorder is the mock recorder for MockDirectoryRegistrationClient
type MockDirectoryRegistrationClientMockRecorder struct {
	mock *MockDirectoryRegistrationClient
}

// NewMockDirectoryRegistrationClient creates a new mock instance
func NewMockDirectoryRegistrationClient(ctrl *gomock.Controller) *MockDirectoryRegistrationClient {
	mock := &MockDirectoryRegistrationClient{ctrl: ctrl}
	mock.recorder = &MockDirectoryRegistrationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDirectoryRegistrationClient) EXPECT() *MockDirectoryRegistrationClientMockRecorder {
	return m.recorder
}

// RegisterInway mocks base method
func (m *MockDirectoryRegistrationClient) RegisterInway(ctx context.Context, in *registrationapi.RegisterInwayRequest, opts ...grpc.CallOption) (*registrationapi.RegisterInwayResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterInway", varargs...)
	ret0, _ := ret[0].(*registrationapi.RegisterInwayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterInway indicates an expected call of RegisterInway
func (mr *MockDirectoryRegistrationClientMockRecorder) RegisterInway(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterInway", reflect.TypeOf((*MockDirectoryRegistrationClient)(nil).RegisterInway), varargs...)
}

// MockDirectoryRegistrationServer is a mock of DirectoryRegistrationServer interface
type MockDirectoryRegistrationServer struct {
	ctrl     *gomock.Controller
	recorder *MockDirectoryRegistrationServerMockRecorder
}

// MockDirectoryRegistrationServerMockRecorder is the mock recorder for MockDirectoryRegistrationServer
type MockDirectoryRegistrationServerMockRecorder struct {
	mock *MockDirectoryRegistrationServer
}

// NewMockDirectoryRegistrationServer creates a new mock instance
func NewMockDirectoryRegistrationServer(ctrl *gomock.Controller) *MockDirectoryRegistrationServer {
	mock := &MockDirectoryRegistrationServer{ctrl: ctrl}
	mock.recorder = &MockDirectoryRegistrationServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDirectoryRegistrationServer) EXPECT() *MockDirectoryRegistrationServerMockRecorder {
	return m.recorder
}

// RegisterInway mocks base method
func (m *MockDirectoryRegistrationServer) RegisterInway(arg0 context.Context, arg1 *registrationapi.RegisterInwayRequest) (*registrationapi.RegisterInwayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterInway", arg0, arg1)
	ret0, _ := ret[0].(*registrationapi.RegisterInwayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterInway indicates an expected call of RegisterInway
func (mr *MockDirectoryRegistrationServerMockRecorder) RegisterInway(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterInway", reflect.TypeOf((*MockDirectoryRegistrationServer)(nil).RegisterInway), arg0, arg1)
}
