// Code generated by MockGen. DO NOT EDIT.
// Source: registrationapi/registrationapi_grpc.pb.go

// Package mock_registrationapi is a generated GoMock package.
package mock_registrationapi

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	registrationapi "go.nlx.io/nlx/directory-registration-api/registrationapi"
)

// MockDirectoryRegistrationClient is a mock of DirectoryRegistrationClient interface.
type MockDirectoryRegistrationClient struct {
	ctrl     *gomock.Controller
	recorder *MockDirectoryRegistrationClientMockRecorder
}

// MockDirectoryRegistrationClientMockRecorder is the mock recorder for MockDirectoryRegistrationClient.
type MockDirectoryRegistrationClientMockRecorder struct {
	mock *MockDirectoryRegistrationClient
}

// NewMockDirectoryRegistrationClient creates a new mock instance.
func NewMockDirectoryRegistrationClient(ctrl *gomock.Controller) *MockDirectoryRegistrationClient {
	mock := &MockDirectoryRegistrationClient{ctrl: ctrl}
	mock.recorder = &MockDirectoryRegistrationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectoryRegistrationClient) EXPECT() *MockDirectoryRegistrationClientMockRecorder {
	return m.recorder
}

// ClearOrganizationInway mocks base method.
func (m *MockDirectoryRegistrationClient) ClearOrganizationInway(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClearOrganizationInway", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClearOrganizationInway indicates an expected call of ClearOrganizationInway.
func (mr *MockDirectoryRegistrationClientMockRecorder) ClearOrganizationInway(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearOrganizationInway", reflect.TypeOf((*MockDirectoryRegistrationClient)(nil).ClearOrganizationInway), varargs...)
}

// RegisterInway mocks base method.
func (m *MockDirectoryRegistrationClient) RegisterInway(ctx context.Context, in *registrationapi.RegisterInwayRequest, opts ...grpc.CallOption) (*registrationapi.RegisterInwayResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterInway", varargs...)
	ret0, _ := ret[0].(*registrationapi.RegisterInwayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterInway indicates an expected call of RegisterInway.
func (mr *MockDirectoryRegistrationClientMockRecorder) RegisterInway(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterInway", reflect.TypeOf((*MockDirectoryRegistrationClient)(nil).RegisterInway), varargs...)
}

// MockDirectoryRegistrationServer is a mock of DirectoryRegistrationServer interface.
type MockDirectoryRegistrationServer struct {
	ctrl     *gomock.Controller
	recorder *MockDirectoryRegistrationServerMockRecorder
}

// MockDirectoryRegistrationServerMockRecorder is the mock recorder for MockDirectoryRegistrationServer.
type MockDirectoryRegistrationServerMockRecorder struct {
	mock *MockDirectoryRegistrationServer
}

// NewMockDirectoryRegistrationServer creates a new mock instance.
func NewMockDirectoryRegistrationServer(ctrl *gomock.Controller) *MockDirectoryRegistrationServer {
	mock := &MockDirectoryRegistrationServer{ctrl: ctrl}
	mock.recorder = &MockDirectoryRegistrationServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectoryRegistrationServer) EXPECT() *MockDirectoryRegistrationServerMockRecorder {
	return m.recorder
}

// ClearOrganizationInway mocks base method.
func (m *MockDirectoryRegistrationServer) ClearOrganizationInway(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearOrganizationInway", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClearOrganizationInway indicates an expected call of ClearOrganizationInway.
func (mr *MockDirectoryRegistrationServerMockRecorder) ClearOrganizationInway(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearOrganizationInway", reflect.TypeOf((*MockDirectoryRegistrationServer)(nil).ClearOrganizationInway), arg0, arg1)
}

// RegisterInway mocks base method.
func (m *MockDirectoryRegistrationServer) RegisterInway(arg0 context.Context, arg1 *registrationapi.RegisterInwayRequest) (*registrationapi.RegisterInwayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterInway", arg0, arg1)
	ret0, _ := ret[0].(*registrationapi.RegisterInwayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterInway indicates an expected call of RegisterInway.
func (mr *MockDirectoryRegistrationServerMockRecorder) RegisterInway(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterInway", reflect.TypeOf((*MockDirectoryRegistrationServer)(nil).RegisterInway), arg0, arg1)
}

// mustEmbedUnimplementedDirectoryRegistrationServer mocks base method.
func (m *MockDirectoryRegistrationServer) mustEmbedUnimplementedDirectoryRegistrationServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDirectoryRegistrationServer")
}

// mustEmbedUnimplementedDirectoryRegistrationServer indicates an expected call of mustEmbedUnimplementedDirectoryRegistrationServer.
func (mr *MockDirectoryRegistrationServerMockRecorder) mustEmbedUnimplementedDirectoryRegistrationServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDirectoryRegistrationServer", reflect.TypeOf((*MockDirectoryRegistrationServer)(nil).mustEmbedUnimplementedDirectoryRegistrationServer))
}

// MockUnsafeDirectoryRegistrationServer is a mock of UnsafeDirectoryRegistrationServer interface.
type MockUnsafeDirectoryRegistrationServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeDirectoryRegistrationServerMockRecorder
}

// MockUnsafeDirectoryRegistrationServerMockRecorder is the mock recorder for MockUnsafeDirectoryRegistrationServer.
type MockUnsafeDirectoryRegistrationServerMockRecorder struct {
	mock *MockUnsafeDirectoryRegistrationServer
}

// NewMockUnsafeDirectoryRegistrationServer creates a new mock instance.
func NewMockUnsafeDirectoryRegistrationServer(ctrl *gomock.Controller) *MockUnsafeDirectoryRegistrationServer {
	mock := &MockUnsafeDirectoryRegistrationServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeDirectoryRegistrationServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeDirectoryRegistrationServer) EXPECT() *MockUnsafeDirectoryRegistrationServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedDirectoryRegistrationServer mocks base method.
func (m *MockUnsafeDirectoryRegistrationServer) mustEmbedUnimplementedDirectoryRegistrationServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDirectoryRegistrationServer")
}

// mustEmbedUnimplementedDirectoryRegistrationServer indicates an expected call of mustEmbedUnimplementedDirectoryRegistrationServer.
func (mr *MockUnsafeDirectoryRegistrationServerMockRecorder) mustEmbedUnimplementedDirectoryRegistrationServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDirectoryRegistrationServer", reflect.TypeOf((*MockUnsafeDirectoryRegistrationServer)(nil).mustEmbedUnimplementedDirectoryRegistrationServer))
}
