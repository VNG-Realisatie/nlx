// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: registrationapi.proto

package registrationapi

/*
	Package directoryapi defines the directory api.
*/

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RegisterInwayRequest struct {
	InwayAddress         string                                  `protobuf:"bytes,1,opt,name=inway_address,json=inwayAddress,proto3" json:"inway_address,omitempty"`
	Services             []*RegisterInwayRequest_RegisterService `protobuf:"bytes,2,rep,name=services" json:"services,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *RegisterInwayRequest) Reset()         { *m = RegisterInwayRequest{} }
func (m *RegisterInwayRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterInwayRequest) ProtoMessage()    {}
func (*RegisterInwayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_registrationapi_5c2f21600b2a584e, []int{0}
}
func (m *RegisterInwayRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterInwayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterInwayRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RegisterInwayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterInwayRequest.Merge(dst, src)
}
func (m *RegisterInwayRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterInwayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterInwayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterInwayRequest proto.InternalMessageInfo

type RegisterInwayRequest_RegisterService struct {
	Name                        string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DocumentationUrl            string   `protobuf:"bytes,2,opt,name=documentation_url,json=documentationUrl,proto3" json:"documentation_url,omitempty"`
	ApiSpecificationType        string   `protobuf:"bytes,3,opt,name=api_specification_type,json=apiSpecificationType,proto3" json:"api_specification_type,omitempty"`
	ApiSpecificationDocumentUrl string   `protobuf:"bytes,4,opt,name=api_specification_document_url,json=apiSpecificationDocumentUrl,proto3" json:"api_specification_document_url,omitempty"`
	InsightApiUrl               string   `protobuf:"bytes,5,opt,name=insight_api_url,json=insightApiUrl,proto3" json:"insight_api_url,omitempty"`
	IrmaApiUrl                  string   `protobuf:"bytes,6,opt,name=irma_api_url,json=irmaApiUrl,proto3" json:"irma_api_url,omitempty"`
	Internal                    bool     `protobuf:"varint,7,opt,name=internal,proto3" json:"internal,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *RegisterInwayRequest_RegisterService) Reset()         { *m = RegisterInwayRequest_RegisterService{} }
func (m *RegisterInwayRequest_RegisterService) String() string { return proto.CompactTextString(m) }
func (*RegisterInwayRequest_RegisterService) ProtoMessage()    {}
func (*RegisterInwayRequest_RegisterService) Descriptor() ([]byte, []int) {
	return fileDescriptor_registrationapi_5c2f21600b2a584e, []int{0, 0}
}
func (m *RegisterInwayRequest_RegisterService) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterInwayRequest_RegisterService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterInwayRequest_RegisterService.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RegisterInwayRequest_RegisterService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterInwayRequest_RegisterService.Merge(dst, src)
}
func (m *RegisterInwayRequest_RegisterService) XXX_Size() int {
	return m.Size()
}
func (m *RegisterInwayRequest_RegisterService) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterInwayRequest_RegisterService.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterInwayRequest_RegisterService proto.InternalMessageInfo

type RegisterInwayResponse struct {
	Error                string   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterInwayResponse) Reset()         { *m = RegisterInwayResponse{} }
func (m *RegisterInwayResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterInwayResponse) ProtoMessage()    {}
func (*RegisterInwayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_registrationapi_5c2f21600b2a584e, []int{1}
}
func (m *RegisterInwayResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterInwayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterInwayResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RegisterInwayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterInwayResponse.Merge(dst, src)
}
func (m *RegisterInwayResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterInwayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterInwayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterInwayResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RegisterInwayRequest)(nil), "registrationapi.RegisterInwayRequest")
	proto.RegisterType((*RegisterInwayRequest_RegisterService)(nil), "registrationapi.RegisterInwayRequest.RegisterService")
	proto.RegisterType((*RegisterInwayResponse)(nil), "registrationapi.RegisterInwayResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RegistrationServiceClient is the client API for RegistrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistrationServiceClient interface {
	// RegisterInway registers an inway for a given service
	RegisterInway(ctx context.Context, in *RegisterInwayRequest, opts ...grpc.CallOption) (*RegisterInwayResponse, error)
}

type registrationServiceClient struct {
	cc *grpc.ClientConn
}

func NewRegistrationServiceClient(cc *grpc.ClientConn) RegistrationServiceClient {
	return &registrationServiceClient{cc}
}

func (c *registrationServiceClient) RegisterInway(ctx context.Context, in *RegisterInwayRequest, opts ...grpc.CallOption) (*RegisterInwayResponse, error) {
	out := new(RegisterInwayResponse)
	err := c.cc.Invoke(ctx, "/registrationapi.RegistrationService/RegisterInway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistrationServiceServer is the server API for RegistrationService service.
type RegistrationServiceServer interface {
	// RegisterInway registers an inway for a given service
	RegisterInway(context.Context, *RegisterInwayRequest) (*RegisterInwayResponse, error)
}

func RegisterRegistrationServiceServer(s *grpc.Server, srv RegistrationServiceServer) {
	s.RegisterService(&_RegistrationService_serviceDesc, srv)
}

func _RegistrationService_RegisterInway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterInwayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServiceServer).RegisterInway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrationapi.RegistrationService/RegisterInway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServiceServer).RegisterInway(ctx, req.(*RegisterInwayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RegistrationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "registrationapi.RegistrationService",
	HandlerType: (*RegistrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterInway",
			Handler:    _RegistrationService_RegisterInway_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registrationapi.proto",
}

func (m *RegisterInwayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterInwayRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.InwayAddress) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegistrationapi(dAtA, i, uint64(len(m.InwayAddress)))
		i += copy(dAtA[i:], m.InwayAddress)
	}
	if len(m.Services) > 0 {
		for _, msg := range m.Services {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRegistrationapi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RegisterInwayRequest_RegisterService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterInwayRequest_RegisterService) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegistrationapi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.DocumentationUrl) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegistrationapi(dAtA, i, uint64(len(m.DocumentationUrl)))
		i += copy(dAtA[i:], m.DocumentationUrl)
	}
	if len(m.ApiSpecificationType) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRegistrationapi(dAtA, i, uint64(len(m.ApiSpecificationType)))
		i += copy(dAtA[i:], m.ApiSpecificationType)
	}
	if len(m.ApiSpecificationDocumentUrl) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRegistrationapi(dAtA, i, uint64(len(m.ApiSpecificationDocumentUrl)))
		i += copy(dAtA[i:], m.ApiSpecificationDocumentUrl)
	}
	if len(m.InsightApiUrl) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRegistrationapi(dAtA, i, uint64(len(m.InsightApiUrl)))
		i += copy(dAtA[i:], m.InsightApiUrl)
	}
	if len(m.IrmaApiUrl) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRegistrationapi(dAtA, i, uint64(len(m.IrmaApiUrl)))
		i += copy(dAtA[i:], m.IrmaApiUrl)
	}
	if m.Internal {
		dAtA[i] = 0x38
		i++
		if m.Internal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RegisterInwayResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterInwayResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegistrationapi(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintRegistrationapi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RegisterInwayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InwayAddress)
	if l > 0 {
		n += 1 + l + sovRegistrationapi(uint64(l))
	}
	if len(m.Services) > 0 {
		for _, e := range m.Services {
			l = e.Size()
			n += 1 + l + sovRegistrationapi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegisterInwayRequest_RegisterService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRegistrationapi(uint64(l))
	}
	l = len(m.DocumentationUrl)
	if l > 0 {
		n += 1 + l + sovRegistrationapi(uint64(l))
	}
	l = len(m.ApiSpecificationType)
	if l > 0 {
		n += 1 + l + sovRegistrationapi(uint64(l))
	}
	l = len(m.ApiSpecificationDocumentUrl)
	if l > 0 {
		n += 1 + l + sovRegistrationapi(uint64(l))
	}
	l = len(m.InsightApiUrl)
	if l > 0 {
		n += 1 + l + sovRegistrationapi(uint64(l))
	}
	l = len(m.IrmaApiUrl)
	if l > 0 {
		n += 1 + l + sovRegistrationapi(uint64(l))
	}
	if m.Internal {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegisterInwayResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovRegistrationapi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRegistrationapi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRegistrationapi(x uint64) (n int) {
	return sovRegistrationapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegisterInwayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistrationapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterInwayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterInwayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InwayAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistrationapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistrationapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InwayAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistrationapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistrationapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, &RegisterInwayRequest_RegisterService{})
			if err := m.Services[len(m.Services)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistrationapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistrationapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterInwayRequest_RegisterService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistrationapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistrationapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistrationapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentationUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistrationapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistrationapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocumentationUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiSpecificationType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistrationapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistrationapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiSpecificationType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiSpecificationDocumentUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistrationapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistrationapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiSpecificationDocumentUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsightApiUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistrationapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistrationapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InsightApiUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IrmaApiUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistrationapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistrationapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IrmaApiUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Internal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistrationapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Internal = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRegistrationapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistrationapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterInwayResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistrationapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterInwayResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterInwayResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistrationapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistrationapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistrationapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistrationapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRegistrationapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRegistrationapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegistrationapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegistrationapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRegistrationapi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRegistrationapi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRegistrationapi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRegistrationapi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRegistrationapi   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("registrationapi.proto", fileDescriptor_registrationapi_5c2f21600b2a584e)
}

var fileDescriptor_registrationapi_5c2f21600b2a584e = []byte{
	// 410 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x5d, 0xda, 0x6d, 0x94, 0xcb, 0xaa, 0x0e, 0xd3, 0xa1, 0x28, 0xa0, 0xa8, 0x2a, 0x62, 0xaa,
	0x84, 0xd6, 0x48, 0x03, 0x3e, 0x60, 0xc0, 0x0b, 0x8f, 0x64, 0xf0, 0x1c, 0xdc, 0xf4, 0x2e, 0xbb,
	0x52, 0x62, 0x1b, 0xdb, 0x61, 0xea, 0x77, 0xf1, 0x0b, 0x3c, 0xec, 0x91, 0x4f, 0x80, 0x7e, 0x09,
	0x8a, 0x9d, 0x45, 0x5b, 0x40, 0x82, 0x37, 0x9f, 0x73, 0xcf, 0x39, 0xd7, 0xbe, 0xd7, 0x70, 0xa4,
	0xb1, 0x20, 0x63, 0x35, 0xb7, 0x24, 0x05, 0x57, 0xb4, 0x54, 0x5a, 0x5a, 0xc9, 0x26, 0x3d, 0x3a,
	0x7a, 0x5a, 0x48, 0x59, 0x94, 0x98, 0x70, 0x45, 0x09, 0x17, 0x42, 0x5a, 0x57, 0x31, 0x5e, 0x1e,
	0x9d, 0x14, 0x64, 0x2f, 0xeb, 0xd5, 0x32, 0x97, 0x55, 0x52, 0xc8, 0x42, 0x26, 0x8e, 0x5e, 0xd5,
	0x17, 0x0e, 0x39, 0xe0, 0x4e, 0x5e, 0x3e, 0xff, 0x3e, 0x84, 0x69, 0xea, 0x1a, 0xa0, 0x7e, 0x2f,
	0xae, 0xf8, 0x26, 0xc5, 0x2f, 0x35, 0x1a, 0xcb, 0x9e, 0xc1, 0x98, 0x1a, 0x9c, 0xf1, 0xf5, 0x5a,
	0xa3, 0x31, 0x61, 0x30, 0x0b, 0x16, 0xf7, 0xd3, 0x03, 0x47, 0x9e, 0x79, 0x8e, 0x7d, 0x80, 0x91,
	0x41, 0xfd, 0x95, 0x72, 0x34, 0xe1, 0x60, 0x36, 0x5c, 0x3c, 0x38, 0x7d, 0xbd, 0xec, 0xbf, 0xe2,
	0x6f, 0xe9, 0x1d, 0x79, 0xee, 0xdd, 0x69, 0x17, 0x13, 0x7d, 0x1b, 0xc0, 0xa4, 0x57, 0x65, 0x0c,
	0x76, 0x05, 0xaf, 0xb0, 0xbd, 0x82, 0x3b, 0xb3, 0x17, 0xf0, 0x70, 0x2d, 0xf3, 0xba, 0x42, 0xe1,
	0xdf, 0x9f, 0xd5, 0xba, 0x0c, 0x07, 0x4e, 0x70, 0x78, 0xa7, 0xf0, 0x49, 0x97, 0xec, 0x15, 0x3c,
	0xe6, 0x8a, 0x32, 0xa3, 0x30, 0xa7, 0x0b, 0xca, 0xbd, 0xc1, 0x6e, 0x14, 0x86, 0x43, 0xe7, 0x98,
	0x72, 0x45, 0xe7, 0xb7, 0x8b, 0x1f, 0x37, 0x0a, 0xd9, 0x5b, 0x88, 0xff, 0x74, 0xdd, 0x64, 0xbb,
	0x7e, 0xbb, 0xce, 0xfd, 0xa4, 0xef, 0x7e, 0xd7, 0x6a, 0x9a, 0xd6, 0xc7, 0x30, 0x21, 0x61, 0xa8,
	0xb8, 0xb4, 0x59, 0x13, 0xd6, 0xb8, 0xf6, 0x9c, 0x6b, 0xdc, 0xd2, 0x67, 0x8a, 0x1a, 0xdd, 0x0c,
	0x0e, 0x48, 0x57, 0xbc, 0x13, 0xed, 0x3b, 0x11, 0x34, 0x5c, 0xab, 0x88, 0x60, 0x44, 0xc2, 0xa2,
	0x16, 0xbc, 0x0c, 0xef, 0xcd, 0x82, 0xc5, 0x28, 0xed, 0xf0, 0xfc, 0x04, 0x8e, 0x7a, 0x73, 0x36,
	0x4a, 0x0a, 0x83, 0x6c, 0x0a, 0x7b, 0xa8, 0xb5, 0xd4, 0xed, 0xec, 0x3c, 0x38, 0xbd, 0x82, 0x47,
	0xe9, 0xad, 0x35, 0xdd, 0xcc, 0xf9, 0x33, 0x8c, 0xef, 0xa4, 0xb0, 0xe7, 0xff, 0xb5, 0xcd, 0xe8,
	0xf8, 0x5f, 0x32, 0x7f, 0x99, 0xf9, 0xce, 0x9b, 0xc3, 0xeb, 0x5f, 0xf1, 0xce, 0xf5, 0x36, 0x0e,
	0x7e, 0x6c, 0xe3, 0xe0, 0xe7, 0x36, 0x0e, 0x56, 0xfb, 0xee, 0x1f, 0xbe, 0xfc, 0x1d, 0x00, 0x00,
	0xff, 0xff, 0x03, 0x51, 0xa4, 0x74, 0xfe, 0x02, 0x00, 0x00,
}
