// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package registrationapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DirectoryRegistrationClient is the client API for DirectoryRegistration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DirectoryRegistrationClient interface {
	// RegisterInway registers an inway for a given service
	RegisterInway(ctx context.Context, in *RegisterInwayRequest, opts ...grpc.CallOption) (*RegisterInwayResponse, error)
	SetInsightConfiguration(ctx context.Context, in *SetInsightConfigurationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetOrganizationInway(ctx context.Context, in *SetOrganizationInwayRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ClearOrganizationInway(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type directoryRegistrationClient struct {
	cc grpc.ClientConnInterface
}

func NewDirectoryRegistrationClient(cc grpc.ClientConnInterface) DirectoryRegistrationClient {
	return &directoryRegistrationClient{cc}
}

func (c *directoryRegistrationClient) RegisterInway(ctx context.Context, in *RegisterInwayRequest, opts ...grpc.CallOption) (*RegisterInwayResponse, error) {
	out := new(RegisterInwayResponse)
	err := c.cc.Invoke(ctx, "/registrationapi.DirectoryRegistration/RegisterInway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryRegistrationClient) SetInsightConfiguration(ctx context.Context, in *SetInsightConfigurationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/registrationapi.DirectoryRegistration/SetInsightConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryRegistrationClient) SetOrganizationInway(ctx context.Context, in *SetOrganizationInwayRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/registrationapi.DirectoryRegistration/SetOrganizationInway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryRegistrationClient) ClearOrganizationInway(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/registrationapi.DirectoryRegistration/ClearOrganizationInway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DirectoryRegistrationServer is the server API for DirectoryRegistration service.
// All implementations must embed UnimplementedDirectoryRegistrationServer
// for forward compatibility
type DirectoryRegistrationServer interface {
	// RegisterInway registers an inway for a given service
	RegisterInway(context.Context, *RegisterInwayRequest) (*RegisterInwayResponse, error)
	SetInsightConfiguration(context.Context, *SetInsightConfigurationRequest) (*emptypb.Empty, error)
	SetOrganizationInway(context.Context, *SetOrganizationInwayRequest) (*emptypb.Empty, error)
	ClearOrganizationInway(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedDirectoryRegistrationServer()
}

// UnimplementedDirectoryRegistrationServer must be embedded to have forward compatible implementations.
type UnimplementedDirectoryRegistrationServer struct {
}

func (UnimplementedDirectoryRegistrationServer) RegisterInway(context.Context, *RegisterInwayRequest) (*RegisterInwayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterInway not implemented")
}
func (UnimplementedDirectoryRegistrationServer) SetInsightConfiguration(context.Context, *SetInsightConfigurationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInsightConfiguration not implemented")
}
func (UnimplementedDirectoryRegistrationServer) SetOrganizationInway(context.Context, *SetOrganizationInwayRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrganizationInway not implemented")
}
func (UnimplementedDirectoryRegistrationServer) ClearOrganizationInway(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearOrganizationInway not implemented")
}
func (UnimplementedDirectoryRegistrationServer) mustEmbedUnimplementedDirectoryRegistrationServer() {}

// UnsafeDirectoryRegistrationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DirectoryRegistrationServer will
// result in compilation errors.
type UnsafeDirectoryRegistrationServer interface {
	mustEmbedUnimplementedDirectoryRegistrationServer()
}

func RegisterDirectoryRegistrationServer(s grpc.ServiceRegistrar, srv DirectoryRegistrationServer) {
	s.RegisterService(&DirectoryRegistration_ServiceDesc, srv)
}

func _DirectoryRegistration_RegisterInway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterInwayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryRegistrationServer).RegisterInway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrationapi.DirectoryRegistration/RegisterInway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryRegistrationServer).RegisterInway(ctx, req.(*RegisterInwayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryRegistration_SetInsightConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetInsightConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryRegistrationServer).SetInsightConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrationapi.DirectoryRegistration/SetInsightConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryRegistrationServer).SetInsightConfiguration(ctx, req.(*SetInsightConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryRegistration_SetOrganizationInway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrganizationInwayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryRegistrationServer).SetOrganizationInway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrationapi.DirectoryRegistration/SetOrganizationInway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryRegistrationServer).SetOrganizationInway(ctx, req.(*SetOrganizationInwayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryRegistration_ClearOrganizationInway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryRegistrationServer).ClearOrganizationInway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrationapi.DirectoryRegistration/ClearOrganizationInway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryRegistrationServer).ClearOrganizationInway(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// DirectoryRegistration_ServiceDesc is the grpc.ServiceDesc for DirectoryRegistration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DirectoryRegistration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "registrationapi.DirectoryRegistration",
	HandlerType: (*DirectoryRegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterInway",
			Handler:    _DirectoryRegistration_RegisterInway_Handler,
		},
		{
			MethodName: "SetInsightConfiguration",
			Handler:    _DirectoryRegistration_SetInsightConfiguration_Handler,
		},
		{
			MethodName: "SetOrganizationInway",
			Handler:    _DirectoryRegistration_SetOrganizationInway_Handler,
		},
		{
			MethodName: "ClearOrganizationInway",
			Handler:    _DirectoryRegistration_ClearOrganizationInway_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registrationapi.proto",
}
