apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "nlx-management.fullname" . }}-api
  labels:
    {{- include "nlx-management.labels" . | nindent 4 }}
    app.kubernetes.io/component: api
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "nlx-management.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: api
  template:
    metadata:
      labels:
        {{- include "nlx-management.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: api
      annotations:
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        checksum/secret-tls: {{ include (print $.Template.BasePath "/secret-tls.yaml") . | sha256sum }}
    spec:
    {{- with .Values.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ include "nlx-management.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: nlx-management-api
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: {{ template "nlx-management.apiImage" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: https
              containerPort: 8443
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http
          readinessProbe:
            httpGet:
              path: /health
              port: http
          env:
            - name: LISTEN_ADDRESS
              value: "0.0.0.0:8080"
            - name: CONFIG_LISTEN_ADDRESS
              value: "0.0.0.0:8443"
            - name: POSTGRES_HOST
              value: {{ required "PostgreSQL hostname is required" .Values.postgresql.hostname }}
            - name: POSTGRES_PORT
              value: {{ required "PostgreSQL port number is required" .Values.postgresql.port | quote }}
            - name: POSTGRES_DATABASE
              value: {{ required "PostgreSQL database name is required" .Values.postgresql.database }}
            - name: PGSSLMODE
              value: {{ .Values.postgresql.sslMode }}
            - name: PGCONNECT_TIMEOUT
              value: {{ .Values.postgresql.connectTimeout | quote }}
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ template "nlx-management.postgresql.secret" . }}
                  key: {{ .Values.postgresql.existingSecret.usernameKey }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "nlx-management.postgresql.secret" . }}
                  key: {{ .Values.postgresql.existingSecret.passwordKey }}
            - name: POSTGRES_DSN
              value: 'postgres://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@$(POSTGRES_HOST):$(POSTGRES_PORT)/$(POSTGRES_DATABASE)'
          {{- if .Values.transactionLog.enabled }}
            - name: TRANSACTION_LOG_HOST
              value: {{ required "PostgreSQL hostname is required" .Values.transactionLog.hostname }}
            - name: TRANSACTION_LOG_DATABASE
              value: {{ required "PostgreSQL database name is required" .Values.transactionLog.database }}
            - name: TRANSACTION_LOG_PORT
              value: {{ required "PostgreSQL port is required" .Values.transactionLog.port | quote }}
            - name: TRANSACTION_LOG_USER
              valueFrom:
                secretKeyRef:
                  name: {{ template "nlx-management.transactionLog.secret" . }}
                  key: {{ .Values.transactionLog.existingSecret.usernameKey }}
            - name: TRANSACTION_LOG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "nlx-management.transactionLog.secret" . }}
                  key: {{ .Values.transactionLog.existingSecret.passwordKey }}
            - name: TRANSACTION_LOG_DSN
              value: 'postgres://$(TRANSACTION_LOG_USER):$(TRANSACTION_LOG_PASSWORD)@$(TRANSACTION_LOG_HOST):$(TRANSACTION_LOG_PORT)/$(TRANSACTION_LOG_DATABASE)'
          {{- end}}

            - name: DIRECTORY_INSPECTION_ADDRESS
              value: {{ required "Directory inspection hostname is required" .Values.config.directoryInspectionHostname }}:443
            - name: DIRECTORY_REGISTRATION_ADDRESS
              value: {{ required "Directory registration hostname is required" .Values.config.directoryRegistrationHostname }}:443
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ template "nlx-management.fullname" . }}
                  key: oidc-session-sign-key
            - name: OIDC_CLIENT_ID
              value: {{ required "OIDC client ID is required" .Values.config.oidc.clientID }}
            - name: OIDC_CLIENT_SECRET
              value: {{ required "OIDC client secret is required" .Values.config.oidc.clientSecret }}
            - name: OIDC_DISCOVERY_URL
              value: {{ required "OIDC discovery URL is required" .Values.config.oidc.discoveryURL }}
            - name: OIDC_REDIRECT_URL
              value: {{ required "OIDC redirect URL is required" .Values.config.oidc.redirectURL }}
            - name: SESSION_COOKIE_SECURE
              value: {{ if .Values.config.sessionCookieSecure }}"1"{{ else }}"0"{{ end }}
            - name: TLS_NLX_ROOT_CERT
              value: /config/root-organization.pem
            - name: TLS_ORG_CERT
              value: /certificate-organization/tls.crt
            - name: TLS_ORG_KEY
              value: /certificate-organization/tls.key
            - name: TLS_ROOT_CERT
              value: /config/root-internal.pem
            - name: TLS_CERT
              value: /certificate/tls.crt
            - name: TLS_KEY
              value: /certificate/tls.key
            - name: LOG_TYPE
              value: {{ .Values.config.logType }}
            - name: LOG_LEVEL
              value: {{ .Values.config.logLevel }}
          volumeMounts:
            - name: certificate-organization
              mountPath: /certificate-organization
              readOnly: true
            - name: certificate
              mountPath: /certificate
              readOnly: true
            - name: config
              mountPath: /config
              readOnly: true
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      initContainers:
        - name: migrations
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: {{ template "nlx-management.apiImage" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - '/usr/local/bin/nlx-management-api'
            - migrate
            - up
          env:
            - name: POSTGRES_HOST
              value: {{ required "PostgreSQL hostname is required" .Values.postgresql.hostname }}
            - name: POSTGRES_PORT
              value: {{ required "PostgreSQL port number is required" .Values.postgresql.port | quote }}
            - name: POSTGRES_DATABASE
              value: {{ required "PostgreSQL database name is required" .Values.postgresql.database }}
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ template "nlx-management.postgresql.secret" . }}
                  key: {{ .Values.postgresql.existingSecret.usernameKey }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "nlx-management.postgresql.secret" . }}
                  key: {{ .Values.postgresql.existingSecret.passwordKey }}
            - name: PGCONNECT_TIMEOUT
              value: {{ .Values.postgresql.connectTimeout | quote }}
            - name: POSTGRES_DSN
              value: 'postgres://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@$(POSTGRES_HOST):$(POSTGRES_PORT)/$(POSTGRES_DATABASE)'
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: certificate-organization
          secret:
            secretName: {{ default (printf "%s-organization-tls" (include  "nlx-management.fullname" .)) .Values.tls.organization.existingSecret }}
            defaultMode: 0640
        - name: certificate
          secret:
            secretName: {{ default (printf "%s-tls" (include  "nlx-management.fullname" .)) .Values.tls.internal.existingSecret }}
            defaultMode: 0640
        - name: config
          configMap:
            name: {{ template "nlx-management.fullname" . }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
