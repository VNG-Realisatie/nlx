{{ with set . "component" "directory-monitor" }}
apiVersion: extensions/v1beta1
kind: Deployment
metadata: {{ include "nlx-directory.common.metadata" . | nindent 2 }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      release: {{ .Release.Name }}
      app: {{ .Chart.Name }}
      component: {{.component}}
  template:
    metadata:
      labels: {{ include "nlx-directory.common.metadata-labels" . | nindent 8 }}
    spec:
      volumes:
        - name: certs
          {{ if eq .Values.ca.kind "private" }}
          secret:
            secretName: certs-{{ .component }}
          {{ end }}
          {{ if eq .Values.ca.kind "public" }}
          emptyDir: {}

      initContainers:
        - name: directory-monitor-certs
          image: {{.Values.caCfsslUnsafeImage}}
          imagePullPolicy: {{.Values.imagePullPolicy}}
          volumeMounts:
            - name: certs
              mountPath: /certs
          command: ["/bin/ash"]
          args:
            - "-c"
            - |-
                cd /certs &&
                /ca/generate-cert.sh {{.component}}.{{.Values.domain}} NLX ca-cfssl-unsafe
      {{ end }}

      containers:
        - name: directory-monitor
          image: {{.Values.directoryMonitorImage}}
          imagePullPolicy: {{.Values.imagePullPolicy}}
          command: ["/usr/local/bin/nlx-directory-monitor"]
          env:
            - name: LOG_TYPE
              value: development
            - name: LOG_LEVEL
              value: {{ default "debug" .Values.logLevel }}
            - name: POSTGRES_DSN
              value: postgresql://{{.Values.dbUsernameDirectory}}:{{.Values.dbPasswordDirectory}}@postgres/{{.Values.dbDatabaseDirectory}}?sslmode=disable&connect_timeout=10
            - name: TLS_NLX_ROOT_CERT
              {{ if eq .Values.ca.kind "private" }}
              value: "/certs/ca.pem"
              {{ end }}
              {{ if eq .Values.ca.kind "public" }}
              value: "/certs/nlx_root.pem"
              {{ end }}
            - name: TLS_MONITOR_CERT
              value: "/certs/{{.component}}.{{.Values.domain}}.pem"
            - name: TLS_MONITOR_KEY
              value: "/certs/{{.component}}.{{.Values.domain}}-key.pem"
            - name: TTL_OFFLINE_SERVICE
              value: "{{.Values.ttlOfflineService}}"
          volumeMounts:
            - name: certs
              mountPath: /certs

      # NOTE: workarround because .minikube doesn't resolve via DNS
      {{ if .Values.externalIP }}
      hostAliases:
        - ip: "{{.Values.externalIP}}"
          hostnames:
            {{- range .Values.inwayHostnames }}
            - "{{.}}"
            {{ end }}
      {{ end }}

      restartPolicy: Always
  status: {}
{{ end }}
