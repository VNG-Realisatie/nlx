{{ if .Values.outway.authService }}
{{ with set . "component" "auth-service" }}
apiVersion: apps/v1
kind: Deployment
metadata: {{ include "nlx-organization.common.metadata" . | nindent 2 }}
spec:
  replicas: {{ .Values.replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      release: {{ .Release.Name }}
      app: {{ .Chart.Name }}
      component: {{.component}}
  template:
    metadata:
      labels: {{ include "nlx-organization.common.metadata-labels" . | nindent 8 }}
    spec:
      securityContext:
        runAsUser: 1001
      volumes:
        - name: certs
          emptyDir: {}
      initContainers:
        - name: auth-certs
          image: {{.Values.imagePrefix}}nlxio/ca-cfssl-unsafe{{.Values.imageTag}}
          imagePullPolicy: {{.Values.imagePullPolicy}}
          volumeMounts:
            - name: certs
              mountPath: /certs
          command: ["/bin/ash"]
          args:
            - "-c"
            - |-
                cd /certs &&
                /ca/generate-cert.sh {{.component}} {{.Values.organizationName}} {{.Values.caAddress}}
      containers:
        - name: auth-service
          image: {{.Values.imagePrefix}}nlxio/{{.component}}{{.Values.imageTag}}
          imagePullPolicy: {{.Values.imagePullPolicy}}
          env:
            - name: CSV_FILE
              value: /users.csv
            - name: TLS_CERT
              value: "/certs/{{.component}}.pem"
            - name: TLS_KEY
              value: "/certs/{{.component}}-key.pem"
          volumeMounts:
            - name: certs
              mountPath: /certs
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata: {{ include "nlx-organization.common.metadata" . | nindent 2 }}
spec:
  selector: {{ include "nlx-organization.common.metadata-labels" . | nindent 4 }}
  ports:
    - name: handler
      protocol: TCP
      port: 8443
  cluserIP: None
{{ end }}
{{ end }}
