{{ if .Values.demoService.enable }}
{{ with set . "component" "service" }}
{{ if .Values.demoService.key }}
apiVersion: v1
kind: Secret
metadata:
  name: service-tls
  namespace: {{.Release.Namespace}}
  labels: {{ include "nlx-organization.common.metadata-labels" . | nindent 4 }}
type: kubernetes.io/tls
data:
  tls.crt: {{ .Values.demoService.crt }}
  tls.key: {{ .Values.demoService.key }}
---
{{ end }}
apiVersion: extensions/v1beta1
kind: Deployment
metadata: {{ include "nlx-organization.common.metadata" . | nindent 2 }}
spec:
  replicas: {{ .Values.replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      release: {{ .Release.Name }}
      app: {{ .Chart.Name }}
      component: {{.component}}
  template:
    metadata:
      labels: {{ include "nlx-organization.common.metadata-labels" . | nindent 8 }}
    spec:
      containers:
        - name: service
          image: {{.Values.demoService.genericServiceImage}}
          imagePullPolicy: {{.Values.imagePullPolicy}}
          {{ if .Values.demoService.key }}
          volumeMounts:
            - name: tls
              mountPath: /tls
          {{ end }}
      {{ if .Values.demoService.key }}          
      volumes:
        - name: tls
          secret:
            secretName: service-tls
      {{ end }}
      restartPolicy: Always
  status: {}
---
apiVersion: v1
kind: Service
metadata: {{ include "nlx-organization.common.metadata" . | nindent 2 }}
spec:
  selector: {{ include "nlx-organization.common.metadata-labels" . | nindent 4 }}
  ports:
    - name: service
      protocol: TCP
      {{ if .Values.demoService.key }}
      port: 8443
      {{ else }}
      port: 8000
      {{ end }}
  cluserIP: None
{{ end }}
{{ end }}

