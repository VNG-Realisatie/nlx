// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: queries.sql

package queries

import (
	"context"
	"database/sql"
	"time"
)

const createAccessGrant = `-- name: CreateAccessGrant :one
insert into
    nlx_management.access_grants
(
    access_request_incoming_id,
    created_at
) values (
      $1,
      $2
)
returning id
`

type CreateAccessGrantParams struct {
	AccessRequestIncomingID int32
	CreatedAt               time.Time
}

func (q *Queries) CreateAccessGrant(ctx context.Context, arg *CreateAccessGrantParams) (int32, error) {
	row := q.queryRow(ctx, q.createAccessGrantStmt, createAccessGrant, arg.AccessRequestIncomingID, arg.CreatedAt)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const doesInwayExistByName = `-- name: DoesInwayExistByName :one
select
        count(*)>0 as inway_exits
from
    nlx_management.inways
where
    inways.name = $1::text
`

func (q *Queries) DoesInwayExistByName(ctx context.Context, inwayName string) (bool, error) {
	row := q.queryRow(ctx, q.doesInwayExistByNameStmt, doesInwayExistByName, inwayName)
	var inway_exits bool
	err := row.Scan(&inway_exits)
	return inway_exits, err
}

const getAccessGrant = `-- name: GetAccessGrant :one
select
    access_grants.id,
    access_grants.created_at,
    access_grants.revoked_at,
    access_request_incoming_id,
    access_requests_incoming.id as ari_id,
    access_requests_incoming.service_id as ari_service_id,
    access_requests_incoming.organization_name as ari_organization_name,
    access_requests_incoming.organization_serial_number as ari_organization_serial_number,
    access_requests_incoming.state as ari_state,
    access_requests_incoming.created_at as ari_created_at,
    access_requests_incoming.updated_at as ari_updated_at,
    access_requests_incoming.public_key_fingerprint as ari_public_key_fingerprint,
    access_requests_incoming.public_key_pem as ari_public_key_pem,
    services.id as s_id,
    services.name as s_name,
    services.endpoint_url as s_endpoint_url,
    services.documentation_url as s_documentation_url,
    services.api_specification_url as s_api_specification_url,
    services.internal as s_internal,
    services.tech_support_contact as s_tech_support_contact,
    services.public_support_contact as s_public_support_contact,
    services.one_time_costs as s_one_time_costs,
    services.monthly_costs as s_monthly_costs,
    services.request_costs as s_request_costs,
    services.created_at as s_created_at,
    services.updated_at as s_updated_at
from
    nlx_management.access_grants
        left join nlx_management.access_requests_incoming on (
            access_grants.access_request_incoming_id = access_requests_incoming.id
        )
        left join nlx_management.services on (
            access_requests_incoming.service_id = services.id
        )
where
        access_grants.id = $1
`

type GetAccessGrantRow struct {
	ID                          int32
	CreatedAt                   time.Time
	RevokedAt                   sql.NullTime
	AccessRequestIncomingID     int32
	AriID                       sql.NullInt32
	AriServiceID                sql.NullInt32
	AriOrganizationName         sql.NullString
	AriOrganizationSerialNumber sql.NullString
	AriState                    sql.NullString
	AriCreatedAt                sql.NullTime
	AriUpdatedAt                sql.NullTime
	AriPublicKeyFingerprint     sql.NullString
	AriPublicKeyPem             sql.NullString
	SID                         sql.NullInt32
	SName                       sql.NullString
	SEndpointUrl                sql.NullString
	SDocumentationUrl           sql.NullString
	SApiSpecificationUrl        sql.NullString
	SInternal                   sql.NullBool
	STechSupportContact         sql.NullString
	SPublicSupportContact       sql.NullString
	SOneTimeCosts               sql.NullInt32
	SMonthlyCosts               sql.NullInt32
	SRequestCosts               sql.NullInt32
	SCreatedAt                  sql.NullTime
	SUpdatedAt                  sql.NullTime
}

func (q *Queries) GetAccessGrant(ctx context.Context, id int32) (*GetAccessGrantRow, error) {
	row := q.queryRow(ctx, q.getAccessGrantStmt, getAccessGrant, id)
	var i GetAccessGrantRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.RevokedAt,
		&i.AccessRequestIncomingID,
		&i.AriID,
		&i.AriServiceID,
		&i.AriOrganizationName,
		&i.AriOrganizationSerialNumber,
		&i.AriState,
		&i.AriCreatedAt,
		&i.AriUpdatedAt,
		&i.AriPublicKeyFingerprint,
		&i.AriPublicKeyPem,
		&i.SID,
		&i.SName,
		&i.SEndpointUrl,
		&i.SDocumentationUrl,
		&i.SApiSpecificationUrl,
		&i.SInternal,
		&i.STechSupportContact,
		&i.SPublicSupportContact,
		&i.SOneTimeCosts,
		&i.SMonthlyCosts,
		&i.SRequestCosts,
		&i.SCreatedAt,
		&i.SUpdatedAt,
	)
	return &i, err
}

const getSettings = `-- name: GetSettings :one
select
    settings.organization_email_address,
    inways.name
from
    nlx_management.settings
        left join nlx_management.inways on (
            settings.inway_id = inways.id
        )
order by
    settings.id
limit 1
`

type GetSettingsRow struct {
	OrganizationEmailAddress sql.NullString
	Name                     sql.NullString
}

func (q *Queries) GetSettings(ctx context.Context) (*GetSettingsRow, error) {
	row := q.queryRow(ctx, q.getSettingsStmt, getSettings)
	var i GetSettingsRow
	err := row.Scan(&i.OrganizationEmailAddress, &i.Name)
	return &i, err
}

const listAccessGrantsForService = `-- name: ListAccessGrantsForService :many
select
    access_grants.id,
    access_grants.created_at,
    access_grants.revoked_at,
    access_request_incoming_id,
    access_requests_incoming.id as ari_id,
    access_requests_incoming.service_id as ari_service_id,
    access_requests_incoming.organization_name as ari_organization_name,
    access_requests_incoming.organization_serial_number as ari_organization_serial_number,
    access_requests_incoming.state as ari_state,
    access_requests_incoming.created_at as ari_created_at,
    access_requests_incoming.updated_at as ari_updated_at,
    access_requests_incoming.public_key_fingerprint as ari_public_key_fingerprint,
    access_requests_incoming.public_key_pem as ari_public_key_pem,
    services.id as s_id,
    services.name as s_name,
    services.endpoint_url as s_endpoint_url,
    services.documentation_url as s_documentation_url,
    services.api_specification_url as s_api_specification_url,
    services.internal as s_internal,
    services.tech_support_contact as s_tech_support_contact,
    services.public_support_contact as s_public_support_contact,
    services.one_time_costs as s_one_time_costs,
    services.monthly_costs as s_monthly_costs,
    services.request_costs as s_request_costs,
    services.created_at as s_created_at,
    services.updated_at as s_updated_at
from
    nlx_management.access_grants
        left join nlx_management.access_requests_incoming on (
            access_grants.access_request_incoming_id = access_requests_incoming.id
        )
        join nlx_management.services on (
            access_requests_incoming.service_id = services.id and
            services.name = $1
        )
`

type ListAccessGrantsForServiceRow struct {
	ID                          int32
	CreatedAt                   time.Time
	RevokedAt                   sql.NullTime
	AccessRequestIncomingID     int32
	AriID                       int32
	AriServiceID                int32
	AriOrganizationName         string
	AriOrganizationSerialNumber string
	AriState                    string
	AriCreatedAt                time.Time
	AriUpdatedAt                time.Time
	AriPublicKeyFingerprint     string
	AriPublicKeyPem             sql.NullString
	SID                         int32
	SName                       string
	SEndpointUrl                string
	SDocumentationUrl           string
	SApiSpecificationUrl        string
	SInternal                   bool
	STechSupportContact         string
	SPublicSupportContact       string
	SOneTimeCosts               int32
	SMonthlyCosts               int32
	SRequestCosts               int32
	SCreatedAt                  time.Time
	SUpdatedAt                  time.Time
}

func (q *Queries) ListAccessGrantsForService(ctx context.Context, name string) ([]*ListAccessGrantsForServiceRow, error) {
	rows, err := q.query(ctx, q.listAccessGrantsForServiceStmt, listAccessGrantsForService, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListAccessGrantsForServiceRow{}
	for rows.Next() {
		var i ListAccessGrantsForServiceRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.RevokedAt,
			&i.AccessRequestIncomingID,
			&i.AriID,
			&i.AriServiceID,
			&i.AriOrganizationName,
			&i.AriOrganizationSerialNumber,
			&i.AriState,
			&i.AriCreatedAt,
			&i.AriUpdatedAt,
			&i.AriPublicKeyFingerprint,
			&i.AriPublicKeyPem,
			&i.SID,
			&i.SName,
			&i.SEndpointUrl,
			&i.SDocumentationUrl,
			&i.SApiSpecificationUrl,
			&i.SInternal,
			&i.STechSupportContact,
			&i.SPublicSupportContact,
			&i.SOneTimeCosts,
			&i.SMonthlyCosts,
			&i.SRequestCosts,
			&i.SCreatedAt,
			&i.SUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSettings = `-- name: UpdateSettings :exec
update
    nlx_management.settings
set
        organization_email_address = $1::text,
        inway_id = (
            select
                id
            from
                nlx_management.inways
            where
                    inways.name = $2::text
        )
`

type UpdateSettingsParams struct {
	OrganizationEmailAddress string
	InwayName                string
}

func (q *Queries) UpdateSettings(ctx context.Context, arg *UpdateSettingsParams) error {
	_, err := q.exec(ctx, q.updateSettingsStmt, updateSettings, arg.OrganizationEmailAddress, arg.InwayName)
	return err
}
