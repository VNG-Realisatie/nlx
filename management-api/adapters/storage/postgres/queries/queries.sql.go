// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: queries.sql

package queries

import (
	"context"
	"database/sql"
	"time"

	"github.com/tabbed/pqtype"
)

const countReceivedOutgoingAccessRequestsForOutway = `-- name: CountReceivedOutgoingAccessRequestsForOutway :one
select
    count(*) as count
from
    nlx_management.access_requests_outgoing
where
    access_requests_outgoing.organization_serial_number = $1 and
    access_requests_outgoing.service_name = $2 and
    access_requests_outgoing.public_key_fingerprint = $3 and
    access_requests_outgoing.state = 'received'
`

type CountReceivedOutgoingAccessRequestsForOutwayParams struct {
	OrganizationSerialNumber string
	ServiceName              string
	PublicKeyFingerprint     string
}

func (q *Queries) CountReceivedOutgoingAccessRequestsForOutway(ctx context.Context, arg *CountReceivedOutgoingAccessRequestsForOutwayParams) (int64, error) {
	row := q.queryRow(ctx, q.countReceivedOutgoingAccessRequestsForOutwayStmt, countReceivedOutgoingAccessRequestsForOutway, arg.OrganizationSerialNumber, arg.ServiceName, arg.PublicKeyFingerprint)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAccessGrant = `-- name: CreateAccessGrant :one
insert into
    nlx_management.access_grants
(
    access_request_incoming_id,
    created_at
) values (
      $1,
      $2
)
returning id
`

type CreateAccessGrantParams struct {
	AccessRequestIncomingID int32
	CreatedAt               time.Time
}

func (q *Queries) CreateAccessGrant(ctx context.Context, arg *CreateAccessGrantParams) (int32, error) {
	row := q.queryRow(ctx, q.createAccessGrantStmt, createAccessGrant, arg.AccessRequestIncomingID, arg.CreatedAt)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createAccessProof = `-- name: CreateAccessProof :one
insert into
    nlx_management.access_proofs
(
    access_request_outgoing_id,
    created_at
) values (
             $1,
             $2
         )
returning id
`

type CreateAccessProofParams struct {
	AccessRequestOutgoingID int32
	CreatedAt               time.Time
}

func (q *Queries) CreateAccessProof(ctx context.Context, arg *CreateAccessProofParams) (int32, error) {
	row := q.queryRow(ctx, q.createAccessProofStmt, createAccessProof, arg.AccessRequestOutgoingID, arg.CreatedAt)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createAuditLog = `-- name: CreateAuditLog :one
insert into
    nlx_management.audit_logs
(
    user_name,
    action_type,
    user_agent,
    data,
    created_at,
    has_succeeded
) values (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
 )
returning id
`

type CreateAuditLogParams struct {
	UserName     sql.NullString
	ActionType   string
	UserAgent    string
	Data         pqtype.NullRawMessage
	CreatedAt    time.Time
	HasSucceeded bool
}

func (q *Queries) CreateAuditLog(ctx context.Context, arg *CreateAuditLogParams) (int64, error) {
	row := q.queryRow(ctx, q.createAuditLogStmt, createAuditLog,
		arg.UserName,
		arg.ActionType,
		arg.UserAgent,
		arg.Data,
		arg.CreatedAt,
		arg.HasSucceeded,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createAuditLogService = `-- name: CreateAuditLogService :exec
insert into
    nlx_management.audit_logs_services
(
    audit_log_id,
    organization_name,
    organization_serial_number,
    created_at,
    service
) values (
    $1,
    $2,
    $3,
    $4,
    $5
)
`

type CreateAuditLogServiceParams struct {
	AuditLogID               sql.NullInt64
	OrganizationName         sql.NullString
	OrganizationSerialNumber string
	CreatedAt                time.Time
	Service                  sql.NullString
}

func (q *Queries) CreateAuditLogService(ctx context.Context, arg *CreateAuditLogServiceParams) error {
	_, err := q.exec(ctx, q.createAuditLogServiceStmt, createAuditLogService,
		arg.AuditLogID,
		arg.OrganizationName,
		arg.OrganizationSerialNumber,
		arg.CreatedAt,
		arg.Service,
	)
	return err
}

const createIncomingAccessRequest = `-- name: CreateIncomingAccessRequest :one
insert into
    nlx_management.access_requests_incoming
(
    state,
    organization_name,
    organization_serial_number,
    public_key_fingerprint,
    public_key_pem,
    service_id,
    created_at,
    updated_at
) values (
     $1,
     $2,
     $3,
     $4,
     $5,
     $6,
     $7,
     $8
 )
returning id
`

type CreateIncomingAccessRequestParams struct {
	State                    string
	OrganizationName         string
	OrganizationSerialNumber string
	PublicKeyFingerprint     string
	PublicKeyPem             string
	ServiceID                int32
	CreatedAt                time.Time
	UpdatedAt                time.Time
}

func (q *Queries) CreateIncomingAccessRequest(ctx context.Context, arg *CreateIncomingAccessRequestParams) (int32, error) {
	row := q.queryRow(ctx, q.createIncomingAccessRequestStmt, createIncomingAccessRequest,
		arg.State,
		arg.OrganizationName,
		arg.OrganizationSerialNumber,
		arg.PublicKeyFingerprint,
		arg.PublicKeyPem,
		arg.ServiceID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createOutgoingAccessRequest = `-- name: CreateOutgoingAccessRequest :one
insert into
    nlx_management.access_requests_outgoing
(
    state,
    organization_name,
    organization_serial_number,
    public_key_fingerprint,
    public_key_pem,
    service_name,
    reference_id,
    created_at,
    updated_at
) values (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9
)
returning id
`

type CreateOutgoingAccessRequestParams struct {
	State                    string
	OrganizationName         string
	OrganizationSerialNumber string
	PublicKeyFingerprint     string
	PublicKeyPem             string
	ServiceName              string
	ReferenceID              int32
	CreatedAt                time.Time
	UpdatedAt                time.Time
}

func (q *Queries) CreateOutgoingAccessRequest(ctx context.Context, arg *CreateOutgoingAccessRequestParams) (int32, error) {
	row := q.queryRow(ctx, q.createOutgoingAccessRequestStmt, createOutgoingAccessRequest,
		arg.State,
		arg.OrganizationName,
		arg.OrganizationSerialNumber,
		arg.PublicKeyFingerprint,
		arg.PublicKeyPem,
		arg.ServiceName,
		arg.ReferenceID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createTermsOfService = `-- name: CreateTermsOfService :exec
insert into
    nlx_management.terms_of_service
(username, created_at)
values
    ($1, $2)
`

type CreateTermsOfServiceParams struct {
	Username  string
	CreatedAt time.Time
}

func (q *Queries) CreateTermsOfService(ctx context.Context, arg *CreateTermsOfServiceParams) error {
	_, err := q.exec(ctx, q.createTermsOfServiceStmt, createTermsOfService, arg.Username, arg.CreatedAt)
	return err
}

const createUser = `-- name: CreateUser :one
insert into
    nlx_management.users
    (email, password, created_at, updated_at)
values
    ($1, $2, $3, $4)
returning id
`

type CreateUserParams struct {
	Email     string
	Password  sql.NullString
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg *CreateUserParams) (int32, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.Email,
		arg.Password,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createUserRoles = `-- name: CreateUserRoles :exec
insert into
    nlx_management.users_roles
(user_id, role_code, created_at, updated_at)
values
    ($1, $2, $3, $4)
`

type CreateUserRolesParams struct {
	UserID    int32
	RoleCode  string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateUserRoles(ctx context.Context, arg *CreateUserRolesParams) error {
	_, err := q.exec(ctx, q.createUserRolesStmt, createUserRoles,
		arg.UserID,
		arg.RoleCode,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteIncomingAccessRequest = `-- name: DeleteIncomingAccessRequest :exec
delete from
    nlx_management.access_requests_incoming
where
        access_requests_incoming.id = $1
`

func (q *Queries) DeleteIncomingAccessRequest(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteIncomingAccessRequestStmt, deleteIncomingAccessRequest, id)
	return err
}

const deleteOutgoingAccessRequest = `-- name: DeleteOutgoingAccessRequest :exec
delete from
    nlx_management.access_requests_outgoing
where
    access_requests_outgoing.id = $1
`

func (q *Queries) DeleteOutgoingAccessRequest(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteOutgoingAccessRequestStmt, deleteOutgoingAccessRequest, id)
	return err
}

const deleteOutgoingAccessRequests = `-- name: DeleteOutgoingAccessRequests :exec
delete from
    nlx_management.access_requests_outgoing
where
    access_requests_outgoing.organization_serial_number = $1 and
    access_requests_outgoing.service_name = $2
`

type DeleteOutgoingAccessRequestsParams struct {
	OrganizationSerialNumber string
	ServiceName              string
}

func (q *Queries) DeleteOutgoingAccessRequests(ctx context.Context, arg *DeleteOutgoingAccessRequestsParams) error {
	_, err := q.exec(ctx, q.deleteOutgoingAccessRequestsStmt, deleteOutgoingAccessRequests, arg.OrganizationSerialNumber, arg.ServiceName)
	return err
}

const doesInwayExistByName = `-- name: DoesInwayExistByName :one
select
        count(*)>0 as inway_exits
from
    nlx_management.inways
where
    inways.name = $1::text
`

func (q *Queries) DoesInwayExistByName(ctx context.Context, inwayName string) (bool, error) {
	row := q.queryRow(ctx, q.doesInwayExistByNameStmt, doesInwayExistByName, inwayName)
	var inway_exits bool
	err := row.Scan(&inway_exits)
	return inway_exits, err
}

const getAccessGrant = `-- name: GetAccessGrant :one
select
    access_grants.id,
    access_grants.created_at,
    access_grants.revoked_at,
    access_grants.terminated_at,
    access_request_incoming_id,
    access_requests_incoming.id as access_request_incoming_id,
    access_requests_incoming.service_id as access_request_incoming_service_id,
    access_requests_incoming.organization_name as access_request_incoming_organization_name,
    access_requests_incoming.organization_serial_number as access_request_incoming_organization_serial_number,
    access_requests_incoming.state as access_request_incoming_state,
    access_requests_incoming.created_at as access_request_incoming_created_at,
    access_requests_incoming.updated_at as access_request_incoming_updated_at,
    access_requests_incoming.public_key_fingerprint as access_request_incoming_public_key_fingerprint,
    access_requests_incoming.public_key_pem as access_request_incoming_public_key_pem,
    services.id as service_id,
    services.name as service_name,
    services.endpoint_url as service_endpoint_url,
    services.documentation_url as service_documentation_url,
    services.api_specification_url as service_api_specification_url,
    services.internal as service_internal,
    services.tech_support_contact as service_tech_support_contact,
    services.public_support_contact as service_public_support_contact,
    services.one_time_costs as service_one_time_costs,
    services.monthly_costs as service_monthly_costs,
    services.request_costs as service_request_costs,
    services.created_at as service_created_at,
    services.updated_at as service_updated_at
from
    nlx_management.access_grants
        join nlx_management.access_requests_incoming on (
            access_grants.access_request_incoming_id = access_requests_incoming.id
        )
        join nlx_management.services on (
            access_requests_incoming.service_id = services.id
        )
where
        access_grants.id = $1
`

type GetAccessGrantRow struct {
	ID                                            int32
	CreatedAt                                     time.Time
	RevokedAt                                     sql.NullTime
	TerminatedAt                                  sql.NullTime
	AccessRequestIncomingID                       int32
	AccessRequestIncomingID_2                     int32
	AccessRequestIncomingServiceID                int32
	AccessRequestIncomingOrganizationName         string
	AccessRequestIncomingOrganizationSerialNumber string
	AccessRequestIncomingState                    string
	AccessRequestIncomingCreatedAt                time.Time
	AccessRequestIncomingUpdatedAt                time.Time
	AccessRequestIncomingPublicKeyFingerprint     string
	AccessRequestIncomingPublicKeyPem             string
	ServiceID                                     int32
	ServiceName                                   string
	ServiceEndpointUrl                            string
	ServiceDocumentationUrl                       string
	ServiceApiSpecificationUrl                    string
	ServiceInternal                               bool
	ServiceTechSupportContact                     string
	ServicePublicSupportContact                   string
	ServiceOneTimeCosts                           int32
	ServiceMonthlyCosts                           int32
	ServiceRequestCosts                           int32
	ServiceCreatedAt                              time.Time
	ServiceUpdatedAt                              time.Time
}

func (q *Queries) GetAccessGrant(ctx context.Context, id int32) (*GetAccessGrantRow, error) {
	row := q.queryRow(ctx, q.getAccessGrantStmt, getAccessGrant, id)
	var i GetAccessGrantRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.RevokedAt,
		&i.TerminatedAt,
		&i.AccessRequestIncomingID,
		&i.AccessRequestIncomingID_2,
		&i.AccessRequestIncomingServiceID,
		&i.AccessRequestIncomingOrganizationName,
		&i.AccessRequestIncomingOrganizationSerialNumber,
		&i.AccessRequestIncomingState,
		&i.AccessRequestIncomingCreatedAt,
		&i.AccessRequestIncomingUpdatedAt,
		&i.AccessRequestIncomingPublicKeyFingerprint,
		&i.AccessRequestIncomingPublicKeyPem,
		&i.ServiceID,
		&i.ServiceName,
		&i.ServiceEndpointUrl,
		&i.ServiceDocumentationUrl,
		&i.ServiceApiSpecificationUrl,
		&i.ServiceInternal,
		&i.ServiceTechSupportContact,
		&i.ServicePublicSupportContact,
		&i.ServiceOneTimeCosts,
		&i.ServiceMonthlyCosts,
		&i.ServiceRequestCosts,
		&i.ServiceCreatedAt,
		&i.ServiceUpdatedAt,
	)
	return &i, err
}

const getAccessGrantIDOfIncomingAccessRequest = `-- name: GetAccessGrantIDOfIncomingAccessRequest :one
select
    access_grants.id
from
    nlx_management.access_grants
where
    access_grants.access_request_incoming_id = $1
ORDER BY
    access_grants.id DESC
LIMIT 1
`

func (q *Queries) GetAccessGrantIDOfIncomingAccessRequest(ctx context.Context, accessRequestIncomingID int32) (int32, error) {
	row := q.queryRow(ctx, q.getAccessGrantIDOfIncomingAccessRequestStmt, getAccessGrantIDOfIncomingAccessRequest, accessRequestIncomingID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getAccessProof = `-- name: GetAccessProof :one
select
    id, access_request_outgoing_id, created_at, revoked_at, terminated_at
FROM
    nlx_management.access_proofs
WHERE
    id = $1
`

func (q *Queries) GetAccessProof(ctx context.Context, id int32) (*NlxManagementAccessProof, error) {
	row := q.queryRow(ctx, q.getAccessProofStmt, getAccessProof, id)
	var i NlxManagementAccessProof
	err := row.Scan(
		&i.ID,
		&i.AccessRequestOutgoingID,
		&i.CreatedAt,
		&i.RevokedAt,
		&i.TerminatedAt,
	)
	return &i, err
}

const getAccessProofByOutgoingAccessRequest = `-- name: GetAccessProofByOutgoingAccessRequest :one
select
    id,
    created_at,
    revoked_at,
    terminated_at
from
    nlx_management.access_proofs
where
    access_request_outgoing_id = $1
limit 1
`

type GetAccessProofByOutgoingAccessRequestRow struct {
	ID           int32
	CreatedAt    time.Time
	RevokedAt    sql.NullTime
	TerminatedAt sql.NullTime
}

func (q *Queries) GetAccessProofByOutgoingAccessRequest(ctx context.Context, accessRequestOutgoingID int32) (*GetAccessProofByOutgoingAccessRequestRow, error) {
	row := q.queryRow(ctx, q.getAccessProofByOutgoingAccessRequestStmt, getAccessProofByOutgoingAccessRequest, accessRequestOutgoingID)
	var i GetAccessProofByOutgoingAccessRequestRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.RevokedAt,
		&i.TerminatedAt,
	)
	return &i, err
}

const getIncomingAccessRequest = `-- name: GetIncomingAccessRequest :one
select
    access_requests_incoming.id,
    access_requests_incoming.state,
    access_requests_incoming.organization_name,
    access_requests_incoming.organization_serial_number,
    access_requests_incoming.public_key_fingerprint,
    access_requests_incoming.public_key_pem,
    access_requests_incoming.created_at,
    access_requests_incoming.updated_at,
    services.id as service_id
from
    nlx_management.access_requests_incoming
        join
            nlx_management.services on
                access_requests_incoming.service_id = services.id
where
    access_requests_incoming.id = $1
`

type GetIncomingAccessRequestRow struct {
	ID                       int32
	State                    string
	OrganizationName         string
	OrganizationSerialNumber string
	PublicKeyFingerprint     string
	PublicKeyPem             string
	CreatedAt                time.Time
	UpdatedAt                time.Time
	ServiceID                int32
}

func (q *Queries) GetIncomingAccessRequest(ctx context.Context, id int32) (*GetIncomingAccessRequestRow, error) {
	row := q.queryRow(ctx, q.getIncomingAccessRequestStmt, getIncomingAccessRequest, id)
	var i GetIncomingAccessRequestRow
	err := row.Scan(
		&i.ID,
		&i.State,
		&i.OrganizationName,
		&i.OrganizationSerialNumber,
		&i.PublicKeyFingerprint,
		&i.PublicKeyPem,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ServiceID,
	)
	return &i, err
}

const getIncomingAccessRequestsByServiceCount = `-- name: GetIncomingAccessRequestsByServiceCount :many
select
    count(access_requests_incoming.id),
    services.name
from
    nlx_management.access_requests_incoming
right join
    nlx_management.services on
        access_requests_incoming.service_id = services.id and
        access_requests_incoming.state = 'received'
group by
    services.id
`

type GetIncomingAccessRequestsByServiceCountRow struct {
	Count int64
	Name  string
}

func (q *Queries) GetIncomingAccessRequestsByServiceCount(ctx context.Context) ([]*GetIncomingAccessRequestsByServiceCountRow, error) {
	rows, err := q.query(ctx, q.getIncomingAccessRequestsByServiceCountStmt, getIncomingAccessRequestsByServiceCount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetIncomingAccessRequestsByServiceCountRow{}
	for rows.Next() {
		var i GetIncomingAccessRequestsByServiceCountRow
		if err := rows.Scan(&i.Count, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInwayByName = `-- name: GetInwayByName :one
select
    inways.id,
    inways.name,
    inways.self_address,
    inways.version,
    inways.hostname,
    inways.ip_address,
    inways.created_at,
    inways.updated_at
from
    nlx_management.inways
where
    inways.name = $1
`

func (q *Queries) GetInwayByName(ctx context.Context, name string) (*NlxManagementInway, error) {
	row := q.queryRow(ctx, q.getInwayByNameStmt, getInwayByName, name)
	var i NlxManagementInway
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SelfAddress,
		&i.Version,
		&i.Hostname,
		&i.IpAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getLatestAccessGrantForService = `-- name: GetLatestAccessGrantForService :one
select
    access_grants.id,
    access_grants.created_at,
    access_grants.revoked_at,
    access_grants.terminated_at,
    access_requests_incoming.id as access_request_incoming_id,
    access_requests_incoming.service_id as access_request_incoming_service_id,
    access_requests_incoming.organization_name as access_request_incoming_organization_name,
    access_requests_incoming.organization_serial_number as access_request_incoming_organization_serial_number,
    access_requests_incoming.state as access_request_incoming_state,
    access_requests_incoming.created_at as access_request_incoming_created_at,
    access_requests_incoming.updated_at as access_request_incoming_updated_at,
    access_requests_incoming.public_key_fingerprint as access_request_incoming_public_key_fingerprint,
    access_requests_incoming.public_key_pem as access_request_incoming_public_key_pem,
    services.id as service_id,
    services.name as service_name,
    services.endpoint_url as service_endpoint_url,
    services.documentation_url as service_documentation_url,
    services.api_specification_url as service_api_specification_url,
    services.internal as service_internal,
    services.tech_support_contact as service_tech_support_contact,
    services.public_support_contact as service_public_support_contact,
    services.one_time_costs as service_one_time_costs,
    services.monthly_costs as service_monthly_costs,
    services.request_costs as service_request_costs,
    services.created_at as service_created_at,
    services.updated_at as service_updated_at
from
    nlx_management.access_grants
        join nlx_management.access_requests_incoming on (
            access_requests_incoming.id = access_grants.access_request_incoming_id and
            access_requests_incoming.organization_serial_number = $1 and
            access_requests_incoming.public_key_fingerprint = $2
        )
        join nlx_management.services on (
            services.id = access_requests_incoming.service_id and
            services.name = $3::text
        )
order by
    access_grants.created_at desc
limit 1
`

type GetLatestAccessGrantForServiceParams struct {
	OrganizationSerialNumber string
	PublicKeyFingerprint     string
	ServiceName              string
}

type GetLatestAccessGrantForServiceRow struct {
	ID                                            int32
	CreatedAt                                     time.Time
	RevokedAt                                     sql.NullTime
	TerminatedAt                                  sql.NullTime
	AccessRequestIncomingID                       int32
	AccessRequestIncomingServiceID                int32
	AccessRequestIncomingOrganizationName         string
	AccessRequestIncomingOrganizationSerialNumber string
	AccessRequestIncomingState                    string
	AccessRequestIncomingCreatedAt                time.Time
	AccessRequestIncomingUpdatedAt                time.Time
	AccessRequestIncomingPublicKeyFingerprint     string
	AccessRequestIncomingPublicKeyPem             string
	ServiceID                                     int32
	ServiceName                                   string
	ServiceEndpointUrl                            string
	ServiceDocumentationUrl                       string
	ServiceApiSpecificationUrl                    string
	ServiceInternal                               bool
	ServiceTechSupportContact                     string
	ServicePublicSupportContact                   string
	ServiceOneTimeCosts                           int32
	ServiceMonthlyCosts                           int32
	ServiceRequestCosts                           int32
	ServiceCreatedAt                              time.Time
	ServiceUpdatedAt                              time.Time
}

func (q *Queries) GetLatestAccessGrantForService(ctx context.Context, arg *GetLatestAccessGrantForServiceParams) (*GetLatestAccessGrantForServiceRow, error) {
	row := q.queryRow(ctx, q.getLatestAccessGrantForServiceStmt, getLatestAccessGrantForService, arg.OrganizationSerialNumber, arg.PublicKeyFingerprint, arg.ServiceName)
	var i GetLatestAccessGrantForServiceRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.RevokedAt,
		&i.TerminatedAt,
		&i.AccessRequestIncomingID,
		&i.AccessRequestIncomingServiceID,
		&i.AccessRequestIncomingOrganizationName,
		&i.AccessRequestIncomingOrganizationSerialNumber,
		&i.AccessRequestIncomingState,
		&i.AccessRequestIncomingCreatedAt,
		&i.AccessRequestIncomingUpdatedAt,
		&i.AccessRequestIncomingPublicKeyFingerprint,
		&i.AccessRequestIncomingPublicKeyPem,
		&i.ServiceID,
		&i.ServiceName,
		&i.ServiceEndpointUrl,
		&i.ServiceDocumentationUrl,
		&i.ServiceApiSpecificationUrl,
		&i.ServiceInternal,
		&i.ServiceTechSupportContact,
		&i.ServicePublicSupportContact,
		&i.ServiceOneTimeCosts,
		&i.ServiceMonthlyCosts,
		&i.ServiceRequestCosts,
		&i.ServiceCreatedAt,
		&i.ServiceUpdatedAt,
	)
	return &i, err
}

const getLatestIncomingAccessRequest = `-- name: GetLatestIncomingAccessRequest :one
select
    access_requests_incoming.id,
    access_requests_incoming.state,
    access_requests_incoming.created_at,
    access_requests_incoming.updated_at
from
    nlx_management.access_requests_incoming
        left join
    nlx_management.services on
            access_requests_incoming.service_id = services.id
where
    access_requests_incoming.organization_serial_number = $1
and
    access_requests_incoming.public_key_fingerprint = $2
and
    services.name = $3
order by
    access_requests_incoming.created_at desc
`

type GetLatestIncomingAccessRequestParams struct {
	OrganizationSerialNumber string
	PublicKeyFingerprint     string
	Name                     string
}

type GetLatestIncomingAccessRequestRow struct {
	ID        int32
	State     string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) GetLatestIncomingAccessRequest(ctx context.Context, arg *GetLatestIncomingAccessRequestParams) (*GetLatestIncomingAccessRequestRow, error) {
	row := q.queryRow(ctx, q.getLatestIncomingAccessRequestStmt, getLatestIncomingAccessRequest, arg.OrganizationSerialNumber, arg.PublicKeyFingerprint, arg.Name)
	var i GetLatestIncomingAccessRequestRow
	err := row.Scan(
		&i.ID,
		&i.State,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getLatestOutgoingAccessRequest = `-- name: GetLatestOutgoingAccessRequest :one
select
    access_requests_outgoing.id,
    access_requests_outgoing.organization_name,
    access_requests_outgoing.organization_serial_number,
    access_requests_outgoing.service_name,
    access_requests_outgoing.state,
    access_requests_outgoing.reference_id,
    access_requests_outgoing.error_code,
    access_requests_outgoing.error_cause,
    access_requests_outgoing.public_key_fingerprint,
    access_requests_outgoing.public_key_pem,
    access_requests_outgoing.created_at,
    access_requests_outgoing.updated_at
from
    nlx_management.access_requests_outgoing
where
    access_requests_outgoing.organization_serial_number = $1 and
    access_requests_outgoing.service_name = $2 and
    access_requests_outgoing.public_key_fingerprint = $3
order by
    access_requests_outgoing.created_at desc
limit 1
`

type GetLatestOutgoingAccessRequestParams struct {
	OrganizationSerialNumber string
	ServiceName              string
	PublicKeyFingerprint     string
}

type GetLatestOutgoingAccessRequestRow struct {
	ID                       int32
	OrganizationName         string
	OrganizationSerialNumber string
	ServiceName              string
	State                    string
	ReferenceID              int32
	ErrorCode                int32
	ErrorCause               sql.NullString
	PublicKeyFingerprint     string
	PublicKeyPem             string
	CreatedAt                time.Time
	UpdatedAt                time.Time
}

func (q *Queries) GetLatestOutgoingAccessRequest(ctx context.Context, arg *GetLatestOutgoingAccessRequestParams) (*GetLatestOutgoingAccessRequestRow, error) {
	row := q.queryRow(ctx, q.getLatestOutgoingAccessRequestStmt, getLatestOutgoingAccessRequest, arg.OrganizationSerialNumber, arg.ServiceName, arg.PublicKeyFingerprint)
	var i GetLatestOutgoingAccessRequestRow
	err := row.Scan(
		&i.ID,
		&i.OrganizationName,
		&i.OrganizationSerialNumber,
		&i.ServiceName,
		&i.State,
		&i.ReferenceID,
		&i.ErrorCode,
		&i.ErrorCause,
		&i.PublicKeyFingerprint,
		&i.PublicKeyPem,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getOutgoingAccessRequest = `-- name: GetOutgoingAccessRequest :one
select
    access_requests_outgoing.id,
    access_requests_outgoing.organization_name,
    access_requests_outgoing.organization_serial_number,
    access_requests_outgoing.service_name,
    access_requests_outgoing.state,
    access_requests_outgoing.reference_id,
    access_requests_outgoing.error_code,
    access_requests_outgoing.error_cause,
    access_requests_outgoing.public_key_fingerprint,
    access_requests_outgoing.public_key_pem,
    access_requests_outgoing.created_at,
    access_requests_outgoing.updated_at
from
    nlx_management.access_requests_outgoing
where
    id = $1
`

type GetOutgoingAccessRequestRow struct {
	ID                       int32
	OrganizationName         string
	OrganizationSerialNumber string
	ServiceName              string
	State                    string
	ReferenceID              int32
	ErrorCode                int32
	ErrorCause               sql.NullString
	PublicKeyFingerprint     string
	PublicKeyPem             string
	CreatedAt                time.Time
	UpdatedAt                time.Time
}

func (q *Queries) GetOutgoingAccessRequest(ctx context.Context, id int32) (*GetOutgoingAccessRequestRow, error) {
	row := q.queryRow(ctx, q.getOutgoingAccessRequestStmt, getOutgoingAccessRequest, id)
	var i GetOutgoingAccessRequestRow
	err := row.Scan(
		&i.ID,
		&i.OrganizationName,
		&i.OrganizationSerialNumber,
		&i.ServiceName,
		&i.State,
		&i.ReferenceID,
		&i.ErrorCode,
		&i.ErrorCause,
		&i.PublicKeyFingerprint,
		&i.PublicKeyPem,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getSettings = `-- name: GetSettings :one

select
    settings.organization_email_address,
    inways.name
from
    nlx_management.settings
        left join nlx_management.inways on (
            settings.inway_id = inways.id
        )
order by
    settings.id
limit 1
`

type GetSettingsRow struct {
	OrganizationEmailAddress sql.NullString
	Name                     sql.NullString
}

// Copyright © VNG Realisatie 2022
// Licensed under the EUPL
func (q *Queries) GetSettings(ctx context.Context) (*GetSettingsRow, error) {
	row := q.queryRow(ctx, q.getSettingsStmt, getSettings)
	var i GetSettingsRow
	err := row.Scan(&i.OrganizationEmailAddress, &i.Name)
	return &i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, email, password, users_roles.role_code
from
    nlx_management.users
left join nlx_management.users_roles on users.id = users_roles.user_id
where email = $1
limit 1
`

type GetUserByEmailRow struct {
	ID       int32
	Email    string
	Password sql.NullString
	RoleCode sql.NullString
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (*GetUserByEmailRow, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.RoleCode,
	)
	return &i, err
}

const listAccessGrantsForService = `-- name: ListAccessGrantsForService :many
select
    access_grants.id,
    access_grants.created_at,
    access_grants.revoked_at,
    access_grants.terminated_at,
    access_grants.access_request_incoming_id,
    access_requests_incoming.service_id as access_request_incoming_service_id,
    access_requests_incoming.organization_name as access_request_incoming_organization_name,
    access_requests_incoming.organization_serial_number as access_request_incoming_organization_serial_number,
    access_requests_incoming.state as access_request_incoming_state,
    access_requests_incoming.created_at as access_request_incoming_created_at,
    access_requests_incoming.updated_at as access_request_incoming_updated_at,
    access_requests_incoming.public_key_fingerprint as access_request_incoming_public_key_fingerprint,
    access_requests_incoming.public_key_pem as access_request_incoming_public_key_pem,
    services.id as service_id,
    services.name as service_name,
    services.endpoint_url as service_endpoint_url,
    services.documentation_url as service_documentation_url,
    services.api_specification_url as service_api_specification_url,
    services.internal as service_internal,
    services.tech_support_contact as service_tech_support_contact,
    services.public_support_contact as service_public_support_contact,
    services.one_time_costs as service_one_time_costs,
    services.monthly_costs as service_monthly_costs,
    services.request_costs as service_request_costs,
    services.created_at as service_created_at,
    services.updated_at as service_updated_at
from
    nlx_management.access_grants
        join nlx_management.access_requests_incoming on (
            access_grants.access_request_incoming_id = access_requests_incoming.id
        )
        join nlx_management.services on (
            access_requests_incoming.service_id = services.id and
            services.name = $1
        )
`

type ListAccessGrantsForServiceRow struct {
	ID                                            int32
	CreatedAt                                     time.Time
	RevokedAt                                     sql.NullTime
	TerminatedAt                                  sql.NullTime
	AccessRequestIncomingID                       int32
	AccessRequestIncomingServiceID                int32
	AccessRequestIncomingOrganizationName         string
	AccessRequestIncomingOrganizationSerialNumber string
	AccessRequestIncomingState                    string
	AccessRequestIncomingCreatedAt                time.Time
	AccessRequestIncomingUpdatedAt                time.Time
	AccessRequestIncomingPublicKeyFingerprint     string
	AccessRequestIncomingPublicKeyPem             string
	ServiceID                                     int32
	ServiceName                                   string
	ServiceEndpointUrl                            string
	ServiceDocumentationUrl                       string
	ServiceApiSpecificationUrl                    string
	ServiceInternal                               bool
	ServiceTechSupportContact                     string
	ServicePublicSupportContact                   string
	ServiceOneTimeCosts                           int32
	ServiceMonthlyCosts                           int32
	ServiceRequestCosts                           int32
	ServiceCreatedAt                              time.Time
	ServiceUpdatedAt                              time.Time
}

func (q *Queries) ListAccessGrantsForService(ctx context.Context, name string) ([]*ListAccessGrantsForServiceRow, error) {
	rows, err := q.query(ctx, q.listAccessGrantsForServiceStmt, listAccessGrantsForService, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListAccessGrantsForServiceRow{}
	for rows.Next() {
		var i ListAccessGrantsForServiceRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.RevokedAt,
			&i.TerminatedAt,
			&i.AccessRequestIncomingID,
			&i.AccessRequestIncomingServiceID,
			&i.AccessRequestIncomingOrganizationName,
			&i.AccessRequestIncomingOrganizationSerialNumber,
			&i.AccessRequestIncomingState,
			&i.AccessRequestIncomingCreatedAt,
			&i.AccessRequestIncomingUpdatedAt,
			&i.AccessRequestIncomingPublicKeyFingerprint,
			&i.AccessRequestIncomingPublicKeyPem,
			&i.ServiceID,
			&i.ServiceName,
			&i.ServiceEndpointUrl,
			&i.ServiceDocumentationUrl,
			&i.ServiceApiSpecificationUrl,
			&i.ServiceInternal,
			&i.ServiceTechSupportContact,
			&i.ServicePublicSupportContact,
			&i.ServiceOneTimeCosts,
			&i.ServiceMonthlyCosts,
			&i.ServiceRequestCosts,
			&i.ServiceCreatedAt,
			&i.ServiceUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllLatestOutgoingAccessRequests = `-- name: ListAllLatestOutgoingAccessRequests :many
select
    distinct on (
        public_key_fingerprint,
        service_name,
        organization_serial_number
    ) access_requests_outgoing.id,
      access_requests_outgoing.organization_name,
      access_requests_outgoing.organization_serial_number,
      access_requests_outgoing.service_name,
      access_requests_outgoing.state,
      access_requests_outgoing.reference_id,
      access_requests_outgoing.error_code,
      access_requests_outgoing.error_cause,
      access_requests_outgoing.public_key_fingerprint,
      access_requests_outgoing.public_key_pem,
      access_requests_outgoing.created_at,
      access_requests_outgoing.updated_at
from
    nlx_management.access_requests_outgoing
order by
    organization_serial_number,
    public_key_fingerprint,
    service_name,
    created_at
desc
`

type ListAllLatestOutgoingAccessRequestsRow struct {
	ID                       int32
	OrganizationName         string
	OrganizationSerialNumber string
	ServiceName              string
	State                    string
	ReferenceID              int32
	ErrorCode                int32
	ErrorCause               sql.NullString
	PublicKeyFingerprint     string
	PublicKeyPem             string
	CreatedAt                time.Time
	UpdatedAt                time.Time
}

func (q *Queries) ListAllLatestOutgoingAccessRequests(ctx context.Context) ([]*ListAllLatestOutgoingAccessRequestsRow, error) {
	rows, err := q.query(ctx, q.listAllLatestOutgoingAccessRequestsStmt, listAllLatestOutgoingAccessRequests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListAllLatestOutgoingAccessRequestsRow{}
	for rows.Next() {
		var i ListAllLatestOutgoingAccessRequestsRow
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationName,
			&i.OrganizationSerialNumber,
			&i.ServiceName,
			&i.State,
			&i.ReferenceID,
			&i.ErrorCode,
			&i.ErrorCause,
			&i.PublicKeyFingerprint,
			&i.PublicKeyPem,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAuditLogServices = `-- name: ListAuditLogServices :many
select
    audit_logs_services.organization_name,
    audit_logs_services.organization_serial_number,
    audit_logs_services.service,
    audit_logs_services.created_at
from
    nlx_management.audit_logs_services
where
    audit_logs_services.audit_log_id = $1
`

type ListAuditLogServicesRow struct {
	OrganizationName         sql.NullString
	OrganizationSerialNumber string
	Service                  sql.NullString
	CreatedAt                time.Time
}

func (q *Queries) ListAuditLogServices(ctx context.Context, auditLogID sql.NullInt64) ([]*ListAuditLogServicesRow, error) {
	rows, err := q.query(ctx, q.listAuditLogServicesStmt, listAuditLogServices, auditLogID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListAuditLogServicesRow{}
	for rows.Next() {
		var i ListAuditLogServicesRow
		if err := rows.Scan(
			&i.OrganizationName,
			&i.OrganizationSerialNumber,
			&i.Service,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAuditLogs = `-- name: ListAuditLogs :many
select
    audit_logs.id,
    audit_logs.user_name,
    audit_logs.action_type,
    audit_logs.user_agent,
    audit_logs.data,
    audit_logs.created_at,
    audit_logs.has_succeeded
from
    nlx_management.audit_logs
order by
    audit_logs.created_at desc
limit $1
`

func (q *Queries) ListAuditLogs(ctx context.Context, limit int32) ([]*NlxManagementAuditLog, error) {
	rows, err := q.query(ctx, q.listAuditLogsStmt, listAuditLogs, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*NlxManagementAuditLog{}
	for rows.Next() {
		var i NlxManagementAuditLog
		if err := rows.Scan(
			&i.ID,
			&i.UserName,
			&i.ActionType,
			&i.UserAgent,
			&i.Data,
			&i.CreatedAt,
			&i.HasSucceeded,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listIncomingAccessRequests = `-- name: ListIncomingAccessRequests :many
select
    access_requests_incoming.id,
    access_requests_incoming.organization_name,
    access_requests_incoming.organization_serial_number,
    access_requests_incoming.state,
    access_requests_incoming.public_key_fingerprint,
    access_requests_incoming.public_key_pem,
    access_requests_incoming.created_at,
    access_requests_incoming.updated_at
from
    nlx_management.access_requests_incoming
left join
    nlx_management.services on
        access_requests_incoming.service_id = services.id
where
    services.name = $1
`

type ListIncomingAccessRequestsRow struct {
	ID                       int32
	OrganizationName         string
	OrganizationSerialNumber string
	State                    string
	PublicKeyFingerprint     string
	PublicKeyPem             string
	CreatedAt                time.Time
	UpdatedAt                time.Time
}

func (q *Queries) ListIncomingAccessRequests(ctx context.Context, name string) ([]*ListIncomingAccessRequestsRow, error) {
	rows, err := q.query(ctx, q.listIncomingAccessRequestsStmt, listIncomingAccessRequests, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListIncomingAccessRequestsRow{}
	for rows.Next() {
		var i ListIncomingAccessRequestsRow
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationName,
			&i.OrganizationSerialNumber,
			&i.State,
			&i.PublicKeyFingerprint,
			&i.PublicKeyPem,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listInways = `-- name: ListInways :many
select
    inways.id,
    inways.name,
    inways.self_address,
    inways.version,
    inways.hostname,
    inways.ip_address,
    inways.created_at,
    inways.updated_at
from
    nlx_management.inways
`

func (q *Queries) ListInways(ctx context.Context) ([]*NlxManagementInway, error) {
	rows, err := q.query(ctx, q.listInwaysStmt, listInways)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*NlxManagementInway{}
	for rows.Next() {
		var i NlxManagementInway
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.SelfAddress,
			&i.Version,
			&i.Hostname,
			&i.IpAddress,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listInwaysForService = `-- name: ListInwaysForService :many
select
    inways.id,
    inways.name,
    inways.self_address,
    inways.version,
    inways.hostname,
    inways.ip_address,
    inways.created_at,
    inways.updated_at
from
    nlx_management.inways_services
join
    nlx_management.inways on inways_services.inway_id = inways.id
where
    inways_services.service_id = $1
`

func (q *Queries) ListInwaysForService(ctx context.Context, serviceID int32) ([]*NlxManagementInway, error) {
	rows, err := q.query(ctx, q.listInwaysForServiceStmt, listInwaysForService, serviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*NlxManagementInway{}
	for rows.Next() {
		var i NlxManagementInway
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.SelfAddress,
			&i.Version,
			&i.Hostname,
			&i.IpAddress,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLatestOutgoingAccessRequests = `-- name: ListLatestOutgoingAccessRequests :many
SELECT
    distinct on (
        public_key_fingerprint,
        service_name,
        organization_serial_number
    )
    access_requests_outgoing.id,
    access_requests_outgoing.organization_name,
    access_requests_outgoing.organization_serial_number,
    access_requests_outgoing.service_name,
    access_requests_outgoing.state,
    access_requests_outgoing.reference_id,
    access_requests_outgoing.error_code,
    access_requests_outgoing.error_cause,
    access_requests_outgoing.public_key_fingerprint,
    access_requests_outgoing.public_key_pem,
    access_requests_outgoing.created_at,
    access_requests_outgoing.updated_at
from
    nlx_management.access_requests_outgoing
where
    organization_serial_number = $1 and
    service_name = $2
order by
    organization_serial_number,
    public_key_fingerprint,
    service_name,
    created_at
desc
`

type ListLatestOutgoingAccessRequestsParams struct {
	OrganizationSerialNumber string
	ServiceName              string
}

type ListLatestOutgoingAccessRequestsRow struct {
	ID                       int32
	OrganizationName         string
	OrganizationSerialNumber string
	ServiceName              string
	State                    string
	ReferenceID              int32
	ErrorCode                int32
	ErrorCause               sql.NullString
	PublicKeyFingerprint     string
	PublicKeyPem             string
	CreatedAt                time.Time
	UpdatedAt                time.Time
}

func (q *Queries) ListLatestOutgoingAccessRequests(ctx context.Context, arg *ListLatestOutgoingAccessRequestsParams) ([]*ListLatestOutgoingAccessRequestsRow, error) {
	rows, err := q.query(ctx, q.listLatestOutgoingAccessRequestsStmt, listLatestOutgoingAccessRequests, arg.OrganizationSerialNumber, arg.ServiceName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListLatestOutgoingAccessRequestsRow{}
	for rows.Next() {
		var i ListLatestOutgoingAccessRequestsRow
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationName,
			&i.OrganizationSerialNumber,
			&i.ServiceName,
			&i.State,
			&i.ReferenceID,
			&i.ErrorCode,
			&i.ErrorCause,
			&i.PublicKeyFingerprint,
			&i.PublicKeyPem,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPermissions = `-- name: ListPermissions :many
select code from nlx_management.permissions
`

func (q *Queries) ListPermissions(ctx context.Context) ([]string, error) {
	rows, err := q.query(ctx, q.listPermissionsStmt, listPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var code string
		if err := rows.Scan(&code); err != nil {
			return nil, err
		}
		items = append(items, code)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPermissionsForRole = `-- name: ListPermissionsForRole :many
select permission_code
from
    nlx_management.permissions_roles
where role_code = $1
`

func (q *Queries) ListPermissionsForRole(ctx context.Context, roleCode string) ([]string, error) {
	rows, err := q.query(ctx, q.listPermissionsForRoleStmt, listPermissionsForRole, roleCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var permission_code string
		if err := rows.Scan(&permission_code); err != nil {
			return nil, err
		}
		items = append(items, permission_code)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRolesForUser = `-- name: ListRolesForUser :many
select
    role_code
from
    nlx_management.users_roles
where user_id = $1
`

func (q *Queries) ListRolesForUser(ctx context.Context, userID int32) ([]string, error) {
	rows, err := q.query(ctx, q.listRolesForUserStmt, listRolesForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var role_code string
		if err := rows.Scan(&role_code); err != nil {
			return nil, err
		}
		items = append(items, role_code)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listServices = `-- name: ListServices :many
select
    id,
    name,
    endpoint_url,
    documentation_url,
    api_specification_url,
    internal,
    tech_support_contact,
    public_support_contact,
    created_at,
    updated_at,
    one_time_costs,
    monthly_costs,
    request_costs
from
    nlx_management.services
`

func (q *Queries) ListServices(ctx context.Context) ([]*NlxManagementService, error) {
	rows, err := q.query(ctx, q.listServicesStmt, listServices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*NlxManagementService{}
	for rows.Next() {
		var i NlxManagementService
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.EndpointUrl,
			&i.DocumentationUrl,
			&i.ApiSpecificationUrl,
			&i.Internal,
			&i.TechSupportContact,
			&i.PublicSupportContact,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OneTimeCosts,
			&i.MonthlyCosts,
			&i.RequestCosts,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listServicesForInway = `-- name: ListServicesForInway :many
select
    id,
    name,
    endpoint_url,
    documentation_url,
    api_specification_url,
    internal,
    tech_support_contact,
    public_support_contact,
    created_at,
    updated_at,
    one_time_costs,
    monthly_costs,
    request_costs,
    inways_services.inway_id
from
    nlx_management.services
join
    nlx_management.inways_services
        on inways_services.service_id = services.id
where
    inways_services.inway_id = $1
`

type ListServicesForInwayRow struct {
	ID                   int32
	Name                 string
	EndpointUrl          string
	DocumentationUrl     string
	ApiSpecificationUrl  string
	Internal             bool
	TechSupportContact   string
	PublicSupportContact string
	CreatedAt            time.Time
	UpdatedAt            time.Time
	OneTimeCosts         int32
	MonthlyCosts         int32
	RequestCosts         int32
	InwayID              int32
}

func (q *Queries) ListServicesForInway(ctx context.Context, inwayID int32) ([]*ListServicesForInwayRow, error) {
	rows, err := q.query(ctx, q.listServicesForInwayStmt, listServicesForInway, inwayID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListServicesForInwayRow{}
	for rows.Next() {
		var i ListServicesForInwayRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.EndpointUrl,
			&i.DocumentationUrl,
			&i.ApiSpecificationUrl,
			&i.Internal,
			&i.TechSupportContact,
			&i.PublicSupportContact,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OneTimeCosts,
			&i.MonthlyCosts,
			&i.RequestCosts,
			&i.InwayID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTermsOfService = `-- name: ListTermsOfService :many
select
    id, username, created_at
from
    nlx_management.terms_of_service
`

func (q *Queries) ListTermsOfService(ctx context.Context) ([]*NlxManagementTermsOfService, error) {
	rows, err := q.query(ctx, q.listTermsOfServiceStmt, listTermsOfService)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*NlxManagementTermsOfService{}
	for rows.Next() {
		var i NlxManagementTermsOfService
		if err := rows.Scan(&i.ID, &i.Username, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeInway = `-- name: RemoveInway :exec
delete from
    nlx_management.inways
where
        id = $1
`

func (q *Queries) RemoveInway(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.removeInwayStmt, removeInway, id)
	return err
}

const removeInwayServicesForInway = `-- name: RemoveInwayServicesForInway :exec
delete from
    nlx_management.inways_services
where
    inway_id = $1
`

func (q *Queries) RemoveInwayServicesForInway(ctx context.Context, inwayID int32) error {
	_, err := q.exec(ctx, q.removeInwayServicesForInwayStmt, removeInwayServicesForInway, inwayID)
	return err
}

const revokeAccessGrant = `-- name: RevokeAccessGrant :exec
update
    nlx_management.access_grants
set
    revoked_at = $2
where
    access_grants.id = $1
`

type RevokeAccessGrantParams struct {
	ID        int32
	RevokedAt sql.NullTime
}

func (q *Queries) RevokeAccessGrant(ctx context.Context, arg *RevokeAccessGrantParams) error {
	_, err := q.exec(ctx, q.revokeAccessGrantStmt, revokeAccessGrant, arg.ID, arg.RevokedAt)
	return err
}

const revokeAccessProof = `-- name: RevokeAccessProof :exec
update
    nlx_management.access_proofs
set
    revoked_at = $1
where
    id = $2
`

type RevokeAccessProofParams struct {
	RevokedAt sql.NullTime
	ID        int32
}

func (q *Queries) RevokeAccessProof(ctx context.Context, arg *RevokeAccessProofParams) error {
	_, err := q.exec(ctx, q.revokeAccessProofStmt, revokeAccessProof, arg.RevokedAt, arg.ID)
	return err
}

const setAuditLogAsSucceeded = `-- name: SetAuditLogAsSucceeded :exec
update
    nlx_management.audit_logs
set
    has_succeeded = true
where
    audit_logs.id = $1
`

func (q *Queries) SetAuditLogAsSucceeded(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.setAuditLogAsSucceededStmt, setAuditLogAsSucceeded, id)
	return err
}

const terminateAccessGrant = `-- name: TerminateAccessGrant :exec
update
    nlx_management.access_grants
set
    terminated_at = $1
where
    access_grants.id = $2
`

type TerminateAccessGrantParams struct {
	TerminatedAt sql.NullTime
	ID           int32
}

func (q *Queries) TerminateAccessGrant(ctx context.Context, arg *TerminateAccessGrantParams) error {
	_, err := q.exec(ctx, q.terminateAccessGrantStmt, terminateAccessGrant, arg.TerminatedAt, arg.ID)
	return err
}

const terminateAccessProof = `-- name: TerminateAccessProof :exec
update
    nlx_management.access_proofs
set
    terminated_at = $1
where
        access_proofs.id = $2
`

type TerminateAccessProofParams struct {
	TerminatedAt sql.NullTime
	ID           int32
}

func (q *Queries) TerminateAccessProof(ctx context.Context, arg *TerminateAccessProofParams) error {
	_, err := q.exec(ctx, q.terminateAccessProofStmt, terminateAccessProof, arg.TerminatedAt, arg.ID)
	return err
}

const updateIncomingAccessRequest = `-- name: UpdateIncomingAccessRequest :execrows
update
    nlx_management.access_requests_incoming
set
    state = $2,
    updated_at = $3
where
    id = $1
`

type UpdateIncomingAccessRequestParams struct {
	ID        int32
	State     string
	UpdatedAt time.Time
}

func (q *Queries) UpdateIncomingAccessRequest(ctx context.Context, arg *UpdateIncomingAccessRequestParams) (int64, error) {
	result, err := q.exec(ctx, q.updateIncomingAccessRequestStmt, updateIncomingAccessRequest, arg.ID, arg.State, arg.UpdatedAt)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateInway = `-- name: UpdateInway :exec
update
    nlx_management.inways
set
    name = $1,
    version = $2,
    hostname = $3,
    self_address = $4,
    created_at = $5,
    updated_at = $6
where
    inways.id = $7
`

type UpdateInwayParams struct {
	Name        string
	Version     string
	Hostname    string
	SelfAddress string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	ID          int32
}

func (q *Queries) UpdateInway(ctx context.Context, arg *UpdateInwayParams) error {
	_, err := q.exec(ctx, q.updateInwayStmt, updateInway,
		arg.Name,
		arg.Version,
		arg.Hostname,
		arg.SelfAddress,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}

const updateOutgoingAccessRequestState = `-- name: UpdateOutgoingAccessRequestState :execrows
update
    nlx_management.access_requests_outgoing
set
    state = $1,
    updated_at = $2
where
    access_requests_outgoing.id = $3
`

type UpdateOutgoingAccessRequestStateParams struct {
	State     string
	UpdatedAt time.Time
	ID        int32
}

func (q *Queries) UpdateOutgoingAccessRequestState(ctx context.Context, arg *UpdateOutgoingAccessRequestStateParams) (int64, error) {
	result, err := q.exec(ctx, q.updateOutgoingAccessRequestStateStmt, updateOutgoingAccessRequestState, arg.State, arg.UpdatedAt, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateSettings = `-- name: UpdateSettings :exec
update
    nlx_management.settings
set
        organization_email_address = $1::text,
        inway_id = (
            select
                id
            from
                nlx_management.inways
            where
                inways.name = $2::text
        )
`

type UpdateSettingsParams struct {
	OrganizationEmailAddress string
	InwayName                string
}

func (q *Queries) UpdateSettings(ctx context.Context, arg *UpdateSettingsParams) error {
	_, err := q.exec(ctx, q.updateSettingsStmt, updateSettings, arg.OrganizationEmailAddress, arg.InwayName)
	return err
}

const upsertInway = `-- name: UpsertInway :exec
insert into nlx_management.inways
    (name, self_address, version, hostname, ip_address, created_at, updated_at)
values
    ($1, $2, $3, $4, $5, $6, $7)
    on conflict
on constraint inways_name_key
    do update
           set
                self_address    = excluded.self_address,
                version         = excluded.version,
                hostname        = excluded.hostname,
                ip_address      = excluded.ip_address,
                updated_at      = excluded.updated_at
`

type UpsertInwayParams struct {
	Name        string
	SelfAddress string
	Version     string
	Hostname    string
	IpAddress   string
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) UpsertInway(ctx context.Context, arg *UpsertInwayParams) error {
	_, err := q.exec(ctx, q.upsertInwayStmt, upsertInway,
		arg.Name,
		arg.SelfAddress,
		arg.Version,
		arg.Hostname,
		arg.IpAddress,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
