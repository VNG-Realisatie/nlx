// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: queries.sql

package queries

import (
	"context"
	"database/sql"
	"time"
)

const createAccessGrant = `-- name: CreateAccessGrant :one
insert into
    nlx_management.access_grants
(
    access_request_incoming_id,
    created_at
) values (
      $1,
      $2
)
returning id
`

type CreateAccessGrantParams struct {
	AccessRequestIncomingID int32
	CreatedAt               time.Time
}

func (q *Queries) CreateAccessGrant(ctx context.Context, arg *CreateAccessGrantParams) (int32, error) {
	row := q.queryRow(ctx, q.createAccessGrantStmt, createAccessGrant, arg.AccessRequestIncomingID, arg.CreatedAt)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createAccessProof = `-- name: CreateAccessProof :one
insert into
    nlx_management.access_proofs
(
    access_request_outgoing_id,
    created_at
) values (
             $1,
             $2
         )
returning id
`

type CreateAccessProofParams struct {
	AccessRequestOutgoingID int32
	CreatedAt               time.Time
}

func (q *Queries) CreateAccessProof(ctx context.Context, arg *CreateAccessProofParams) (int32, error) {
	row := q.queryRow(ctx, q.createAccessProofStmt, createAccessProof, arg.AccessRequestOutgoingID, arg.CreatedAt)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createTermsOfService = `-- name: CreateTermsOfService :exec
insert into
    nlx_management.terms_of_service
(username, created_at)
values
    ($1, $2)
`

type CreateTermsOfServiceParams struct {
	Username  string
	CreatedAt time.Time
}

func (q *Queries) CreateTermsOfService(ctx context.Context, arg *CreateTermsOfServiceParams) error {
	_, err := q.exec(ctx, q.createTermsOfServiceStmt, createTermsOfService, arg.Username, arg.CreatedAt)
	return err
}

const doesInwayExistByName = `-- name: DoesInwayExistByName :one
select
        count(*)>0 as inway_exits
from
    nlx_management.inways
where
    inways.name = $1::text
`

func (q *Queries) DoesInwayExistByName(ctx context.Context, inwayName string) (bool, error) {
	row := q.queryRow(ctx, q.doesInwayExistByNameStmt, doesInwayExistByName, inwayName)
	var inway_exits bool
	err := row.Scan(&inway_exits)
	return inway_exits, err
}

const getAccessGrant = `-- name: GetAccessGrant :one
select
    access_grants.id,
    access_grants.created_at,
    access_grants.revoked_at,
    access_request_incoming_id,
    access_requests_incoming.id as access_request_incoming_id,
    access_requests_incoming.service_id as access_request_incoming_service_id,
    access_requests_incoming.organization_name as access_request_incoming_organization_name,
    access_requests_incoming.organization_serial_number as access_request_incoming_organization_serial_number,
    access_requests_incoming.state as access_request_incoming_state,
    access_requests_incoming.created_at as access_request_incoming_created_at,
    access_requests_incoming.updated_at as access_request_incoming_updated_at,
    access_requests_incoming.public_key_fingerprint as access_request_incoming_public_key_fingerprint,
    access_requests_incoming.public_key_pem as access_request_incoming_public_key_pem,
    services.id as service_id,
    services.name as service_name,
    services.endpoint_url as service_endpoint_url,
    services.documentation_url as service_documentation_url,
    services.api_specification_url as service_api_specification_url,
    services.internal as service_internal,
    services.tech_support_contact as service_tech_support_contact,
    services.public_support_contact as service_public_support_contact,
    services.one_time_costs as service_one_time_costs,
    services.monthly_costs as service_monthly_costs,
    services.request_costs as service_request_costs,
    services.created_at as service_created_at,
    services.updated_at as service_updated_at
from
    nlx_management.access_grants
        join nlx_management.access_requests_incoming on (
            access_grants.access_request_incoming_id = access_requests_incoming.id
        )
        join nlx_management.services on (
            access_requests_incoming.service_id = services.id
        )
where
        access_grants.id = $1
`

type GetAccessGrantRow struct {
	ID                                            int32
	CreatedAt                                     time.Time
	RevokedAt                                     sql.NullTime
	AccessRequestIncomingID                       int32
	AccessRequestIncomingID_2                     int32
	AccessRequestIncomingServiceID                int32
	AccessRequestIncomingOrganizationName         string
	AccessRequestIncomingOrganizationSerialNumber string
	AccessRequestIncomingState                    string
	AccessRequestIncomingCreatedAt                time.Time
	AccessRequestIncomingUpdatedAt                time.Time
	AccessRequestIncomingPublicKeyFingerprint     string
	AccessRequestIncomingPublicKeyPem             sql.NullString
	ServiceID                                     int32
	ServiceName                                   string
	ServiceEndpointUrl                            string
	ServiceDocumentationUrl                       string
	ServiceApiSpecificationUrl                    string
	ServiceInternal                               bool
	ServiceTechSupportContact                     string
	ServicePublicSupportContact                   string
	ServiceOneTimeCosts                           int32
	ServiceMonthlyCosts                           int32
	ServiceRequestCosts                           int32
	ServiceCreatedAt                              time.Time
	ServiceUpdatedAt                              time.Time
}

func (q *Queries) GetAccessGrant(ctx context.Context, id int32) (*GetAccessGrantRow, error) {
	row := q.queryRow(ctx, q.getAccessGrantStmt, getAccessGrant, id)
	var i GetAccessGrantRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.RevokedAt,
		&i.AccessRequestIncomingID,
		&i.AccessRequestIncomingID_2,
		&i.AccessRequestIncomingServiceID,
		&i.AccessRequestIncomingOrganizationName,
		&i.AccessRequestIncomingOrganizationSerialNumber,
		&i.AccessRequestIncomingState,
		&i.AccessRequestIncomingCreatedAt,
		&i.AccessRequestIncomingUpdatedAt,
		&i.AccessRequestIncomingPublicKeyFingerprint,
		&i.AccessRequestIncomingPublicKeyPem,
		&i.ServiceID,
		&i.ServiceName,
		&i.ServiceEndpointUrl,
		&i.ServiceDocumentationUrl,
		&i.ServiceApiSpecificationUrl,
		&i.ServiceInternal,
		&i.ServiceTechSupportContact,
		&i.ServicePublicSupportContact,
		&i.ServiceOneTimeCosts,
		&i.ServiceMonthlyCosts,
		&i.ServiceRequestCosts,
		&i.ServiceCreatedAt,
		&i.ServiceUpdatedAt,
	)
	return &i, err
}

const getLatestAccessGrantForService = `-- name: GetLatestAccessGrantForService :one
select
    access_grants.id,
    access_grants.created_at,
    access_grants.revoked_at,
    access_requests_incoming.id as access_request_incoming_id,
    access_requests_incoming.service_id as access_request_incoming_service_id,
    access_requests_incoming.organization_name as access_request_incoming_organization_name,
    access_requests_incoming.organization_serial_number as access_request_incoming_organization_serial_number,
    access_requests_incoming.state as access_request_incoming_state,
    access_requests_incoming.created_at as access_request_incoming_created_at,
    access_requests_incoming.updated_at as access_request_incoming_updated_at,
    access_requests_incoming.public_key_fingerprint as access_request_incoming_public_key_fingerprint,
    access_requests_incoming.public_key_pem as access_request_incoming_public_key_pem,
    services.id as service_id,
    services.name as service_name,
    services.endpoint_url as service_endpoint_url,
    services.documentation_url as service_documentation_url,
    services.api_specification_url as service_api_specification_url,
    services.internal as service_internal,
    services.tech_support_contact as service_tech_support_contact,
    services.public_support_contact as service_public_support_contact,
    services.one_time_costs as service_one_time_costs,
    services.monthly_costs as service_monthly_costs,
    services.request_costs as service_request_costs,
    services.created_at as service_created_at,
    services.updated_at as service_updated_at
from
    nlx_management.access_grants
        join nlx_management.access_requests_incoming on (
            access_requests_incoming.id = access_grants.access_request_incoming_id and
            access_requests_incoming.organization_serial_number = $1 and
            access_requests_incoming.public_key_fingerprint = $2
        )
        join nlx_management.services on (
            services.id = access_requests_incoming.service_id and
            services.name = $3::text
        )
order by
    access_grants.created_at desc
limit 1
`

type GetLatestAccessGrantForServiceParams struct {
	OrganizationSerialNumber string
	PublicKeyFingerprint     string
	ServiceName              string
}

type GetLatestAccessGrantForServiceRow struct {
	ID                                            int32
	CreatedAt                                     time.Time
	RevokedAt                                     sql.NullTime
	AccessRequestIncomingID                       int32
	AccessRequestIncomingServiceID                int32
	AccessRequestIncomingOrganizationName         string
	AccessRequestIncomingOrganizationSerialNumber string
	AccessRequestIncomingState                    string
	AccessRequestIncomingCreatedAt                time.Time
	AccessRequestIncomingUpdatedAt                time.Time
	AccessRequestIncomingPublicKeyFingerprint     string
	AccessRequestIncomingPublicKeyPem             sql.NullString
	ServiceID                                     int32
	ServiceName                                   string
	ServiceEndpointUrl                            string
	ServiceDocumentationUrl                       string
	ServiceApiSpecificationUrl                    string
	ServiceInternal                               bool
	ServiceTechSupportContact                     string
	ServicePublicSupportContact                   string
	ServiceOneTimeCosts                           int32
	ServiceMonthlyCosts                           int32
	ServiceRequestCosts                           int32
	ServiceCreatedAt                              time.Time
	ServiceUpdatedAt                              time.Time
}

func (q *Queries) GetLatestAccessGrantForService(ctx context.Context, arg *GetLatestAccessGrantForServiceParams) (*GetLatestAccessGrantForServiceRow, error) {
	row := q.queryRow(ctx, q.getLatestAccessGrantForServiceStmt, getLatestAccessGrantForService, arg.OrganizationSerialNumber, arg.PublicKeyFingerprint, arg.ServiceName)
	var i GetLatestAccessGrantForServiceRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.RevokedAt,
		&i.AccessRequestIncomingID,
		&i.AccessRequestIncomingServiceID,
		&i.AccessRequestIncomingOrganizationName,
		&i.AccessRequestIncomingOrganizationSerialNumber,
		&i.AccessRequestIncomingState,
		&i.AccessRequestIncomingCreatedAt,
		&i.AccessRequestIncomingUpdatedAt,
		&i.AccessRequestIncomingPublicKeyFingerprint,
		&i.AccessRequestIncomingPublicKeyPem,
		&i.ServiceID,
		&i.ServiceName,
		&i.ServiceEndpointUrl,
		&i.ServiceDocumentationUrl,
		&i.ServiceApiSpecificationUrl,
		&i.ServiceInternal,
		&i.ServiceTechSupportContact,
		&i.ServicePublicSupportContact,
		&i.ServiceOneTimeCosts,
		&i.ServiceMonthlyCosts,
		&i.ServiceRequestCosts,
		&i.ServiceCreatedAt,
		&i.ServiceUpdatedAt,
	)
	return &i, err
}

const getSettings = `-- name: GetSettings :one

select
    settings.organization_email_address,
    inways.name
from
    nlx_management.settings
        left join nlx_management.inways on (
            settings.inway_id = inways.id
        )
order by
    settings.id
limit 1
`

type GetSettingsRow struct {
	OrganizationEmailAddress sql.NullString
	Name                     sql.NullString
}

// Copyright © VNG Realisatie 2022
// Licensed under the EUPL
func (q *Queries) GetSettings(ctx context.Context) (*GetSettingsRow, error) {
	row := q.queryRow(ctx, q.getSettingsStmt, getSettings)
	var i GetSettingsRow
	err := row.Scan(&i.OrganizationEmailAddress, &i.Name)
	return &i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, email, password, users_roles.role_code
from
    nlx_management.users
left join nlx_management.users_roles on users.id = users_roles.user_id
where email = $1
limit 1
`

type GetUserByEmailRow struct {
	ID       int32
	Email    string
	Password sql.NullString
	RoleCode sql.NullString
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (*GetUserByEmailRow, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.RoleCode,
	)
	return &i, err
}

const listAccessGrantsForService = `-- name: ListAccessGrantsForService :many
select
    access_grants.id,
    access_grants.created_at,
    access_grants.revoked_at,
    access_grants.access_request_incoming_id,
    access_requests_incoming.service_id as access_request_incoming_service_id,
    access_requests_incoming.organization_name as access_request_incoming_organization_name,
    access_requests_incoming.organization_serial_number as access_request_incoming_organization_serial_number,
    access_requests_incoming.state as access_request_incoming_state,
    access_requests_incoming.created_at as access_request_incoming_created_at,
    access_requests_incoming.updated_at as access_request_incoming_updated_at,
    access_requests_incoming.public_key_fingerprint as access_request_incoming_public_key_fingerprint,
    access_requests_incoming.public_key_pem as access_request_incoming_public_key_pem,
    services.id as service_id,
    services.name as service_name,
    services.endpoint_url as service_endpoint_url,
    services.documentation_url as service_documentation_url,
    services.api_specification_url as service_api_specification_url,
    services.internal as service_internal,
    services.tech_support_contact as service_tech_support_contact,
    services.public_support_contact as service_public_support_contact,
    services.one_time_costs as service_one_time_costs,
    services.monthly_costs as service_monthly_costs,
    services.request_costs as service_request_costs,
    services.created_at as service_created_at,
    services.updated_at as service_updated_at
from
    nlx_management.access_grants
        join nlx_management.access_requests_incoming on (
            access_grants.access_request_incoming_id = access_requests_incoming.id
        )
        join nlx_management.services on (
            access_requests_incoming.service_id = services.id and
            services.name = $1
        )
`

type ListAccessGrantsForServiceRow struct {
	ID                                            int32
	CreatedAt                                     time.Time
	RevokedAt                                     sql.NullTime
	AccessRequestIncomingID                       int32
	AccessRequestIncomingServiceID                int32
	AccessRequestIncomingOrganizationName         string
	AccessRequestIncomingOrganizationSerialNumber string
	AccessRequestIncomingState                    string
	AccessRequestIncomingCreatedAt                time.Time
	AccessRequestIncomingUpdatedAt                time.Time
	AccessRequestIncomingPublicKeyFingerprint     string
	AccessRequestIncomingPublicKeyPem             sql.NullString
	ServiceID                                     int32
	ServiceName                                   string
	ServiceEndpointUrl                            string
	ServiceDocumentationUrl                       string
	ServiceApiSpecificationUrl                    string
	ServiceInternal                               bool
	ServiceTechSupportContact                     string
	ServicePublicSupportContact                   string
	ServiceOneTimeCosts                           int32
	ServiceMonthlyCosts                           int32
	ServiceRequestCosts                           int32
	ServiceCreatedAt                              time.Time
	ServiceUpdatedAt                              time.Time
}

func (q *Queries) ListAccessGrantsForService(ctx context.Context, name string) ([]*ListAccessGrantsForServiceRow, error) {
	rows, err := q.query(ctx, q.listAccessGrantsForServiceStmt, listAccessGrantsForService, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListAccessGrantsForServiceRow{}
	for rows.Next() {
		var i ListAccessGrantsForServiceRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.RevokedAt,
			&i.AccessRequestIncomingID,
			&i.AccessRequestIncomingServiceID,
			&i.AccessRequestIncomingOrganizationName,
			&i.AccessRequestIncomingOrganizationSerialNumber,
			&i.AccessRequestIncomingState,
			&i.AccessRequestIncomingCreatedAt,
			&i.AccessRequestIncomingUpdatedAt,
			&i.AccessRequestIncomingPublicKeyFingerprint,
			&i.AccessRequestIncomingPublicKeyPem,
			&i.ServiceID,
			&i.ServiceName,
			&i.ServiceEndpointUrl,
			&i.ServiceDocumentationUrl,
			&i.ServiceApiSpecificationUrl,
			&i.ServiceInternal,
			&i.ServiceTechSupportContact,
			&i.ServicePublicSupportContact,
			&i.ServiceOneTimeCosts,
			&i.ServiceMonthlyCosts,
			&i.ServiceRequestCosts,
			&i.ServiceCreatedAt,
			&i.ServiceUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllLatestOutgoingAccessRequests = `-- name: ListAllLatestOutgoingAccessRequests :many
select
    distinct on (
        public_key_fingerprint,
        service_name,
        organization_serial_number
    ) access_requests_outgoing.id,
      access_requests_outgoing.organization_name,
      access_requests_outgoing.organization_serial_number,
      access_requests_outgoing.service_name,
      access_requests_outgoing.state,
      access_requests_outgoing.reference_id,
      access_requests_outgoing.error_code,
      access_requests_outgoing.error_cause,
      access_requests_outgoing.public_key_fingerprint,
      access_requests_outgoing.public_key_pem,
      access_requests_outgoing.created_at,
      access_requests_outgoing.updated_at
from
    nlx_management.access_requests_outgoing
order by
    organization_serial_number,
    public_key_fingerprint,
    service_name,
    created_at
desc
`

type ListAllLatestOutgoingAccessRequestsRow struct {
	ID                       int32
	OrganizationName         string
	OrganizationSerialNumber string
	ServiceName              string
	State                    string
	ReferenceID              int32
	ErrorCode                int32
	ErrorCause               sql.NullString
	PublicKeyFingerprint     string
	PublicKeyPem             sql.NullString
	CreatedAt                time.Time
	UpdatedAt                time.Time
}

func (q *Queries) ListAllLatestOutgoingAccessRequests(ctx context.Context) ([]*ListAllLatestOutgoingAccessRequestsRow, error) {
	rows, err := q.query(ctx, q.listAllLatestOutgoingAccessRequestsStmt, listAllLatestOutgoingAccessRequests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListAllLatestOutgoingAccessRequestsRow{}
	for rows.Next() {
		var i ListAllLatestOutgoingAccessRequestsRow
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationName,
			&i.OrganizationSerialNumber,
			&i.ServiceName,
			&i.State,
			&i.ReferenceID,
			&i.ErrorCode,
			&i.ErrorCause,
			&i.PublicKeyFingerprint,
			&i.PublicKeyPem,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPermissions = `-- name: ListPermissions :many
select code from nlx_management.permissions
`

func (q *Queries) ListPermissions(ctx context.Context) ([]string, error) {
	rows, err := q.query(ctx, q.listPermissionsStmt, listPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var code string
		if err := rows.Scan(&code); err != nil {
			return nil, err
		}
		items = append(items, code)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPermissionsForRole = `-- name: ListPermissionsForRole :many
select permission_code
from
    nlx_management.permissions_roles
where role_code = $1
`

func (q *Queries) ListPermissionsForRole(ctx context.Context, roleCode string) ([]string, error) {
	rows, err := q.query(ctx, q.listPermissionsForRoleStmt, listPermissionsForRole, roleCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var permission_code string
		if err := rows.Scan(&permission_code); err != nil {
			return nil, err
		}
		items = append(items, permission_code)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRolesForUser = `-- name: ListRolesForUser :many
select
    role_code
from
    nlx_management.users_roles
where user_id = $1
`

func (q *Queries) ListRolesForUser(ctx context.Context, userID int32) ([]string, error) {
	rows, err := q.query(ctx, q.listRolesForUserStmt, listRolesForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var role_code string
		if err := rows.Scan(&role_code); err != nil {
			return nil, err
		}
		items = append(items, role_code)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTermsOfService = `-- name: ListTermsOfService :many
select
    id, username, created_at
from
    nlx_management.terms_of_service
`

func (q *Queries) ListTermsOfService(ctx context.Context) ([]*NlxManagementTermsOfService, error) {
	rows, err := q.query(ctx, q.listTermsOfServiceStmt, listTermsOfService)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*NlxManagementTermsOfService{}
	for rows.Next() {
		var i NlxManagementTermsOfService
		if err := rows.Scan(&i.ID, &i.Username, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeAccessGrant = `-- name: RevokeAccessGrant :exec
update
    nlx_management.access_grants
set
    revoked_at = $2
where
    access_grants.id = $1
`

type RevokeAccessGrantParams struct {
	ID        int32
	RevokedAt sql.NullTime
}

func (q *Queries) RevokeAccessGrant(ctx context.Context, arg *RevokeAccessGrantParams) error {
	_, err := q.exec(ctx, q.revokeAccessGrantStmt, revokeAccessGrant, arg.ID, arg.RevokedAt)
	return err
}

const updateIncomingAccessRequest = `-- name: UpdateIncomingAccessRequest :exec
update
    nlx_management.access_requests_incoming
set
    state = $2,
    updated_at = $3
where
    id = $1
`

type UpdateIncomingAccessRequestParams struct {
	ID        int32
	State     string
	UpdatedAt time.Time
}

func (q *Queries) UpdateIncomingAccessRequest(ctx context.Context, arg *UpdateIncomingAccessRequestParams) error {
	_, err := q.exec(ctx, q.updateIncomingAccessRequestStmt, updateIncomingAccessRequest, arg.ID, arg.State, arg.UpdatedAt)
	return err
}

const updateSettings = `-- name: UpdateSettings :exec
update
    nlx_management.settings
set
        organization_email_address = $1::text,
        inway_id = (
            select
                id
            from
                nlx_management.inways
            where
                    inways.name = $2::text
        )
`

type UpdateSettingsParams struct {
	OrganizationEmailAddress string
	InwayName                string
}

func (q *Queries) UpdateSettings(ctx context.Context, arg *UpdateSettingsParams) error {
	_, err := q.exec(ctx, q.updateSettingsStmt, updateSettings, arg.OrganizationEmailAddress, arg.InwayName)
	return err
}

const upsertInway = `-- name: UpsertInway :exec
insert into nlx_management.inways
    (name, self_address, version, hostname, ip_address, created_at, updated_at)
values
    ($1, $2, $3, $4, $5, $6, $7)
    on conflict
on constraint inways_name_key
    do update
           set
                self_address    = excluded.self_address,
                version         = excluded.version,
                hostname        = excluded.hostname,
                ip_address      = excluded.ip_address,
                updated_at      = excluded.updated_at
`

type UpsertInwayParams struct {
	Name        string
	SelfAddress string
	Version     string
	Hostname    string
	IpAddress   string
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) UpsertInway(ctx context.Context, arg *UpsertInwayParams) error {
	_, err := q.exec(ctx, q.upsertInwayStmt, upsertInway,
		arg.Name,
		arg.SelfAddress,
		arg.Version,
		arg.Hostname,
		arg.IpAddress,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
