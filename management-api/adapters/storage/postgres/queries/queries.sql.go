// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: queries.sql

package queries

import (
	"context"
	"database/sql"
	"time"
)

const createAccessGrant = `-- name: CreateAccessGrant :one
insert into
    nlx_management.access_grants
    (
        access_request_incoming_id,
        created_at
    ) values (
          $1,
          $2
    )
returning id
`

type CreateAccessGrantParams struct {
	AccessRequestIncomingID int32
	CreatedAt               time.Time
}

func (q *Queries) CreateAccessGrant(ctx context.Context, arg *CreateAccessGrantParams) (int32, error) {
	row := q.queryRow(ctx, q.createAccessGrantStmt, createAccessGrant, arg.AccessRequestIncomingID, arg.CreatedAt)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const doesInwayExistByName = `-- name: DoesInwayExistByName :one
select
        count(*)>0 as inway_exits
from
    nlx_management.inways
where
    inways.name = $1::text
`

func (q *Queries) DoesInwayExistByName(ctx context.Context, inwayName string) (bool, error) {
	row := q.queryRow(ctx, q.doesInwayExistByNameStmt, doesInwayExistByName, inwayName)
	var inway_exits bool
	err := row.Scan(&inway_exits)
	return inway_exits, err
}

const getSettings = `-- name: GetSettings :one
select
    settings.organization_email_address,
    inways.name
from
    nlx_management.settings
        left join nlx_management.inways on (
            settings.inway_id = inways.id
        )
order by
    settings.id
limit 1
`

type GetSettingsRow struct {
	OrganizationEmailAddress sql.NullString
	Name                     sql.NullString
}

func (q *Queries) GetSettings(ctx context.Context) (*GetSettingsRow, error) {
	row := q.queryRow(ctx, q.getSettingsStmt, getSettings)
	var i GetSettingsRow
	err := row.Scan(&i.OrganizationEmailAddress, &i.Name)
	return &i, err
}

const updateSettings = `-- name: UpdateSettings :exec
update
    nlx_management.settings
set
        organization_email_address = $1::text,
        inway_id = (
            select
                id
            from
                nlx_management.inways
            where
                    inways.name = $2::text
        )
`

type UpdateSettingsParams struct {
	OrganizationEmailAddress string
	InwayName                string
}

func (q *Queries) UpdateSettings(ctx context.Context, arg *UpdateSettingsParams) error {
	_, err := q.exec(ctx, q.updateSettingsStmt, updateSettings, arg.OrganizationEmailAddress, arg.InwayName)
	return err
}
