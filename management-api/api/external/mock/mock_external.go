// Code generated by MockGen. DO NOT EDIT.
// Source: api/external/external_grpc.pb.go

// Package mock_external is a generated GoMock package.
package mock_external

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	api "go.nlx.io/nlx/management-api/api"
	external "go.nlx.io/nlx/management-api/api/external"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockAccessRequestServiceClient is a mock of AccessRequestServiceClient interface
type MockAccessRequestServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAccessRequestServiceClientMockRecorder
}

// MockAccessRequestServiceClientMockRecorder is the mock recorder for MockAccessRequestServiceClient
type MockAccessRequestServiceClientMockRecorder struct {
	mock *MockAccessRequestServiceClient
}

// NewMockAccessRequestServiceClient creates a new mock instance
func NewMockAccessRequestServiceClient(ctrl *gomock.Controller) *MockAccessRequestServiceClient {
	mock := &MockAccessRequestServiceClient{ctrl: ctrl}
	mock.recorder = &MockAccessRequestServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccessRequestServiceClient) EXPECT() *MockAccessRequestServiceClientMockRecorder {
	return m.recorder
}

// RequestAccess mocks base method
func (m *MockAccessRequestServiceClient) RequestAccess(ctx context.Context, in *external.RequestAccessRequest, opts ...grpc.CallOption) (*external.RequestAccessResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequestAccess", varargs...)
	ret0, _ := ret[0].(*external.RequestAccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestAccess indicates an expected call of RequestAccess
func (mr *MockAccessRequestServiceClientMockRecorder) RequestAccess(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestAccess", reflect.TypeOf((*MockAccessRequestServiceClient)(nil).RequestAccess), varargs...)
}

// GetAccessRequestState mocks base method
func (m *MockAccessRequestServiceClient) GetAccessRequestState(ctx context.Context, in *external.GetAccessRequestStateRequest, opts ...grpc.CallOption) (*external.GetAccessRequestStateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccessRequestState", varargs...)
	ret0, _ := ret[0].(*external.GetAccessRequestStateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessRequestState indicates an expected call of GetAccessRequestState
func (mr *MockAccessRequestServiceClientMockRecorder) GetAccessRequestState(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessRequestState", reflect.TypeOf((*MockAccessRequestServiceClient)(nil).GetAccessRequestState), varargs...)
}

// GetAccessProof mocks base method
func (m *MockAccessRequestServiceClient) GetAccessProof(ctx context.Context, in *external.GetAccessProofRequest, opts ...grpc.CallOption) (*api.AccessProof, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccessProof", varargs...)
	ret0, _ := ret[0].(*api.AccessProof)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessProof indicates an expected call of GetAccessProof
func (mr *MockAccessRequestServiceClientMockRecorder) GetAccessProof(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessProof", reflect.TypeOf((*MockAccessRequestServiceClient)(nil).GetAccessProof), varargs...)
}

// MockAccessRequestServiceServer is a mock of AccessRequestServiceServer interface
type MockAccessRequestServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockAccessRequestServiceServerMockRecorder
}

// MockAccessRequestServiceServerMockRecorder is the mock recorder for MockAccessRequestServiceServer
type MockAccessRequestServiceServerMockRecorder struct {
	mock *MockAccessRequestServiceServer
}

// NewMockAccessRequestServiceServer creates a new mock instance
func NewMockAccessRequestServiceServer(ctrl *gomock.Controller) *MockAccessRequestServiceServer {
	mock := &MockAccessRequestServiceServer{ctrl: ctrl}
	mock.recorder = &MockAccessRequestServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccessRequestServiceServer) EXPECT() *MockAccessRequestServiceServerMockRecorder {
	return m.recorder
}

// RequestAccess mocks base method
func (m *MockAccessRequestServiceServer) RequestAccess(arg0 context.Context, arg1 *external.RequestAccessRequest) (*external.RequestAccessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestAccess", arg0, arg1)
	ret0, _ := ret[0].(*external.RequestAccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestAccess indicates an expected call of RequestAccess
func (mr *MockAccessRequestServiceServerMockRecorder) RequestAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestAccess", reflect.TypeOf((*MockAccessRequestServiceServer)(nil).RequestAccess), arg0, arg1)
}

// GetAccessRequestState mocks base method
func (m *MockAccessRequestServiceServer) GetAccessRequestState(arg0 context.Context, arg1 *external.GetAccessRequestStateRequest) (*external.GetAccessRequestStateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessRequestState", arg0, arg1)
	ret0, _ := ret[0].(*external.GetAccessRequestStateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessRequestState indicates an expected call of GetAccessRequestState
func (mr *MockAccessRequestServiceServerMockRecorder) GetAccessRequestState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessRequestState", reflect.TypeOf((*MockAccessRequestServiceServer)(nil).GetAccessRequestState), arg0, arg1)
}

// GetAccessProof mocks base method
func (m *MockAccessRequestServiceServer) GetAccessProof(arg0 context.Context, arg1 *external.GetAccessProofRequest) (*api.AccessProof, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessProof", arg0, arg1)
	ret0, _ := ret[0].(*api.AccessProof)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessProof indicates an expected call of GetAccessProof
func (mr *MockAccessRequestServiceServerMockRecorder) GetAccessProof(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessProof", reflect.TypeOf((*MockAccessRequestServiceServer)(nil).GetAccessProof), arg0, arg1)
}

// mustEmbedUnimplementedAccessRequestServiceServer mocks base method
func (m *MockAccessRequestServiceServer) mustEmbedUnimplementedAccessRequestServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAccessRequestServiceServer")
}

// mustEmbedUnimplementedAccessRequestServiceServer indicates an expected call of mustEmbedUnimplementedAccessRequestServiceServer
func (mr *MockAccessRequestServiceServerMockRecorder) mustEmbedUnimplementedAccessRequestServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAccessRequestServiceServer", reflect.TypeOf((*MockAccessRequestServiceServer)(nil).mustEmbedUnimplementedAccessRequestServiceServer))
}

// MockUnsafeAccessRequestServiceServer is a mock of UnsafeAccessRequestServiceServer interface
type MockUnsafeAccessRequestServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAccessRequestServiceServerMockRecorder
}

// MockUnsafeAccessRequestServiceServerMockRecorder is the mock recorder for MockUnsafeAccessRequestServiceServer
type MockUnsafeAccessRequestServiceServerMockRecorder struct {
	mock *MockUnsafeAccessRequestServiceServer
}

// NewMockUnsafeAccessRequestServiceServer creates a new mock instance
func NewMockUnsafeAccessRequestServiceServer(ctrl *gomock.Controller) *MockUnsafeAccessRequestServiceServer {
	mock := &MockUnsafeAccessRequestServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAccessRequestServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUnsafeAccessRequestServiceServer) EXPECT() *MockUnsafeAccessRequestServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAccessRequestServiceServer mocks base method
func (m *MockUnsafeAccessRequestServiceServer) mustEmbedUnimplementedAccessRequestServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAccessRequestServiceServer")
}

// mustEmbedUnimplementedAccessRequestServiceServer indicates an expected call of mustEmbedUnimplementedAccessRequestServiceServer
func (mr *MockUnsafeAccessRequestServiceServerMockRecorder) mustEmbedUnimplementedAccessRequestServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAccessRequestServiceServer", reflect.TypeOf((*MockUnsafeAccessRequestServiceServer)(nil).mustEmbedUnimplementedAccessRequestServiceServer))
}
