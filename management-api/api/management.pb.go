// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: management.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AccessRequestState int32

const (
	AccessRequestState_UNSPECIFIED AccessRequestState = 0
	AccessRequestState_FAILED      AccessRequestState = 1
	AccessRequestState_CREATED     AccessRequestState = 2
	AccessRequestState_RECEIVED    AccessRequestState = 3
	AccessRequestState_APPROVED    AccessRequestState = 4
)

var AccessRequestState_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "FAILED",
	2: "CREATED",
	3: "RECEIVED",
	4: "APPROVED",
}

var AccessRequestState_value = map[string]int32{
	"UNSPECIFIED": 0,
	"FAILED":      1,
	"CREATED":     2,
	"RECEIVED":    3,
	"APPROVED":    4,
}

func (x AccessRequestState) String() string {
	return proto.EnumName(AccessRequestState_name, int32(x))
}

func (AccessRequestState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{0}
}

type DirectoryService_State int32

const (
	DirectoryService_unknown  DirectoryService_State = 0
	DirectoryService_up       DirectoryService_State = 1
	DirectoryService_down     DirectoryService_State = 2
	DirectoryService_degraded DirectoryService_State = 3
)

var DirectoryService_State_name = map[int32]string{
	0: "unknown",
	1: "up",
	2: "down",
	3: "degraded",
}

var DirectoryService_State_value = map[string]int32{
	"unknown":  0,
	"up":       1,
	"down":     2,
	"degraded": 3,
}

func (x DirectoryService_State) String() string {
	return proto.EnumName(DirectoryService_State_name, int32(x))
}

func (DirectoryService_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{24, 0}
}

type Service struct {
	Name                  string                         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	EndpointURL           string                         `protobuf:"bytes,2,opt,name=endpointURL,proto3" json:"endpointURL,omitempty"`
	DocumentationURL      string                         `protobuf:"bytes,3,opt,name=documentationURL,proto3" json:"documentationURL,omitempty"`
	ApiSpecificationURL   string                         `protobuf:"bytes,4,opt,name=apiSpecificationURL,proto3" json:"apiSpecificationURL,omitempty"`
	Internal              bool                           `protobuf:"varint,5,opt,name=internal,proto3" json:"internal,omitempty"`
	TechSupportContact    string                         `protobuf:"bytes,6,opt,name=techSupportContact,proto3" json:"techSupportContact,omitempty"`
	PublicSupportContact  string                         `protobuf:"bytes,7,opt,name=publicSupportContact,proto3" json:"publicSupportContact,omitempty"`
	AuthorizationSettings *Service_AuthorizationSettings `protobuf:"bytes,8,opt,name=authorizationSettings,proto3" json:"authorizationSettings,omitempty"`
	Inways                []string                       `protobuf:"bytes,9,rep,name=inways,proto3" json:"inways,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                       `json:"-"`
	XXX_unrecognized      []byte                         `json:"-"`
	XXX_sizecache         int32                          `json:"-"`
}

func (m *Service) Reset()         { *m = Service{} }
func (m *Service) String() string { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()    {}
func (*Service) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{0}
}
func (m *Service) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Service) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Service.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Service) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service.Merge(m, src)
}
func (m *Service) XXX_Size() int {
	return m.Size()
}
func (m *Service) XXX_DiscardUnknown() {
	xxx_messageInfo_Service.DiscardUnknown(m)
}

var xxx_messageInfo_Service proto.InternalMessageInfo

type Service_AuthorizationSettings struct {
	Mode                 string                                         `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
	Authorizations       []*Service_AuthorizationSettings_Authorization `protobuf:"bytes,2,rep,name=authorizations,proto3" json:"authorizations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                       `json:"-"`
	XXX_unrecognized     []byte                                         `json:"-"`
	XXX_sizecache        int32                                          `json:"-"`
}

func (m *Service_AuthorizationSettings) Reset()         { *m = Service_AuthorizationSettings{} }
func (m *Service_AuthorizationSettings) String() string { return proto.CompactTextString(m) }
func (*Service_AuthorizationSettings) ProtoMessage()    {}
func (*Service_AuthorizationSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{0, 0}
}
func (m *Service_AuthorizationSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Service_AuthorizationSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Service_AuthorizationSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Service_AuthorizationSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service_AuthorizationSettings.Merge(m, src)
}
func (m *Service_AuthorizationSettings) XXX_Size() int {
	return m.Size()
}
func (m *Service_AuthorizationSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_Service_AuthorizationSettings.DiscardUnknown(m)
}

var xxx_messageInfo_Service_AuthorizationSettings proto.InternalMessageInfo

type Service_AuthorizationSettings_Authorization struct {
	OrganizationName     string   `protobuf:"bytes,1,opt,name=organizationName,proto3" json:"organizationName,omitempty"`
	PublicKeyHash        string   `protobuf:"bytes,2,opt,name=publicKeyHash,proto3" json:"publicKeyHash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Service_AuthorizationSettings_Authorization) Reset() {
	*m = Service_AuthorizationSettings_Authorization{}
}
func (m *Service_AuthorizationSettings_Authorization) String() string {
	return proto.CompactTextString(m)
}
func (*Service_AuthorizationSettings_Authorization) ProtoMessage() {}
func (*Service_AuthorizationSettings_Authorization) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{0, 0, 0}
}
func (m *Service_AuthorizationSettings_Authorization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Service_AuthorizationSettings_Authorization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Service_AuthorizationSettings_Authorization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Service_AuthorizationSettings_Authorization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service_AuthorizationSettings_Authorization.Merge(m, src)
}
func (m *Service_AuthorizationSettings_Authorization) XXX_Size() int {
	return m.Size()
}
func (m *Service_AuthorizationSettings_Authorization) XXX_DiscardUnknown() {
	xxx_messageInfo_Service_AuthorizationSettings_Authorization.DiscardUnknown(m)
}

var xxx_messageInfo_Service_AuthorizationSettings_Authorization proto.InternalMessageInfo

type Inway struct {
	Name                 string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version              string           `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Hostname             string           `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	SelfAddress          string           `protobuf:"bytes,4,opt,name=selfAddress,proto3" json:"selfAddress,omitempty"`
	Services             []*Inway_Service `protobuf:"bytes,5,rep,name=services,proto3" json:"services,omitempty"`
	IpAddress            string           `protobuf:"bytes,6,opt,name=ipAddress,proto3" json:"ipAddress,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Inway) Reset()         { *m = Inway{} }
func (m *Inway) String() string { return proto.CompactTextString(m) }
func (*Inway) ProtoMessage()    {}
func (*Inway) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{1}
}
func (m *Inway) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Inway) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Inway.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Inway) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Inway.Merge(m, src)
}
func (m *Inway) XXX_Size() int {
	return m.Size()
}
func (m *Inway) XXX_DiscardUnknown() {
	xxx_messageInfo_Inway.DiscardUnknown(m)
}

var xxx_messageInfo_Inway proto.InternalMessageInfo

type Inway_Service struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Inway_Service) Reset()         { *m = Inway_Service{} }
func (m *Inway_Service) String() string { return proto.CompactTextString(m) }
func (*Inway_Service) ProtoMessage()    {}
func (*Inway_Service) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{1, 0}
}
func (m *Inway_Service) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Inway_Service) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Inway_Service.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Inway_Service) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Inway_Service.Merge(m, src)
}
func (m *Inway_Service) XXX_Size() int {
	return m.Size()
}
func (m *Inway_Service) XXX_DiscardUnknown() {
	xxx_messageInfo_Inway_Service.DiscardUnknown(m)
}

var xxx_messageInfo_Inway_Service proto.InternalMessageInfo

type ListServicesRequest struct {
	InwayName            string   `protobuf:"bytes,1,opt,name=inwayName,proto3" json:"inwayName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListServicesRequest) Reset()         { *m = ListServicesRequest{} }
func (m *ListServicesRequest) String() string { return proto.CompactTextString(m) }
func (*ListServicesRequest) ProtoMessage()    {}
func (*ListServicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{2}
}
func (m *ListServicesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListServicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListServicesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListServicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServicesRequest.Merge(m, src)
}
func (m *ListServicesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListServicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListServicesRequest proto.InternalMessageInfo

type ListServicesResponse struct {
	Services             []*Service `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ListServicesResponse) Reset()         { *m = ListServicesResponse{} }
func (m *ListServicesResponse) String() string { return proto.CompactTextString(m) }
func (*ListServicesResponse) ProtoMessage()    {}
func (*ListServicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{3}
}
func (m *ListServicesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListServicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListServicesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListServicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServicesResponse.Merge(m, src)
}
func (m *ListServicesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListServicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListServicesResponse proto.InternalMessageInfo

type GetServiceRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetServiceRequest) Reset()         { *m = GetServiceRequest{} }
func (m *GetServiceRequest) String() string { return proto.CompactTextString(m) }
func (*GetServiceRequest) ProtoMessage()    {}
func (*GetServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{4}
}
func (m *GetServiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetServiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServiceRequest.Merge(m, src)
}
func (m *GetServiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetServiceRequest proto.InternalMessageInfo

type UpdateServiceRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Service              *Service `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateServiceRequest) Reset()         { *m = UpdateServiceRequest{} }
func (m *UpdateServiceRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateServiceRequest) ProtoMessage()    {}
func (*UpdateServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{5}
}
func (m *UpdateServiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateServiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateServiceRequest.Merge(m, src)
}
func (m *UpdateServiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateServiceRequest proto.InternalMessageInfo

type DeleteServiceRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteServiceRequest) Reset()         { *m = DeleteServiceRequest{} }
func (m *DeleteServiceRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteServiceRequest) ProtoMessage()    {}
func (*DeleteServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{6}
}
func (m *DeleteServiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteServiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteServiceRequest.Merge(m, src)
}
func (m *DeleteServiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteServiceRequest proto.InternalMessageInfo

type ListInwaysRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListInwaysRequest) Reset()         { *m = ListInwaysRequest{} }
func (m *ListInwaysRequest) String() string { return proto.CompactTextString(m) }
func (*ListInwaysRequest) ProtoMessage()    {}
func (*ListInwaysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{7}
}
func (m *ListInwaysRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListInwaysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListInwaysRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListInwaysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListInwaysRequest.Merge(m, src)
}
func (m *ListInwaysRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListInwaysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListInwaysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListInwaysRequest proto.InternalMessageInfo

type ListInwaysResponse struct {
	Inways               []*Inway `protobuf:"bytes,1,rep,name=inways,proto3" json:"inways,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListInwaysResponse) Reset()         { *m = ListInwaysResponse{} }
func (m *ListInwaysResponse) String() string { return proto.CompactTextString(m) }
func (*ListInwaysResponse) ProtoMessage()    {}
func (*ListInwaysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{8}
}
func (m *ListInwaysResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListInwaysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListInwaysResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListInwaysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListInwaysResponse.Merge(m, src)
}
func (m *ListInwaysResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListInwaysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListInwaysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListInwaysResponse proto.InternalMessageInfo

type GetInwayRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetInwayRequest) Reset()         { *m = GetInwayRequest{} }
func (m *GetInwayRequest) String() string { return proto.CompactTextString(m) }
func (*GetInwayRequest) ProtoMessage()    {}
func (*GetInwayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{9}
}
func (m *GetInwayRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInwayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInwayRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetInwayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInwayRequest.Merge(m, src)
}
func (m *GetInwayRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetInwayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInwayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetInwayRequest proto.InternalMessageInfo

type UpdateInwayRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Inway                *Inway   `protobuf:"bytes,2,opt,name=inway,proto3" json:"inway,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateInwayRequest) Reset()         { *m = UpdateInwayRequest{} }
func (m *UpdateInwayRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateInwayRequest) ProtoMessage()    {}
func (*UpdateInwayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{10}
}
func (m *UpdateInwayRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateInwayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateInwayRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateInwayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateInwayRequest.Merge(m, src)
}
func (m *UpdateInwayRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateInwayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateInwayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateInwayRequest proto.InternalMessageInfo

type DeleteInwayRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteInwayRequest) Reset()         { *m = DeleteInwayRequest{} }
func (m *DeleteInwayRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteInwayRequest) ProtoMessage()    {}
func (*DeleteInwayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{11}
}
func (m *DeleteInwayRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteInwayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteInwayRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteInwayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteInwayRequest.Merge(m, src)
}
func (m *DeleteInwayRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteInwayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteInwayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteInwayRequest proto.InternalMessageInfo

type InsightConfiguration struct {
	IrmaServerURL        string   `protobuf:"bytes,1,opt,name=irmaServerURL,proto3" json:"irmaServerURL,omitempty"`
	InsightAPIURL        string   `protobuf:"bytes,2,opt,name=insightAPIURL,proto3" json:"insightAPIURL,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InsightConfiguration) Reset()         { *m = InsightConfiguration{} }
func (m *InsightConfiguration) String() string { return proto.CompactTextString(m) }
func (*InsightConfiguration) ProtoMessage()    {}
func (*InsightConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{12}
}
func (m *InsightConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InsightConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InsightConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InsightConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InsightConfiguration.Merge(m, src)
}
func (m *InsightConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *InsightConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_InsightConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_InsightConfiguration proto.InternalMessageInfo

type OutgoingAccessRequest struct {
	Id                   string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrganizationName     string             `protobuf:"bytes,2,opt,name=organizationName,proto3" json:"organizationName,omitempty"`
	ServiceName          string             `protobuf:"bytes,3,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	State                AccessRequestState `protobuf:"varint,4,opt,name=state,proto3,enum=nlx.management.AccessRequestState" json:"state,omitempty"`
	CreatedAt            *types.Timestamp   `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt            *types.Timestamp   `protobuf:"bytes,6,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *OutgoingAccessRequest) Reset()         { *m = OutgoingAccessRequest{} }
func (m *OutgoingAccessRequest) String() string { return proto.CompactTextString(m) }
func (*OutgoingAccessRequest) ProtoMessage()    {}
func (*OutgoingAccessRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{13}
}
func (m *OutgoingAccessRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutgoingAccessRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutgoingAccessRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutgoingAccessRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutgoingAccessRequest.Merge(m, src)
}
func (m *OutgoingAccessRequest) XXX_Size() int {
	return m.Size()
}
func (m *OutgoingAccessRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OutgoingAccessRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OutgoingAccessRequest proto.InternalMessageInfo

type IncomingAccessRequest struct {
	Id                   string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrganizationName     string             `protobuf:"bytes,2,opt,name=organizationName,proto3" json:"organizationName,omitempty"`
	ServiceName          string             `protobuf:"bytes,3,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	State                AccessRequestState `protobuf:"varint,4,opt,name=state,proto3,enum=nlx.management.AccessRequestState" json:"state,omitempty"`
	CreatedAt            *types.Timestamp   `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt            *types.Timestamp   `protobuf:"bytes,6,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *IncomingAccessRequest) Reset()         { *m = IncomingAccessRequest{} }
func (m *IncomingAccessRequest) String() string { return proto.CompactTextString(m) }
func (*IncomingAccessRequest) ProtoMessage()    {}
func (*IncomingAccessRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{14}
}
func (m *IncomingAccessRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncomingAccessRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncomingAccessRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncomingAccessRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncomingAccessRequest.Merge(m, src)
}
func (m *IncomingAccessRequest) XXX_Size() int {
	return m.Size()
}
func (m *IncomingAccessRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IncomingAccessRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IncomingAccessRequest proto.InternalMessageInfo

type ListIncomingAccessRequestsRequests struct {
	ServiceName          string   `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListIncomingAccessRequestsRequests) Reset()         { *m = ListIncomingAccessRequestsRequests{} }
func (m *ListIncomingAccessRequestsRequests) String() string { return proto.CompactTextString(m) }
func (*ListIncomingAccessRequestsRequests) ProtoMessage()    {}
func (*ListIncomingAccessRequestsRequests) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{15}
}
func (m *ListIncomingAccessRequestsRequests) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListIncomingAccessRequestsRequests) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListIncomingAccessRequestsRequests.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListIncomingAccessRequestsRequests) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListIncomingAccessRequestsRequests.Merge(m, src)
}
func (m *ListIncomingAccessRequestsRequests) XXX_Size() int {
	return m.Size()
}
func (m *ListIncomingAccessRequestsRequests) XXX_DiscardUnknown() {
	xxx_messageInfo_ListIncomingAccessRequestsRequests.DiscardUnknown(m)
}

var xxx_messageInfo_ListIncomingAccessRequestsRequests proto.InternalMessageInfo

type ListIncomingAccessRequestsResponse struct {
	AccessRequests       []*IncomingAccessRequest `protobuf:"bytes,1,rep,name=accessRequests,proto3" json:"accessRequests,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ListIncomingAccessRequestsResponse) Reset()         { *m = ListIncomingAccessRequestsResponse{} }
func (m *ListIncomingAccessRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*ListIncomingAccessRequestsResponse) ProtoMessage()    {}
func (*ListIncomingAccessRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{16}
}
func (m *ListIncomingAccessRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListIncomingAccessRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListIncomingAccessRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListIncomingAccessRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListIncomingAccessRequestsResponse.Merge(m, src)
}
func (m *ListIncomingAccessRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListIncomingAccessRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListIncomingAccessRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListIncomingAccessRequestsResponse proto.InternalMessageInfo

type ApproveIncomingAccessRequestRequest struct {
	ServiceName          string   `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	AccessRequestID      string   `protobuf:"bytes,2,opt,name=accessRequestID,proto3" json:"accessRequestID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApproveIncomingAccessRequestRequest) Reset()         { *m = ApproveIncomingAccessRequestRequest{} }
func (m *ApproveIncomingAccessRequestRequest) String() string { return proto.CompactTextString(m) }
func (*ApproveIncomingAccessRequestRequest) ProtoMessage()    {}
func (*ApproveIncomingAccessRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{17}
}
func (m *ApproveIncomingAccessRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApproveIncomingAccessRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApproveIncomingAccessRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApproveIncomingAccessRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApproveIncomingAccessRequestRequest.Merge(m, src)
}
func (m *ApproveIncomingAccessRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *ApproveIncomingAccessRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApproveIncomingAccessRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApproveIncomingAccessRequestRequest proto.InternalMessageInfo

type ListOutgoingAccessRequestsRequest struct {
	OrganizationName     string   `protobuf:"bytes,1,opt,name=organizationName,proto3" json:"organizationName,omitempty"`
	ServiceName          string   `protobuf:"bytes,2,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListOutgoingAccessRequestsRequest) Reset()         { *m = ListOutgoingAccessRequestsRequest{} }
func (m *ListOutgoingAccessRequestsRequest) String() string { return proto.CompactTextString(m) }
func (*ListOutgoingAccessRequestsRequest) ProtoMessage()    {}
func (*ListOutgoingAccessRequestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{18}
}
func (m *ListOutgoingAccessRequestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListOutgoingAccessRequestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListOutgoingAccessRequestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListOutgoingAccessRequestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOutgoingAccessRequestsRequest.Merge(m, src)
}
func (m *ListOutgoingAccessRequestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListOutgoingAccessRequestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOutgoingAccessRequestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListOutgoingAccessRequestsRequest proto.InternalMessageInfo

type ListOutgoingAccessRequestsResponse struct {
	AccessRequests       []*OutgoingAccessRequest `protobuf:"bytes,1,rep,name=accessRequests,proto3" json:"accessRequests,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ListOutgoingAccessRequestsResponse) Reset()         { *m = ListOutgoingAccessRequestsResponse{} }
func (m *ListOutgoingAccessRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*ListOutgoingAccessRequestsResponse) ProtoMessage()    {}
func (*ListOutgoingAccessRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{19}
}
func (m *ListOutgoingAccessRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListOutgoingAccessRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListOutgoingAccessRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListOutgoingAccessRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOutgoingAccessRequestsResponse.Merge(m, src)
}
func (m *ListOutgoingAccessRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListOutgoingAccessRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOutgoingAccessRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListOutgoingAccessRequestsResponse proto.InternalMessageInfo

type CreateAccessRequestRequest struct {
	OrganizationName     string   `protobuf:"bytes,1,opt,name=organizationName,proto3" json:"organizationName,omitempty"`
	ServiceName          string   `protobuf:"bytes,2,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateAccessRequestRequest) Reset()         { *m = CreateAccessRequestRequest{} }
func (m *CreateAccessRequestRequest) String() string { return proto.CompactTextString(m) }
func (*CreateAccessRequestRequest) ProtoMessage()    {}
func (*CreateAccessRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{20}
}
func (m *CreateAccessRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateAccessRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateAccessRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateAccessRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAccessRequestRequest.Merge(m, src)
}
func (m *CreateAccessRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateAccessRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAccessRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAccessRequestRequest proto.InternalMessageInfo

type DirectoryListServicesResponse struct {
	Services             []*DirectoryService `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *DirectoryListServicesResponse) Reset()         { *m = DirectoryListServicesResponse{} }
func (m *DirectoryListServicesResponse) String() string { return proto.CompactTextString(m) }
func (*DirectoryListServicesResponse) ProtoMessage()    {}
func (*DirectoryListServicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{21}
}
func (m *DirectoryListServicesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectoryListServicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectoryListServicesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirectoryListServicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryListServicesResponse.Merge(m, src)
}
func (m *DirectoryListServicesResponse) XXX_Size() int {
	return m.Size()
}
func (m *DirectoryListServicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryListServicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryListServicesResponse proto.InternalMessageInfo

type GetOrganizationServiceRequest struct {
	OrganizationName     string   `protobuf:"bytes,1,opt,name=organizationName,proto3" json:"organizationName,omitempty"`
	ServiceName          string   `protobuf:"bytes,2,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOrganizationServiceRequest) Reset()         { *m = GetOrganizationServiceRequest{} }
func (m *GetOrganizationServiceRequest) String() string { return proto.CompactTextString(m) }
func (*GetOrganizationServiceRequest) ProtoMessage()    {}
func (*GetOrganizationServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{22}
}
func (m *GetOrganizationServiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOrganizationServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOrganizationServiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOrganizationServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrganizationServiceRequest.Merge(m, src)
}
func (m *GetOrganizationServiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOrganizationServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrganizationServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrganizationServiceRequest proto.InternalMessageInfo

type DirectoryAccessRequest struct {
	Id                   string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	State                AccessRequestState `protobuf:"varint,2,opt,name=state,proto3,enum=nlx.management.AccessRequestState" json:"state,omitempty"`
	CreatedAt            *types.Timestamp   `protobuf:"bytes,3,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt            *types.Timestamp   `protobuf:"bytes,4,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *DirectoryAccessRequest) Reset()         { *m = DirectoryAccessRequest{} }
func (m *DirectoryAccessRequest) String() string { return proto.CompactTextString(m) }
func (*DirectoryAccessRequest) ProtoMessage()    {}
func (*DirectoryAccessRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{23}
}
func (m *DirectoryAccessRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectoryAccessRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectoryAccessRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirectoryAccessRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryAccessRequest.Merge(m, src)
}
func (m *DirectoryAccessRequest) XXX_Size() int {
	return m.Size()
}
func (m *DirectoryAccessRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryAccessRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryAccessRequest proto.InternalMessageInfo

type DirectoryService struct {
	ServiceName          string                 `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	OrganizationName     string                 `protobuf:"bytes,2,opt,name=organizationName,proto3" json:"organizationName,omitempty"`
	APISpecificationType string                 `protobuf:"bytes,3,opt,name=apiSpecificationType,proto3" json:"apiSpecificationType,omitempty"`
	State                DirectoryService_State `protobuf:"varint,4,opt,name=state,proto3,enum=nlx.management.DirectoryService_State" json:"state,omitempty"`
	LatestAccessRequest  *OutgoingAccessRequest `protobuf:"bytes,5,opt,name=latestAccessRequest,proto3" json:"latestAccessRequest,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *DirectoryService) Reset()         { *m = DirectoryService{} }
func (m *DirectoryService) String() string { return proto.CompactTextString(m) }
func (*DirectoryService) ProtoMessage()    {}
func (*DirectoryService) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{24}
}
func (m *DirectoryService) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectoryService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectoryService.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirectoryService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryService.Merge(m, src)
}
func (m *DirectoryService) XXX_Size() int {
	return m.Size()
}
func (m *DirectoryService) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryService.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryService proto.InternalMessageInfo

type RequestAccessToServiceRequest struct {
	OrganizationName     string   `protobuf:"bytes,1,opt,name=organizationName,proto3" json:"organizationName,omitempty"`
	ServiceName          string   `protobuf:"bytes,2,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestAccessToServiceRequest) Reset()         { *m = RequestAccessToServiceRequest{} }
func (m *RequestAccessToServiceRequest) String() string { return proto.CompactTextString(m) }
func (*RequestAccessToServiceRequest) ProtoMessage()    {}
func (*RequestAccessToServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{25}
}
func (m *RequestAccessToServiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestAccessToServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestAccessToServiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestAccessToServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestAccessToServiceRequest.Merge(m, src)
}
func (m *RequestAccessToServiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *RequestAccessToServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestAccessToServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RequestAccessToServiceRequest proto.InternalMessageInfo

type Settings struct {
	OrganizationInway    string   `protobuf:"bytes,1,opt,name=organizationInway,proto3" json:"organizationInway,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Settings) Reset()         { *m = Settings{} }
func (m *Settings) String() string { return proto.CompactTextString(m) }
func (*Settings) ProtoMessage()    {}
func (*Settings) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{26}
}
func (m *Settings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Settings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Settings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Settings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Settings.Merge(m, src)
}
func (m *Settings) XXX_Size() int {
	return m.Size()
}
func (m *Settings) XXX_DiscardUnknown() {
	xxx_messageInfo_Settings.DiscardUnknown(m)
}

var xxx_messageInfo_Settings proto.InternalMessageInfo

type UpdateSettingsRequest struct {
	OrganizationInway    string   `protobuf:"bytes,1,opt,name=organizationInway,proto3" json:"organizationInway,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateSettingsRequest) Reset()         { *m = UpdateSettingsRequest{} }
func (m *UpdateSettingsRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateSettingsRequest) ProtoMessage()    {}
func (*UpdateSettingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{27}
}
func (m *UpdateSettingsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSettingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSettingsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSettingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSettingsRequest.Merge(m, src)
}
func (m *UpdateSettingsRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSettingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSettingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSettingsRequest proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("nlx.management.AccessRequestState", AccessRequestState_name, AccessRequestState_value)
	proto.RegisterEnum("nlx.management.DirectoryService_State", DirectoryService_State_name, DirectoryService_State_value)
	proto.RegisterType((*Service)(nil), "nlx.management.Service")
	proto.RegisterType((*Service_AuthorizationSettings)(nil), "nlx.management.Service.AuthorizationSettings")
	proto.RegisterType((*Service_AuthorizationSettings_Authorization)(nil), "nlx.management.Service.AuthorizationSettings.Authorization")
	proto.RegisterType((*Inway)(nil), "nlx.management.Inway")
	proto.RegisterType((*Inway_Service)(nil), "nlx.management.Inway.Service")
	proto.RegisterType((*ListServicesRequest)(nil), "nlx.management.ListServicesRequest")
	proto.RegisterType((*ListServicesResponse)(nil), "nlx.management.ListServicesResponse")
	proto.RegisterType((*GetServiceRequest)(nil), "nlx.management.GetServiceRequest")
	proto.RegisterType((*UpdateServiceRequest)(nil), "nlx.management.UpdateServiceRequest")
	proto.RegisterType((*DeleteServiceRequest)(nil), "nlx.management.DeleteServiceRequest")
	proto.RegisterType((*ListInwaysRequest)(nil), "nlx.management.ListInwaysRequest")
	proto.RegisterType((*ListInwaysResponse)(nil), "nlx.management.ListInwaysResponse")
	proto.RegisterType((*GetInwayRequest)(nil), "nlx.management.GetInwayRequest")
	proto.RegisterType((*UpdateInwayRequest)(nil), "nlx.management.UpdateInwayRequest")
	proto.RegisterType((*DeleteInwayRequest)(nil), "nlx.management.DeleteInwayRequest")
	proto.RegisterType((*InsightConfiguration)(nil), "nlx.management.InsightConfiguration")
	proto.RegisterType((*OutgoingAccessRequest)(nil), "nlx.management.OutgoingAccessRequest")
	proto.RegisterType((*IncomingAccessRequest)(nil), "nlx.management.IncomingAccessRequest")
	proto.RegisterType((*ListIncomingAccessRequestsRequests)(nil), "nlx.management.ListIncomingAccessRequestsRequests")
	proto.RegisterType((*ListIncomingAccessRequestsResponse)(nil), "nlx.management.ListIncomingAccessRequestsResponse")
	proto.RegisterType((*ApproveIncomingAccessRequestRequest)(nil), "nlx.management.ApproveIncomingAccessRequestRequest")
	proto.RegisterType((*ListOutgoingAccessRequestsRequest)(nil), "nlx.management.ListOutgoingAccessRequestsRequest")
	proto.RegisterType((*ListOutgoingAccessRequestsResponse)(nil), "nlx.management.ListOutgoingAccessRequestsResponse")
	proto.RegisterType((*CreateAccessRequestRequest)(nil), "nlx.management.CreateAccessRequestRequest")
	proto.RegisterType((*DirectoryListServicesResponse)(nil), "nlx.management.DirectoryListServicesResponse")
	proto.RegisterType((*GetOrganizationServiceRequest)(nil), "nlx.management.GetOrganizationServiceRequest")
	proto.RegisterType((*DirectoryAccessRequest)(nil), "nlx.management.DirectoryAccessRequest")
	proto.RegisterType((*DirectoryService)(nil), "nlx.management.DirectoryService")
	proto.RegisterType((*RequestAccessToServiceRequest)(nil), "nlx.management.RequestAccessToServiceRequest")
	proto.RegisterType((*Settings)(nil), "nlx.management.Settings")
	proto.RegisterType((*UpdateSettingsRequest)(nil), "nlx.management.UpdateSettingsRequest")
}

func init() { proto.RegisterFile("management.proto", fileDescriptor_edc174f991dc0a25) }

var fileDescriptor_edc174f991dc0a25 = []byte{
	// 1797 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xcd, 0x6f, 0x23, 0x49,
	0x15, 0x9f, 0x76, 0xbe, 0x9c, 0xe7, 0x4d, 0xc6, 0xf3, 0x12, 0x27, 0x9e, 0xde, 0xc9, 0xc7, 0xd6,
	0x4e, 0xc0, 0x32, 0xc4, 0x66, 0x1c, 0x24, 0x66, 0xc3, 0x4a, 0xc8, 0x9b, 0x78, 0x06, 0x6b, 0xb2,
	0x33, 0x59, 0x27, 0x59, 0x98, 0x41, 0x8b, 0xe8, 0xb4, 0x2b, 0x4e, 0xb3, 0x76, 0x77, 0x4f, 0x77,
	0x39, 0xbb, 0x61, 0x14, 0x0e, 0x9c, 0xf7, 0x80, 0xc4, 0x01, 0x71, 0xe6, 0xdf, 0xe0, 0x88, 0xd0,
	0x1e, 0x41, 0x48, 0x1c, 0x11, 0x44, 0x70, 0xe2, 0xc8, 0x91, 0x0b, 0xea, 0xea, 0xea, 0xb6, 0xbb,
	0xbb, 0xda, 0x8e, 0x87, 0xe1, 0xb6, 0xa7, 0xb8, 0xab, 0xde, 0xe7, 0xef, 0x7d, 0xd4, 0x7b, 0x81,
	0x7c, 0x4f, 0x33, 0xb5, 0x0e, 0xed, 0x51, 0x93, 0x55, 0x6c, 0xc7, 0x62, 0x16, 0x2e, 0x9a, 0xdd,
	0xcf, 0x2b, 0x83, 0x53, 0xf5, 0x5e, 0xc7, 0xb2, 0x3a, 0x5d, 0x5a, 0xd5, 0x6c, 0xa3, 0xaa, 0x99,
	0xa6, 0xc5, 0x34, 0x66, 0x58, 0xa6, 0xeb, 0x53, 0xab, 0x6f, 0x8b, 0x5b, 0xfe, 0x75, 0xda, 0x3f,
	0xab, 0xd2, 0x9e, 0xcd, 0x2e, 0xc5, 0xe5, 0x46, 0xfc, 0x92, 0x19, 0x3d, 0xea, 0x32, 0xad, 0x67,
	0x0b, 0x82, 0xed, 0x8e, 0xc1, 0xce, 0xfb, 0xa7, 0x15, 0xdd, 0xea, 0x55, 0x3b, 0x56, 0xc7, 0x1a,
	0x50, 0x7a, 0x5f, 0xfc, 0x83, 0xff, 0xf2, 0xc9, 0xc9, 0x2f, 0x67, 0x60, 0xee, 0x88, 0x3a, 0x17,
	0x86, 0x4e, 0x11, 0x61, 0xda, 0xd4, 0x7a, 0xb4, 0xa8, 0x6c, 0x2a, 0xa5, 0xf9, 0x16, 0xff, 0x8d,
	0x9b, 0x90, 0xa3, 0x66, 0xdb, 0xb6, 0x0c, 0x93, 0x9d, 0xb4, 0x0e, 0x8a, 0x19, 0x7e, 0x35, 0x7c,
	0x84, 0x65, 0xc8, 0xb7, 0x2d, 0xbd, 0xef, 0x39, 0xc6, 0xdd, 0xf0, 0xc8, 0xa6, 0x38, 0x59, 0xe2,
	0x1c, 0xbf, 0x05, 0x4b, 0x9a, 0x6d, 0x1c, 0xd9, 0x54, 0x37, 0xce, 0x0c, 0x3d, 0x24, 0x9f, 0xe6,
	0xe4, 0xb2, 0x2b, 0x54, 0x21, 0x6b, 0x98, 0x8c, 0x3a, 0xa6, 0xd6, 0x2d, 0xce, 0x6c, 0x2a, 0xa5,
	0x6c, 0x2b, 0xfc, 0xc6, 0x0a, 0x20, 0xa3, 0xfa, 0xf9, 0x51, 0xdf, 0xb6, 0x2d, 0x87, 0xed, 0x59,
	0x26, 0xd3, 0x74, 0x56, 0x9c, 0xe5, 0xc2, 0x24, 0x37, 0x58, 0x83, 0x65, 0xbb, 0x7f, 0xda, 0x35,
	0xf4, 0x18, 0xc7, 0x1c, 0xe7, 0x90, 0xde, 0xa1, 0x0e, 0x05, 0xad, 0xcf, 0xce, 0x2d, 0xc7, 0xf8,
	0x19, 0xb7, 0xe9, 0x88, 0x32, 0x66, 0x98, 0x1d, 0xb7, 0x98, 0xdd, 0x54, 0x4a, 0xb9, 0xda, 0x76,
	0x25, 0x1a, 0xda, 0x8a, 0xc0, 0xb2, 0x52, 0x97, 0x31, 0xb5, 0xe4, 0xb2, 0x70, 0x05, 0x66, 0x0d,
	0xf3, 0x33, 0xed, 0xd2, 0x2d, 0xce, 0x6f, 0x4e, 0x95, 0xe6, 0x5b, 0xe2, 0x4b, 0xfd, 0xb7, 0x02,
	0x05, 0xa9, 0x20, 0x2f, 0x54, 0x3d, 0xab, 0x1d, 0x86, 0xca, 0xfb, 0x8d, 0x3a, 0x2c, 0x46, 0xc4,
	0xbb, 0xc5, 0xcc, 0xe6, 0x54, 0x29, 0x57, 0xfb, 0xee, 0x44, 0x36, 0x46, 0x4f, 0x5b, 0x31, 0x91,
	0xaa, 0x06, 0x0b, 0x11, 0x02, 0x2f, 0xfc, 0x96, 0xd3, 0xd1, 0x4c, 0xf1, 0xfd, 0x74, 0x90, 0x40,
	0x89, 0x73, 0xbc, 0x0f, 0x0b, 0x3e, 0xc8, 0x4f, 0xe8, 0xe5, 0xf7, 0x35, 0xf7, 0x5c, 0xa4, 0x53,
	0xf4, 0x90, 0xfc, 0x4b, 0x81, 0x99, 0xa6, 0x07, 0x80, 0x34, 0x21, 0x8b, 0x30, 0x77, 0x41, 0x1d,
	0xd7, 0xb0, 0x4c, 0xc1, 0x1d, 0x7c, 0x7a, 0xa9, 0x72, 0x6e, 0xb9, 0x8c, 0x73, 0xf8, 0x09, 0x18,
	0x7e, 0x7b, 0x69, 0xec, 0xd2, 0xee, 0x59, 0xbd, 0xdd, 0x76, 0xa8, 0xeb, 0x8a, 0x84, 0x1b, 0x3e,
	0xc2, 0xf7, 0x20, 0xeb, 0xfa, 0xb8, 0xb8, 0xc5, 0x19, 0x8e, 0xdb, 0x5a, 0x1c, 0x37, 0x6e, 0x54,
	0x80, 0x5e, 0x2b, 0x24, 0xc7, 0x7b, 0x30, 0x6f, 0xd8, 0x81, 0x68, 0x3f, 0xfd, 0x06, 0x07, 0xea,
	0xda, 0xc8, 0x02, 0x23, 0x3b, 0xb0, 0x74, 0x60, 0xb8, 0x4c, 0x90, 0xb8, 0x2d, 0xfa, 0xb2, 0x4f,
	0x5d, 0xc6, 0x65, 0x7a, 0xea, 0x86, 0xf0, 0x1c, 0x1c, 0x90, 0x27, 0xb0, 0x1c, 0x65, 0x72, 0x6d,
	0xcb, 0x74, 0x29, 0xee, 0x0c, 0x39, 0xa1, 0x70, 0x27, 0x56, 0x53, 0x82, 0x3f, 0x30, 0x9f, 0x7c,
	0x1d, 0xee, 0x3c, 0xa6, 0x81, 0xac, 0x40, 0xbf, 0xcc, 0xd4, 0x4f, 0x60, 0xf9, 0xc4, 0x6e, 0x6b,
	0x8c, 0x8e, 0xa7, 0xc5, 0x07, 0x30, 0x27, 0x14, 0xf0, 0x30, 0x8d, 0x30, 0x24, 0xa0, 0x23, 0x65,
	0x58, 0xde, 0xa7, 0x5d, 0x7a, 0x13, 0xf1, 0x64, 0x09, 0xee, 0x78, 0x00, 0xf0, 0x88, 0x04, 0x98,
	0x91, 0x3d, 0xc0, 0xe1, 0x43, 0x81, 0xc9, 0x76, 0x58, 0x5c, 0x3e, 0x22, 0x05, 0x69, 0x58, 0x83,
	0x9a, 0x23, 0x5b, 0x70, 0xfb, 0x31, 0xf5, 0x65, 0x8c, 0x32, 0xe0, 0x04, 0xd0, 0xc7, 0x62, 0x1c,
	0x25, 0x7e, 0x03, 0x66, 0xb8, 0x68, 0x81, 0x43, 0x8a, 0x7a, 0x9f, 0x86, 0x94, 0x00, 0x7d, 0x0c,
	0xc6, 0x1a, 0x70, 0x0a, 0xcb, 0x4d, 0xd3, 0x35, 0x3a, 0xe7, 0x5e, 0xab, 0x3a, 0x33, 0x3a, 0x7d,
	0xc7, 0xaf, 0xc7, 0xfb, 0xb0, 0x60, 0x38, 0x3d, 0xcd, 0xc3, 0x90, 0x3a, 0x5e, 0x73, 0xf5, 0x99,
	0xa2, 0x87, 0x9c, 0xca, 0xe7, 0xae, 0x1f, 0x36, 0x07, 0x8d, 0x3d, 0x7a, 0x48, 0x7e, 0x9b, 0x81,
	0xc2, 0xb3, 0x3e, 0xeb, 0x58, 0x86, 0xd9, 0xa9, 0xeb, 0x3a, 0x75, 0xc3, 0xf4, 0x5c, 0x84, 0x8c,
	0xd1, 0x16, 0xa2, 0x33, 0x46, 0x5b, 0xda, 0x05, 0x32, 0x29, 0x5d, 0x80, 0xd7, 0x22, 0x8f, 0xf0,
	0xd3, 0x41, 0xa9, 0x0e, 0x1f, 0xe1, 0x43, 0x98, 0x71, 0x99, 0xc6, 0x28, 0xaf, 0xd3, 0xc5, 0x1a,
	0x89, 0x43, 0x16, 0xb1, 0xe5, 0xc8, 0xa3, 0x6c, 0xf9, 0x0c, 0xf8, 0x10, 0xe6, 0x75, 0x87, 0x6a,
	0x8c, 0xb6, 0xeb, 0x8c, 0xbf, 0x17, 0xb9, 0x9a, 0x5a, 0xf1, 0x9f, 0xcc, 0x4a, 0xf0, 0x10, 0x56,
	0x8e, 0x83, 0x27, 0xb3, 0x35, 0x20, 0xf6, 0x38, 0xfb, 0x3c, 0xa0, 0x1e, 0xe7, 0xec, 0x78, 0xce,
	0x90, 0x98, 0xa3, 0xd4, 0x34, 0x75, 0xab, 0xf7, 0x15, 0x4a, 0x23, 0x50, 0x7a, 0x04, 0xc4, 0x2f,
	0x4e, 0x09, 0x50, 0xe1, 0xdf, 0xb8, 0xd7, 0x4a, 0xc2, 0x6b, 0xe2, 0x8e, 0x96, 0x23, 0x8a, 0xfe,
	0x43, 0x58, 0xd4, 0x22, 0x37, 0xa2, 0xf8, 0xb7, 0x92, 0xd5, 0x27, 0x91, 0xd3, 0x8a, 0x31, 0x93,
	0x97, 0xf0, 0x6e, 0xdd, 0xb6, 0x1d, 0xeb, 0x82, 0xca, 0xe9, 0x45, 0xbc, 0xc7, 0x5a, 0x8f, 0x25,
	0xb8, 0x1d, 0x11, 0xdd, 0xdc, 0x17, 0x09, 0x10, 0x3f, 0x26, 0x2f, 0xe1, 0x1d, 0xcf, 0x4f, 0x69,
	0xf9, 0x85, 0x09, 0x36, 0xc9, 0xe3, 0x1b, 0x33, 0x2e, 0x93, 0x0a, 0x6d, 0x9a, 0xca, 0x49, 0xa1,
	0x95, 0xca, 0x49, 0x40, 0xfb, 0x53, 0x50, 0xf7, 0x78, 0x7a, 0x49, 0x11, 0x7d, 0xb3, 0x0e, 0x7e,
	0x02, 0x6b, 0xfb, 0x86, 0x43, 0x75, 0x66, 0x39, 0x97, 0xd2, 0xf7, 0xf3, 0xfd, 0xc4, 0xfb, 0xb9,
	0x19, 0xf7, 0x2a, 0x14, 0x90, 0x7c, 0x48, 0x7b, 0xb0, 0xf6, 0x98, 0xb2, 0x67, 0x43, 0x76, 0xc5,
	0x5e, 0xb2, 0x37, 0xeb, 0xcd, 0x5f, 0x14, 0x58, 0x09, 0xad, 0x19, 0xdd, 0x78, 0xc2, 0x56, 0x91,
	0xf9, 0x9f, 0x5a, 0xc5, 0xd4, 0x6b, 0xb7, 0x8a, 0xe9, 0x49, 0x5a, 0xc5, 0x7f, 0x32, 0x90, 0x8f,
	0xc3, 0x7c, 0x83, 0xda, 0x9a, 0xa4, 0xbb, 0x1e, 0xc0, 0x72, 0x7c, 0xdb, 0x38, 0xbe, 0xb4, 0x45,
	0x9b, 0xfd, 0xa0, 0x78, 0xfd, 0xd7, 0x8d, 0xe5, 0xfa, 0x61, 0x33, 0x71, 0xdf, 0x92, 0x72, 0xe1,
	0xfb, 0xd1, 0x4e, 0xfc, 0xb5, 0x71, 0x39, 0x53, 0x89, 0x40, 0xfc, 0x03, 0x58, 0xea, 0x6a, 0x8c,
	0xba, 0x2c, 0x12, 0x05, 0xd1, 0x97, 0x6f, 0x58, 0x55, 0x32, 0x09, 0xe4, 0xdb, 0x30, 0xc3, 0x15,
	0x61, 0x0e, 0xe6, 0xfa, 0xe6, 0xa7, 0xa6, 0xf5, 0x99, 0x99, 0xbf, 0x85, 0xb3, 0x90, 0xe9, 0xdb,
	0x79, 0x05, 0xb3, 0x30, 0xdd, 0xf6, 0x4e, 0x32, 0xf8, 0x16, 0x64, 0xdb, 0xb4, 0xe3, 0x68, 0x6d,
	0xda, 0xce, 0x4f, 0x79, 0x59, 0x2c, 0x04, 0xf8, 0xd2, 0x8e, 0xad, 0xff, 0x6b, 0x16, 0x3f, 0x84,
	0x6c, 0xb8, 0xd5, 0x7c, 0x13, 0xee, 0x0c, 0x4b, 0xe0, 0x33, 0x90, 0x10, 0x9d, 0xbc, 0x20, 0x0d,
	0x28, 0x04, 0xe3, 0xa8, 0x58, 0xaf, 0x84, 0x81, 0x13, 0x89, 0x29, 0xbf, 0x00, 0x4c, 0xa6, 0x3f,
	0xde, 0x86, 0xdc, 0xc9, 0xd3, 0xa3, 0xc3, 0xc6, 0x5e, 0xf3, 0x51, 0xb3, 0xb1, 0x9f, 0xbf, 0x85,
	0x00, 0xb3, 0x8f, 0xea, 0xcd, 0x83, 0xc6, 0x7e, 0x5e, 0xf1, 0xf0, 0xdc, 0x6b, 0x35, 0xea, 0xc7,
	0x8d, 0x7d, 0x1f, 0xbd, 0x56, 0x63, 0xaf, 0xd1, 0xfc, 0xb8, 0xb1, 0x9f, 0x9f, 0xf2, 0xbe, 0xea,
	0x87, 0x87, 0xad, 0x67, 0xde, 0xd7, 0x74, 0xed, 0xd7, 0x08, 0xf0, 0x61, 0x18, 0x3b, 0x74, 0xe1,
	0xad, 0xe1, 0xb6, 0x83, 0xef, 0xc6, 0x83, 0x2b, 0xd9, 0x04, 0xd4, 0xfb, 0xa3, 0x89, 0xfc, 0xce,
	0x45, 0x8a, 0xbf, 0xf8, 0xf3, 0x3f, 0x7e, 0x95, 0x41, 0xcc, 0xf3, 0x7f, 0x2a, 0x5c, 0x3c, 0xa8,
	0x86, 0xdb, 0x89, 0x01, 0x30, 0x18, 0xef, 0xf1, 0x9d, 0xb8, 0xb4, 0xc4, 0xe8, 0xaf, 0xa6, 0x4d,
	0xea, 0x64, 0x83, 0xeb, 0xb8, 0x8b, 0xab, 0x71, 0x1d, 0xd5, 0x57, 0xde, 0x48, 0x7a, 0x85, 0x3f,
	0x86, 0x05, 0xbf, 0x97, 0x07, 0xda, 0xd2, 0x44, 0xa5, 0xeb, 0x78, 0x9b, 0xeb, 0x28, 0x90, 0x84,
	0x1f, 0xbb, 0x4a, 0x19, 0x3f, 0x87, 0x85, 0xc8, 0x02, 0x82, 0x09, 0x6c, 0x64, 0xfb, 0x49, 0xba,
	0xb2, 0x12, 0x57, 0x46, 0xd4, 0x34, 0x87, 0x76, 0x83, 0xdd, 0x04, 0x4d, 0x58, 0x88, 0xec, 0x26,
	0x49, 0xcd, 0xb2, 0xd5, 0x45, 0x5d, 0x49, 0x34, 0xbc, 0x46, 0xcf, 0x66, 0x97, 0x01, 0x92, 0xe5,
	0x54, 0x24, 0x3f, 0x05, 0x18, 0xac, 0x32, 0xc9, 0xa0, 0x25, 0x76, 0x1f, 0x95, 0x8c, 0x22, 0x11,
	0x39, 0xb2, 0xc2, 0xb5, 0xe6, 0x71, 0x31, 0xd0, 0xea, 0xaf, 0x3c, 0xa8, 0x41, 0x36, 0x58, 0x79,
	0x70, 0x43, 0x92, 0x1f, 0xc3, 0xbb, 0x88, 0x2a, 0xdf, 0x5f, 0xc8, 0x1a, 0x97, 0xbd, 0x8a, 0x85,
	0xa8, 0xec, 0xc0, 0x9f, 0x8f, 0x21, 0xe7, 0x67, 0x86, 0xaf, 0x45, 0x2e, 0x24, 0x4d, 0xf6, 0x5d,
	0x2e, 0x7b, 0x89, 0xc4, 0xec, 0xf6, 0x32, 0xc2, 0x84, 0xdc, 0xd0, 0x1a, 0x86, 0x44, 0x9e, 0x0f,
	0x37, 0x71, 0xe0, 0x3e, 0x57, 0xb2, 0xae, 0xca, 0x1d, 0xd8, 0xf5, 0xf7, 0x33, 0x3c, 0x87, 0xdc,
	0xd0, 0x7e, 0x96, 0xd4, 0x97, 0x5c, 0xde, 0x52, 0x73, 0x40, 0x20, 0x56, 0x4e, 0x41, 0xec, 0x0b,
	0x05, 0x56, 0x0f, 0xfb, 0x4c, 0xbe, 0xe3, 0x25, 0x5d, 0x48, 0x52, 0xa9, 0x37, 0xa2, 0x22, 0x5b,
	0xdc, 0x8c, 0x0d, 0x75, 0x6d, 0x60, 0x06, 0xa7, 0xda, 0xd6, 0x23, 0x2a, 0x7f, 0x0e, 0xab, 0x3c,
	0x13, 0x24, 0xd6, 0xa4, 0x38, 0x38, 0x99, 0x7e, 0x1c, 0xa3, 0xff, 0xf7, 0x0a, 0xdc, 0x4d, 0x9d,
	0xfb, 0xb1, 0x26, 0xcf, 0xfe, 0x51, 0xab, 0x86, 0x3a, 0x11, 0x8f, 0xa8, 0xa0, 0xef, 0x71, 0x63,
	0xdf, 0xc3, 0xef, 0x04, 0xc6, 0xfa, 0xc3, 0xec, 0xb6, 0x23, 0x08, 0xab, 0x86, 0xe0, 0x1f, 0x2a,
	0xe8, 0xa1, 0xc7, 0xee, 0x0a, 0xff, 0xa0, 0xc0, 0xbd, 0x51, 0x9b, 0x04, 0xee, 0x24, 0x46, 0xb3,
	0xf1, 0x7b, 0x47, 0x6a, 0x8a, 0x3d, 0xe7, 0xe6, 0x1e, 0x91, 0x8f, 0x5e, 0xd3, 0xdc, 0xea, 0xab,
	0xd8, 0x56, 0x72, 0x55, 0xd5, 0x7c, 0x73, 0xf0, 0x9f, 0x0a, 0xa8, 0xe9, 0xcb, 0x02, 0x3e, 0x90,
	0x81, 0x3b, 0x72, 0x97, 0x91, 0xc7, 0x63, 0xf4, 0x2e, 0x42, 0x7e, 0xc2, 0x1d, 0x7c, 0x81, 0x3f,
	0x4c, 0x73, 0xd0, 0x12, 0xfc, 0xd5, 0xe1, 0x77, 0xdf, 0xad, 0xbe, 0x8a, 0x0f, 0x2a, 0x57, 0x69,
	0x01, 0xfb, 0x42, 0x81, 0x25, 0xc9, 0x7e, 0x82, 0xe5, 0xb8, 0xb5, 0xe9, 0x4b, 0x8c, 0x7a, 0xb3,
	0x19, 0x8e, 0x10, 0xee, 0xcc, 0x3d, 0xb2, 0x9a, 0xe2, 0x8c, 0xd7, 0xef, 0x9e, 0x43, 0x8e, 0x3f,
	0xd8, 0xc1, 0x3f, 0x8e, 0x53, 0x4a, 0xaf, 0x98, 0x7c, 0xf1, 0x7c, 0x0e, 0xd9, 0x9c, 0x20, 0x64,
	0x75, 0x61, 0x31, 0x3a, 0x4e, 0xe1, 0x56, 0xda, 0xeb, 0x1a, 0x19, 0xb7, 0x52, 0xb3, 0x4f, 0x3c,
	0xe5, 0x6a, 0x42, 0xd5, 0xae, 0x52, 0xae, 0xfd, 0x66, 0x1a, 0xe6, 0xc3, 0xb1, 0x18, 0x2f, 0x63,
	0x83, 0x51, 0x9a, 0x5f, 0xdb, 0xa9, 0x93, 0xb5, 0x74, 0x28, 0x12, 0x88, 0xa2, 0x1a, 0x58, 0xd0,
	0x0e, 0xc8, 0x07, 0xe3, 0xd1, 0xef, 0x14, 0x58, 0x91, 0x6f, 0x6d, 0xb8, 0x2d, 0x79, 0x0b, 0xd3,
	0xb7, 0x3b, 0x75, 0xec, 0xaa, 0x48, 0x3e, 0xe2, 0xf6, 0x3c, 0xc1, 0x66, 0xd2, 0x9e, 0xd7, 0xcd,
	0xcf, 0x3f, 0x29, 0xb0, 0x22, 0x1f, 0xd7, 0x93, 0xe6, 0x8f, 0x1c, 0xeb, 0x6f, 0x9a, 0xa5, 0x1a,
	0xf7, 0xe1, 0x47, 0xe4, 0xf9, 0x1b, 0xf3, 0x21, 0x9e, 0xe7, 0x1f, 0x14, 0xbe, 0xfc, 0xfb, 0xfa,
	0xad, 0x2f, 0xaf, 0xd7, 0x95, 0x3f, 0x5e, 0xaf, 0x2b, 0x7f, 0xbb, 0x5e, 0x57, 0x5e, 0x4c, 0x69,
	0xb6, 0x71, 0x3a, 0xcb, 0x93, 0x61, 0xe7, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x96, 0x52, 0xcd,
	0xb4, 0x60, 0x1b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ManagementClient is the client API for Management service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ManagementClient interface {
	ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error)
	GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*Service, error)
	CreateService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error)
	UpdateService(ctx context.Context, in *UpdateServiceRequest, opts ...grpc.CallOption) (*Service, error)
	DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*types.Empty, error)
	ListInways(ctx context.Context, in *ListInwaysRequest, opts ...grpc.CallOption) (*ListInwaysResponse, error)
	GetInway(ctx context.Context, in *GetInwayRequest, opts ...grpc.CallOption) (*Inway, error)
	CreateInway(ctx context.Context, in *Inway, opts ...grpc.CallOption) (*Inway, error)
	UpdateInway(ctx context.Context, in *UpdateInwayRequest, opts ...grpc.CallOption) (*Inway, error)
	DeleteInway(ctx context.Context, in *DeleteInwayRequest, opts ...grpc.CallOption) (*types.Empty, error)
	PutInsightConfiguration(ctx context.Context, in *InsightConfiguration, opts ...grpc.CallOption) (*InsightConfiguration, error)
	GetInsightConfiguration(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*InsightConfiguration, error)
	ListIncomingAccessRequest(ctx context.Context, in *ListIncomingAccessRequestsRequests, opts ...grpc.CallOption) (*ListIncomingAccessRequestsResponse, error)
	ApproveIncomingAccessRequest(ctx context.Context, in *ApproveIncomingAccessRequestRequest, opts ...grpc.CallOption) (*types.Empty, error)
	ListOutgoingAccessRequests(ctx context.Context, in *ListOutgoingAccessRequestsRequest, opts ...grpc.CallOption) (*ListOutgoingAccessRequestsResponse, error)
	CreateAccessRequest(ctx context.Context, in *CreateAccessRequestRequest, opts ...grpc.CallOption) (*OutgoingAccessRequest, error)
	GetSettings(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*Settings, error)
	UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type managementClient struct {
	cc *grpc.ClientConn
}

func NewManagementClient(cc *grpc.ClientConn) ManagementClient {
	return &managementClient{cc}
}

func (c *managementClient) ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error) {
	out := new(ListServicesResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/ListServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/GetService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) CreateService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/CreateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) UpdateService(ctx context.Context, in *UpdateServiceRequest, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/UpdateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/DeleteService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ListInways(ctx context.Context, in *ListInwaysRequest, opts ...grpc.CallOption) (*ListInwaysResponse, error) {
	out := new(ListInwaysResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/ListInways", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetInway(ctx context.Context, in *GetInwayRequest, opts ...grpc.CallOption) (*Inway, error) {
	out := new(Inway)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/GetInway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) CreateInway(ctx context.Context, in *Inway, opts ...grpc.CallOption) (*Inway, error) {
	out := new(Inway)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/CreateInway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) UpdateInway(ctx context.Context, in *UpdateInwayRequest, opts ...grpc.CallOption) (*Inway, error) {
	out := new(Inway)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/UpdateInway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) DeleteInway(ctx context.Context, in *DeleteInwayRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/DeleteInway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) PutInsightConfiguration(ctx context.Context, in *InsightConfiguration, opts ...grpc.CallOption) (*InsightConfiguration, error) {
	out := new(InsightConfiguration)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/PutInsightConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetInsightConfiguration(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*InsightConfiguration, error) {
	out := new(InsightConfiguration)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/GetInsightConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ListIncomingAccessRequest(ctx context.Context, in *ListIncomingAccessRequestsRequests, opts ...grpc.CallOption) (*ListIncomingAccessRequestsResponse, error) {
	out := new(ListIncomingAccessRequestsResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/ListIncomingAccessRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ApproveIncomingAccessRequest(ctx context.Context, in *ApproveIncomingAccessRequestRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/ApproveIncomingAccessRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ListOutgoingAccessRequests(ctx context.Context, in *ListOutgoingAccessRequestsRequest, opts ...grpc.CallOption) (*ListOutgoingAccessRequestsResponse, error) {
	out := new(ListOutgoingAccessRequestsResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/ListOutgoingAccessRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) CreateAccessRequest(ctx context.Context, in *CreateAccessRequestRequest, opts ...grpc.CallOption) (*OutgoingAccessRequest, error) {
	out := new(OutgoingAccessRequest)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/CreateAccessRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetSettings(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*Settings, error) {
	out := new(Settings)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/GetSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/UpdateSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagementServer is the server API for Management service.
type ManagementServer interface {
	ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error)
	GetService(context.Context, *GetServiceRequest) (*Service, error)
	CreateService(context.Context, *Service) (*Service, error)
	UpdateService(context.Context, *UpdateServiceRequest) (*Service, error)
	DeleteService(context.Context, *DeleteServiceRequest) (*types.Empty, error)
	ListInways(context.Context, *ListInwaysRequest) (*ListInwaysResponse, error)
	GetInway(context.Context, *GetInwayRequest) (*Inway, error)
	CreateInway(context.Context, *Inway) (*Inway, error)
	UpdateInway(context.Context, *UpdateInwayRequest) (*Inway, error)
	DeleteInway(context.Context, *DeleteInwayRequest) (*types.Empty, error)
	PutInsightConfiguration(context.Context, *InsightConfiguration) (*InsightConfiguration, error)
	GetInsightConfiguration(context.Context, *types.Empty) (*InsightConfiguration, error)
	ListIncomingAccessRequest(context.Context, *ListIncomingAccessRequestsRequests) (*ListIncomingAccessRequestsResponse, error)
	ApproveIncomingAccessRequest(context.Context, *ApproveIncomingAccessRequestRequest) (*types.Empty, error)
	ListOutgoingAccessRequests(context.Context, *ListOutgoingAccessRequestsRequest) (*ListOutgoingAccessRequestsResponse, error)
	CreateAccessRequest(context.Context, *CreateAccessRequestRequest) (*OutgoingAccessRequest, error)
	GetSettings(context.Context, *types.Empty) (*Settings, error)
	UpdateSettings(context.Context, *UpdateSettingsRequest) (*types.Empty, error)
}

// UnimplementedManagementServer can be embedded to have forward compatible implementations.
type UnimplementedManagementServer struct {
}

func (*UnimplementedManagementServer) ListServices(ctx context.Context, req *ListServicesRequest) (*ListServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (*UnimplementedManagementServer) GetService(ctx context.Context, req *GetServiceRequest) (*Service, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetService not implemented")
}
func (*UnimplementedManagementServer) CreateService(ctx context.Context, req *Service) (*Service, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateService not implemented")
}
func (*UnimplementedManagementServer) UpdateService(ctx context.Context, req *UpdateServiceRequest) (*Service, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateService not implemented")
}
func (*UnimplementedManagementServer) DeleteService(ctx context.Context, req *DeleteServiceRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteService not implemented")
}
func (*UnimplementedManagementServer) ListInways(ctx context.Context, req *ListInwaysRequest) (*ListInwaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInways not implemented")
}
func (*UnimplementedManagementServer) GetInway(ctx context.Context, req *GetInwayRequest) (*Inway, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInway not implemented")
}
func (*UnimplementedManagementServer) CreateInway(ctx context.Context, req *Inway) (*Inway, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInway not implemented")
}
func (*UnimplementedManagementServer) UpdateInway(ctx context.Context, req *UpdateInwayRequest) (*Inway, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInway not implemented")
}
func (*UnimplementedManagementServer) DeleteInway(ctx context.Context, req *DeleteInwayRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInway not implemented")
}
func (*UnimplementedManagementServer) PutInsightConfiguration(ctx context.Context, req *InsightConfiguration) (*InsightConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutInsightConfiguration not implemented")
}
func (*UnimplementedManagementServer) GetInsightConfiguration(ctx context.Context, req *types.Empty) (*InsightConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInsightConfiguration not implemented")
}
func (*UnimplementedManagementServer) ListIncomingAccessRequest(ctx context.Context, req *ListIncomingAccessRequestsRequests) (*ListIncomingAccessRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIncomingAccessRequest not implemented")
}
func (*UnimplementedManagementServer) ApproveIncomingAccessRequest(ctx context.Context, req *ApproveIncomingAccessRequestRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveIncomingAccessRequest not implemented")
}
func (*UnimplementedManagementServer) ListOutgoingAccessRequests(ctx context.Context, req *ListOutgoingAccessRequestsRequest) (*ListOutgoingAccessRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOutgoingAccessRequests not implemented")
}
func (*UnimplementedManagementServer) CreateAccessRequest(ctx context.Context, req *CreateAccessRequestRequest) (*OutgoingAccessRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccessRequest not implemented")
}
func (*UnimplementedManagementServer) GetSettings(ctx context.Context, req *types.Empty) (*Settings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettings not implemented")
}
func (*UnimplementedManagementServer) UpdateSettings(ctx context.Context, req *UpdateSettingsRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSettings not implemented")
}

func RegisterManagementServer(s *grpc.Server, srv ManagementServer) {
	s.RegisterService(&_Management_serviceDesc, srv)
}

func _Management_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/ListServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ListServices(ctx, req.(*ListServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetService(ctx, req.(*GetServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/CreateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).CreateService(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_UpdateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).UpdateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/UpdateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).UpdateService(ctx, req.(*UpdateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/DeleteService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).DeleteService(ctx, req.(*DeleteServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ListInways_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInwaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ListInways(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/ListInways",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ListInways(ctx, req.(*ListInwaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetInway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInwayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetInway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/GetInway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetInway(ctx, req.(*GetInwayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_CreateInway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Inway)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).CreateInway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/CreateInway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).CreateInway(ctx, req.(*Inway))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_UpdateInway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInwayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).UpdateInway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/UpdateInway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).UpdateInway(ctx, req.(*UpdateInwayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_DeleteInway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInwayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).DeleteInway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/DeleteInway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).DeleteInway(ctx, req.(*DeleteInwayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_PutInsightConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsightConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).PutInsightConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/PutInsightConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).PutInsightConfiguration(ctx, req.(*InsightConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetInsightConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetInsightConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/GetInsightConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetInsightConfiguration(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ListIncomingAccessRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIncomingAccessRequestsRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ListIncomingAccessRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/ListIncomingAccessRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ListIncomingAccessRequest(ctx, req.(*ListIncomingAccessRequestsRequests))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ApproveIncomingAccessRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveIncomingAccessRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ApproveIncomingAccessRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/ApproveIncomingAccessRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ApproveIncomingAccessRequest(ctx, req.(*ApproveIncomingAccessRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ListOutgoingAccessRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOutgoingAccessRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ListOutgoingAccessRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/ListOutgoingAccessRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ListOutgoingAccessRequests(ctx, req.(*ListOutgoingAccessRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_CreateAccessRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccessRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).CreateAccessRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/CreateAccessRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).CreateAccessRequest(ctx, req.(*CreateAccessRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/GetSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetSettings(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_UpdateSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).UpdateSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/UpdateSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).UpdateSettings(ctx, req.(*UpdateSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Management_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nlx.management.Management",
	HandlerType: (*ManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListServices",
			Handler:    _Management_ListServices_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _Management_GetService_Handler,
		},
		{
			MethodName: "CreateService",
			Handler:    _Management_CreateService_Handler,
		},
		{
			MethodName: "UpdateService",
			Handler:    _Management_UpdateService_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _Management_DeleteService_Handler,
		},
		{
			MethodName: "ListInways",
			Handler:    _Management_ListInways_Handler,
		},
		{
			MethodName: "GetInway",
			Handler:    _Management_GetInway_Handler,
		},
		{
			MethodName: "CreateInway",
			Handler:    _Management_CreateInway_Handler,
		},
		{
			MethodName: "UpdateInway",
			Handler:    _Management_UpdateInway_Handler,
		},
		{
			MethodName: "DeleteInway",
			Handler:    _Management_DeleteInway_Handler,
		},
		{
			MethodName: "PutInsightConfiguration",
			Handler:    _Management_PutInsightConfiguration_Handler,
		},
		{
			MethodName: "GetInsightConfiguration",
			Handler:    _Management_GetInsightConfiguration_Handler,
		},
		{
			MethodName: "ListIncomingAccessRequest",
			Handler:    _Management_ListIncomingAccessRequest_Handler,
		},
		{
			MethodName: "ApproveIncomingAccessRequest",
			Handler:    _Management_ApproveIncomingAccessRequest_Handler,
		},
		{
			MethodName: "ListOutgoingAccessRequests",
			Handler:    _Management_ListOutgoingAccessRequests_Handler,
		},
		{
			MethodName: "CreateAccessRequest",
			Handler:    _Management_CreateAccessRequest_Handler,
		},
		{
			MethodName: "GetSettings",
			Handler:    _Management_GetSettings_Handler,
		},
		{
			MethodName: "UpdateSettings",
			Handler:    _Management_UpdateSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "management.proto",
}

// DirectoryClient is the client API for Directory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DirectoryClient interface {
	ListServices(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*DirectoryListServicesResponse, error)
	GetOrganizationService(ctx context.Context, in *GetOrganizationServiceRequest, opts ...grpc.CallOption) (*DirectoryService, error)
	RequestAccessToService(ctx context.Context, in *RequestAccessToServiceRequest, opts ...grpc.CallOption) (*OutgoingAccessRequest, error)
}

type directoryClient struct {
	cc *grpc.ClientConn
}

func NewDirectoryClient(cc *grpc.ClientConn) DirectoryClient {
	return &directoryClient{cc}
}

func (c *directoryClient) ListServices(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*DirectoryListServicesResponse, error) {
	out := new(DirectoryListServicesResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.Directory/ListServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) GetOrganizationService(ctx context.Context, in *GetOrganizationServiceRequest, opts ...grpc.CallOption) (*DirectoryService, error) {
	out := new(DirectoryService)
	err := c.cc.Invoke(ctx, "/nlx.management.Directory/GetOrganizationService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) RequestAccessToService(ctx context.Context, in *RequestAccessToServiceRequest, opts ...grpc.CallOption) (*OutgoingAccessRequest, error) {
	out := new(OutgoingAccessRequest)
	err := c.cc.Invoke(ctx, "/nlx.management.Directory/RequestAccessToService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DirectoryServer is the server API for Directory service.
type DirectoryServer interface {
	ListServices(context.Context, *types.Empty) (*DirectoryListServicesResponse, error)
	GetOrganizationService(context.Context, *GetOrganizationServiceRequest) (*DirectoryService, error)
	RequestAccessToService(context.Context, *RequestAccessToServiceRequest) (*OutgoingAccessRequest, error)
}

// UnimplementedDirectoryServer can be embedded to have forward compatible implementations.
type UnimplementedDirectoryServer struct {
}

func (*UnimplementedDirectoryServer) ListServices(ctx context.Context, req *types.Empty) (*DirectoryListServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (*UnimplementedDirectoryServer) GetOrganizationService(ctx context.Context, req *GetOrganizationServiceRequest) (*DirectoryService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationService not implemented")
}
func (*UnimplementedDirectoryServer) RequestAccessToService(ctx context.Context, req *RequestAccessToServiceRequest) (*OutgoingAccessRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAccessToService not implemented")
}

func RegisterDirectoryServer(s *grpc.Server, srv DirectoryServer) {
	s.RegisterService(&_Directory_serviceDesc, srv)
}

func _Directory_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Directory/ListServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).ListServices(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_GetOrganizationService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).GetOrganizationService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Directory/GetOrganizationService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).GetOrganizationService(ctx, req.(*GetOrganizationServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_RequestAccessToService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAccessToServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).RequestAccessToService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Directory/RequestAccessToService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).RequestAccessToService(ctx, req.(*RequestAccessToServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Directory_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nlx.management.Directory",
	HandlerType: (*DirectoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListServices",
			Handler:    _Directory_ListServices_Handler,
		},
		{
			MethodName: "GetOrganizationService",
			Handler:    _Directory_GetOrganizationService_Handler,
		},
		{
			MethodName: "RequestAccessToService",
			Handler:    _Directory_RequestAccessToService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "management.proto",
}

func (m *Service) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Service) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Service) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Inways) > 0 {
		for iNdEx := len(m.Inways) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Inways[iNdEx])
			copy(dAtA[i:], m.Inways[iNdEx])
			i = encodeVarintManagement(dAtA, i, uint64(len(m.Inways[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.AuthorizationSettings != nil {
		{
			size, err := m.AuthorizationSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.PublicSupportContact) > 0 {
		i -= len(m.PublicSupportContact)
		copy(dAtA[i:], m.PublicSupportContact)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.PublicSupportContact)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TechSupportContact) > 0 {
		i -= len(m.TechSupportContact)
		copy(dAtA[i:], m.TechSupportContact)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.TechSupportContact)))
		i--
		dAtA[i] = 0x32
	}
	if m.Internal {
		i--
		if m.Internal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.ApiSpecificationURL) > 0 {
		i -= len(m.ApiSpecificationURL)
		copy(dAtA[i:], m.ApiSpecificationURL)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.ApiSpecificationURL)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DocumentationURL) > 0 {
		i -= len(m.DocumentationURL)
		copy(dAtA[i:], m.DocumentationURL)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.DocumentationURL)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EndpointURL) > 0 {
		i -= len(m.EndpointURL)
		copy(dAtA[i:], m.EndpointURL)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.EndpointURL)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Service_AuthorizationSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Service_AuthorizationSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Service_AuthorizationSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Authorizations) > 0 {
		for iNdEx := len(m.Authorizations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Authorizations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManagement(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Mode) > 0 {
		i -= len(m.Mode)
		copy(dAtA[i:], m.Mode)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.Mode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Service_AuthorizationSettings_Authorization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Service_AuthorizationSettings_Authorization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Service_AuthorizationSettings_Authorization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PublicKeyHash) > 0 {
		i -= len(m.PublicKeyHash)
		copy(dAtA[i:], m.PublicKeyHash)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.PublicKeyHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrganizationName) > 0 {
		i -= len(m.OrganizationName)
		copy(dAtA[i:], m.OrganizationName)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.OrganizationName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Inway) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Inway) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Inway) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IpAddress) > 0 {
		i -= len(m.IpAddress)
		copy(dAtA[i:], m.IpAddress)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.IpAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Services) > 0 {
		for iNdEx := len(m.Services) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Services[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManagement(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.SelfAddress) > 0 {
		i -= len(m.SelfAddress)
		copy(dAtA[i:], m.SelfAddress)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.SelfAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Inway_Service) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Inway_Service) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Inway_Service) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListServicesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListServicesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServicesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.InwayName) > 0 {
		i -= len(m.InwayName)
		copy(dAtA[i:], m.InwayName)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.InwayName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListServicesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListServicesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServicesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Services) > 0 {
		for iNdEx := len(m.Services) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Services[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManagement(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetServiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateServiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Service != nil {
		{
			size, err := m.Service.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteServiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListInwaysRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListInwaysRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListInwaysRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ListInwaysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListInwaysResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListInwaysResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Inways) > 0 {
		for iNdEx := len(m.Inways) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Inways[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManagement(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetInwayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInwayRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetInwayRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateInwayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateInwayRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateInwayRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Inway != nil {
		{
			size, err := m.Inway.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteInwayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteInwayRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteInwayRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InsightConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InsightConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InsightConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.InsightAPIURL) > 0 {
		i -= len(m.InsightAPIURL)
		copy(dAtA[i:], m.InsightAPIURL)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.InsightAPIURL)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IrmaServerURL) > 0 {
		i -= len(m.IrmaServerURL)
		copy(dAtA[i:], m.IrmaServerURL)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.IrmaServerURL)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OutgoingAccessRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutgoingAccessRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutgoingAccessRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.State != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ServiceName) > 0 {
		i -= len(m.ServiceName)
		copy(dAtA[i:], m.ServiceName)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.ServiceName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OrganizationName) > 0 {
		i -= len(m.OrganizationName)
		copy(dAtA[i:], m.OrganizationName)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.OrganizationName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IncomingAccessRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncomingAccessRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncomingAccessRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.State != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ServiceName) > 0 {
		i -= len(m.ServiceName)
		copy(dAtA[i:], m.ServiceName)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.ServiceName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OrganizationName) > 0 {
		i -= len(m.OrganizationName)
		copy(dAtA[i:], m.OrganizationName)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.OrganizationName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListIncomingAccessRequestsRequests) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListIncomingAccessRequestsRequests) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListIncomingAccessRequestsRequests) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ServiceName) > 0 {
		i -= len(m.ServiceName)
		copy(dAtA[i:], m.ServiceName)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.ServiceName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListIncomingAccessRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListIncomingAccessRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListIncomingAccessRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AccessRequests) > 0 {
		for iNdEx := len(m.AccessRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccessRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManagement(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ApproveIncomingAccessRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApproveIncomingAccessRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApproveIncomingAccessRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AccessRequestID) > 0 {
		i -= len(m.AccessRequestID)
		copy(dAtA[i:], m.AccessRequestID)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.AccessRequestID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ServiceName) > 0 {
		i -= len(m.ServiceName)
		copy(dAtA[i:], m.ServiceName)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.ServiceName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListOutgoingAccessRequestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListOutgoingAccessRequestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListOutgoingAccessRequestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ServiceName) > 0 {
		i -= len(m.ServiceName)
		copy(dAtA[i:], m.ServiceName)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.ServiceName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrganizationName) > 0 {
		i -= len(m.OrganizationName)
		copy(dAtA[i:], m.OrganizationName)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.OrganizationName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListOutgoingAccessRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListOutgoingAccessRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListOutgoingAccessRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AccessRequests) > 0 {
		for iNdEx := len(m.AccessRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccessRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManagement(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateAccessRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAccessRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateAccessRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ServiceName) > 0 {
		i -= len(m.ServiceName)
		copy(dAtA[i:], m.ServiceName)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.ServiceName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrganizationName) > 0 {
		i -= len(m.OrganizationName)
		copy(dAtA[i:], m.OrganizationName)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.OrganizationName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DirectoryListServicesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectoryListServicesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DirectoryListServicesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Services) > 0 {
		for iNdEx := len(m.Services) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Services[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManagement(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetOrganizationServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrganizationServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOrganizationServiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ServiceName) > 0 {
		i -= len(m.ServiceName)
		copy(dAtA[i:], m.ServiceName)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.ServiceName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrganizationName) > 0 {
		i -= len(m.OrganizationName)
		copy(dAtA[i:], m.OrganizationName)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.OrganizationName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DirectoryAccessRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectoryAccessRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DirectoryAccessRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.State != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DirectoryService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectoryService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DirectoryService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LatestAccessRequest != nil {
		{
			size, err := m.LatestAccessRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.State != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if len(m.APISpecificationType) > 0 {
		i -= len(m.APISpecificationType)
		copy(dAtA[i:], m.APISpecificationType)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.APISpecificationType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OrganizationName) > 0 {
		i -= len(m.OrganizationName)
		copy(dAtA[i:], m.OrganizationName)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.OrganizationName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ServiceName) > 0 {
		i -= len(m.ServiceName)
		copy(dAtA[i:], m.ServiceName)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.ServiceName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestAccessToServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestAccessToServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestAccessToServiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ServiceName) > 0 {
		i -= len(m.ServiceName)
		copy(dAtA[i:], m.ServiceName)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.ServiceName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrganizationName) > 0 {
		i -= len(m.OrganizationName)
		copy(dAtA[i:], m.OrganizationName)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.OrganizationName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Settings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Settings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Settings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OrganizationInway) > 0 {
		i -= len(m.OrganizationInway)
		copy(dAtA[i:], m.OrganizationInway)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.OrganizationInway)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateSettingsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSettingsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSettingsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OrganizationInway) > 0 {
		i -= len(m.OrganizationInway)
		copy(dAtA[i:], m.OrganizationInway)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.OrganizationInway)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintManagement(dAtA []byte, offset int, v uint64) int {
	offset -= sovManagement(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Service) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	l = len(m.EndpointURL)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	l = len(m.DocumentationURL)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	l = len(m.ApiSpecificationURL)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	if m.Internal {
		n += 2
	}
	l = len(m.TechSupportContact)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	l = len(m.PublicSupportContact)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	if m.AuthorizationSettings != nil {
		l = m.AuthorizationSettings.Size()
		n += 1 + l + sovManagement(uint64(l))
	}
	if len(m.Inways) > 0 {
		for _, s := range m.Inways {
			l = len(s)
			n += 1 + l + sovManagement(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Service_AuthorizationSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Mode)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	if len(m.Authorizations) > 0 {
		for _, e := range m.Authorizations {
			l = e.Size()
			n += 1 + l + sovManagement(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Service_AuthorizationSettings_Authorization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrganizationName)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	l = len(m.PublicKeyHash)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Inway) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	l = len(m.SelfAddress)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	if len(m.Services) > 0 {
		for _, e := range m.Services {
			l = e.Size()
			n += 1 + l + sovManagement(uint64(l))
		}
	}
	l = len(m.IpAddress)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Inway_Service) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListServicesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InwayName)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListServicesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Services) > 0 {
		for _, e := range m.Services {
			l = e.Size()
			n += 1 + l + sovManagement(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetServiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateServiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	if m.Service != nil {
		l = m.Service.Size()
		n += 1 + l + sovManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteServiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListInwaysRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListInwaysResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Inways) > 0 {
		for _, e := range m.Inways {
			l = e.Size()
			n += 1 + l + sovManagement(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetInwayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateInwayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	if m.Inway != nil {
		l = m.Inway.Size()
		n += 1 + l + sovManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteInwayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InsightConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IrmaServerURL)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	l = len(m.InsightAPIURL)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OutgoingAccessRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	l = len(m.OrganizationName)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovManagement(uint64(m.State))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovManagement(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IncomingAccessRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	l = len(m.OrganizationName)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovManagement(uint64(m.State))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovManagement(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListIncomingAccessRequestsRequests) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListIncomingAccessRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccessRequests) > 0 {
		for _, e := range m.AccessRequests {
			l = e.Size()
			n += 1 + l + sovManagement(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApproveIncomingAccessRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	l = len(m.AccessRequestID)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListOutgoingAccessRequestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrganizationName)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListOutgoingAccessRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccessRequests) > 0 {
		for _, e := range m.AccessRequests {
			l = e.Size()
			n += 1 + l + sovManagement(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateAccessRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrganizationName)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DirectoryListServicesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Services) > 0 {
		for _, e := range m.Services {
			l = e.Size()
			n += 1 + l + sovManagement(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOrganizationServiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrganizationName)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DirectoryAccessRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovManagement(uint64(m.State))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovManagement(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DirectoryService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	l = len(m.OrganizationName)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	l = len(m.APISpecificationType)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovManagement(uint64(m.State))
	}
	if m.LatestAccessRequest != nil {
		l = m.LatestAccessRequest.Size()
		n += 1 + l + sovManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RequestAccessToServiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrganizationName)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Settings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrganizationInway)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateSettingsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrganizationInway)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovManagement(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozManagement(x uint64) (n int) {
	return sovManagement(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Service) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Service: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Service: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndpointURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentationURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocumentationURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiSpecificationURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiSpecificationURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Internal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Internal = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TechSupportContact", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TechSupportContact = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicSupportContact", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicSupportContact = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizationSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthorizationSettings == nil {
				m.AuthorizationSettings = &Service_AuthorizationSettings{}
			}
			if err := m.AuthorizationSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inways", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inways = append(m.Inways, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Service_AuthorizationSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorizationSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorizationSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authorizations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authorizations = append(m.Authorizations, &Service_AuthorizationSettings_Authorization{})
			if err := m.Authorizations[len(m.Authorizations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Service_AuthorizationSettings_Authorization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Authorization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Authorization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKeyHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKeyHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Inway) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Inway: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Inway: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SelfAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, &Inway_Service{})
			if err := m.Services[len(m.Services)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Inway_Service) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Service: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Service: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListServicesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListServicesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListServicesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InwayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InwayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListServicesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListServicesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListServicesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, &Service{})
			if err := m.Services[len(m.Services)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Service == nil {
				m.Service = &Service{}
			}
			if err := m.Service.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListInwaysRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListInwaysRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListInwaysRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListInwaysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListInwaysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListInwaysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inways", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inways = append(m.Inways, &Inway{})
			if err := m.Inways[len(m.Inways)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInwayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInwayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInwayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateInwayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateInwayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateInwayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inway", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inway == nil {
				m.Inway = &Inway{}
			}
			if err := m.Inway.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteInwayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteInwayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteInwayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InsightConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InsightConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InsightConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IrmaServerURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IrmaServerURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsightAPIURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InsightAPIURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutgoingAccessRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutgoingAccessRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutgoingAccessRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= AccessRequestState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncomingAccessRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncomingAccessRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncomingAccessRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= AccessRequestState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListIncomingAccessRequestsRequests) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListIncomingAccessRequestsRequests: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListIncomingAccessRequestsRequests: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListIncomingAccessRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListIncomingAccessRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListIncomingAccessRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessRequests = append(m.AccessRequests, &IncomingAccessRequest{})
			if err := m.AccessRequests[len(m.AccessRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApproveIncomingAccessRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApproveIncomingAccessRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApproveIncomingAccessRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessRequestID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessRequestID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListOutgoingAccessRequestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListOutgoingAccessRequestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListOutgoingAccessRequestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListOutgoingAccessRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListOutgoingAccessRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListOutgoingAccessRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessRequests = append(m.AccessRequests, &OutgoingAccessRequest{})
			if err := m.AccessRequests[len(m.AccessRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAccessRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAccessRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAccessRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectoryListServicesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectoryListServicesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectoryListServicesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, &DirectoryService{})
			if err := m.Services[len(m.Services)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrganizationServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrganizationServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrganizationServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectoryAccessRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectoryAccessRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectoryAccessRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= AccessRequestState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectoryService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectoryService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectoryService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APISpecificationType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.APISpecificationType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= DirectoryService_State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestAccessRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LatestAccessRequest == nil {
				m.LatestAccessRequest = &OutgoingAccessRequest{}
			}
			if err := m.LatestAccessRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestAccessToServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestAccessToServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestAccessToServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Settings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Settings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Settings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationInway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationInway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSettingsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSettingsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSettingsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationInway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationInway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipManagement(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthManagement
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupManagement
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthManagement
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthManagement        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowManagement          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupManagement = fmt.Errorf("proto: unexpected end of group")
)
