syntax = "proto3";

package nlx.management;

option go_package = "api";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;

service Management {
  rpc ListServices (ListServicesRequest) returns (ListServicesResponse) {
    option (google.api.http) = {get: "/api/v1/services"};
  }
  rpc GetService (GetServiceRequest) returns (GetServiceResponse) {
    option (google.api.http) = {get: "/api/v1/services/{name}"};
  }
  rpc CreateService (CreateServiceRequest) returns (CreateServiceResponse) {
    option (google.api.http) = {post: "/api/v1/services" body: "*"};
  }
  rpc UpdateService (UpdateServiceRequest) returns (UpdateServiceResponse) {
    option (google.api.http) = {put: "/api/v1/services/{name}" body: "*"};
  }
  rpc DeleteService (DeleteServiceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/api/v1/services/{name}"};
  }
  rpc ListInways (ListInwaysRequest) returns (ListInwaysResponse) {
    option (google.api.http) = {get: "/api/v1/inways"};
  }
  rpc GetInway (GetInwayRequest) returns (Inway) {
    option (google.api.http) = {get: "/api/v1/inways/{name}"};
  }
  rpc CreateInway (Inway) returns (Inway) {
    option (google.api.http) = {post: "/api/v1/inways" body: "*"};
  }
  rpc UpdateInway (UpdateInwayRequest) returns (Inway) {
    option (google.api.http) = {put: "/api/v1/inways/{name}" body: "inway"};
  }
  rpc DeleteInway (DeleteInwayRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/api/v1/inways/{name}"};
  }
  rpc PutInsightConfiguration(InsightConfiguration) returns (InsightConfiguration) {
    option (google.api.http) = {put: "/api/v1/insight-configuration" body: "*"};
  }
  rpc GetInsightConfiguration (google.protobuf.Empty) returns (InsightConfiguration) {
    option (google.api.http) = {get: "/api/v1/insight-configuration"};
  }

  rpc ListIncomingAccessRequest (ListIncomingAccessRequestsRequests) returns (ListIncomingAccessRequestsResponse) {
    option (google.api.http) = {get: "/api/v1/access-requests/incoming/services/{serviceName}"};
  }

  rpc ApproveIncomingAccessRequest (ApproveIncomingAccessRequestRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {post: "/api/v1/access-requests/incoming/services/{serviceName}/{accessRequestID}/approve"};
  }

  rpc RejectIncomingAccessRequest (RejectIncomingAccessRequestRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {post: "/api/v1/access-requests/incoming/services/{serviceName}/{accessRequestID}/reject"};
  }

  rpc ListOutgoingAccessRequests (ListOutgoingAccessRequestsRequest) returns (ListOutgoingAccessRequestsResponse) {
    option (google.api.http) = {get: "/api/v1/access-requests/outgoing/organizations/{organizationName}/services/{serviceName}"};
  }

  rpc CreateAccessRequest (CreateAccessRequestRequest) returns (OutgoingAccessRequest) {
    option (google.api.http) = {post: "/api/v1/access-requests" body: "*"};
  }

  rpc SendAccessRequest (SendAccessRequestRequest) returns (OutgoingAccessRequest) {
    option (google.api.http) = {post: "/api/v1/access-requests/outgoing/organizations/{organizationName}/services/{serviceName}/{accessRequestID}/send"};
  }

  rpc GetSettings (google.protobuf.Empty) returns (Settings) {
    option (google.api.http) = {get: "/api/v1/settings"};
  }
  rpc UpdateSettings(UpdateSettingsRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {put: "/api/v1/settings", body: "*"};
  }

  rpc ListAccessGrantsForService(ListAccessGrantsForServiceRequest) returns(ListAccessGrantsForServiceResponse) {
    option (google.api.http) = {get: "/api/v1/access-grants/services/{serviceName}"};
  }

  rpc RevokeAccessGrant(RevokeAccessGrantRequest) returns (AccessGrant) {
    option (google.api.http) = {post: "/api/v1/access-grants/service/{serviceName}/organizations/{organizationName}/{accessGrantID}/revoke"};
  }
}

message Service {
  string name = 1;
  string endpointURL = 2;
  string documentationURL = 3;
  string apiSpecificationURL = 4;
  bool internal = 5;
  string techSupportContact = 6;
  string publicSupportContact = 7;
  AuthorizationSettings authorizationSettings = 8;
  repeated string inways = 9;

  message AuthorizationSettings {
    string mode = 1;
    repeated Authorization authorizations = 2;

    message Authorization  {
      string organizationName = 1;
      string publicKeyHash = 2;
    }
  }
}

message GetServiceResponse {
  string name = 1;
  string endpointURL = 2;
  string documentationURL = 3;
  string apiSpecificationURL = 4;
  bool internal = 5;
  string techSupportContact = 6;
  string publicSupportContact = 7;
  repeated string inways = 9;
}

message CreateServiceRequest {
  string name = 1;
  string endpointURL = 2;
  string documentationURL = 3;
  string apiSpecificationURL = 4;
  bool internal = 5;
  string techSupportContact = 6;
  string publicSupportContact = 7;
  repeated string inways = 9;
}

message CreateServiceResponse {
  string name = 1;
  string endpointURL = 2;
  string documentationURL = 3;
  string apiSpecificationURL = 4;
  bool internal = 5;
  string techSupportContact = 6;
  string publicSupportContact = 7;
  repeated string inways = 9;
}

message UpdateServiceRequest {
  string name = 1;
  string endpointURL = 2;
  string documentationURL = 3;
  string apiSpecificationURL = 4;
  bool internal = 5;
  string techSupportContact = 6;
  string publicSupportContact = 7;
  repeated string inways = 9;
}

message UpdateServiceResponse {
  string name = 1;
  string endpointURL = 2;
  string documentationURL = 3;
  string apiSpecificationURL = 4;
  bool internal = 5;
  string techSupportContact = 6;
  string publicSupportContact = 7;
  repeated string inways = 9;
}

message Inway {
  message Service {
    string name = 1;
  }

  string name = 1;
  string version = 2;
  string hostname = 3;
  string selfAddress = 4;
  repeated Service services = 5;
  string ipAddress = 6;
}

message ListServicesRequest {
  string inwayName = 1;
}

message ListServicesResponse {
  repeated Service services = 1;

  message Service {
    string name = 1;
    string endpointURL = 2;
    string documentationURL = 3;
    string apiSpecificationURL = 4;
    bool internal = 5;
    string techSupportContact = 6;
    string publicSupportContact = 7;
    AuthorizationSettings authorizationSettings = 8;
    repeated string inways = 9;
    uint32 incomingAccessRequestsCount = 10;

    message AuthorizationSettings {
      string mode = 1;
      repeated Authorization authorizations = 2;

      message Authorization  {
        string organizationName = 1;
        string publicKeyHash = 2;
      }
    }
  }
}

message GetServiceRequest {
  string name = 1;
}

message DeleteServiceRequest {
  string name = 1;
}

message ListInwaysRequest {}

message ListInwaysResponse {
  repeated Inway inways = 1;
}

message GetInwayRequest {
  string name = 1;
}

message UpdateInwayRequest {
  string name = 1;
  Inway inway = 2;
}

message DeleteInwayRequest {
  string name = 1;
}

message InsightConfiguration {
  string irmaServerURL = 1;
  string insightAPIURL = 2;
}

enum AccessRequestState {
  UNSPECIFIED = 0;
  FAILED = 1;
  CREATED = 2;
  RECEIVED = 3;
  APPROVED = 4;
  REJECTED = 5;
}

enum ErrorCode {
  INTERNAL = 0;
  NO_INWAY_SELECTED = 1;
}

message ErrorDetails {
  ErrorCode code = 1;
  string cause = 2;
  repeated string stackTrace = 3;
}

message OutgoingAccessRequest {
  string id = 1;
  string organizationName = 2;
  string serviceName = 3;
  AccessRequestState state = 4;
  google.protobuf.Timestamp createdAt = 5;
  google.protobuf.Timestamp updatedAt = 6;
  ErrorDetails errorDetails = 7;
}

message IncomingAccessRequest {
  string id = 1;
  string organizationName = 2;
  string serviceName = 3;
  AccessRequestState state = 4;
  google.protobuf.Timestamp createdAt = 5;
  google.protobuf.Timestamp updatedAt = 6;
}

message ListIncomingAccessRequestsRequests {
  string serviceName = 1;
}

message ListIncomingAccessRequestsResponse {
  repeated IncomingAccessRequest accessRequests = 1;
}

message ApproveIncomingAccessRequestRequest {
  string serviceName = 1;
  string accessRequestID = 2;
}

message RejectIncomingAccessRequestRequest {
  string serviceName = 1;
  string accessRequestID = 2;
}

message ListOutgoingAccessRequestsRequest {
  string organizationName = 1;
  string serviceName = 2;
}

message ListOutgoingAccessRequestsResponse {
  repeated OutgoingAccessRequest accessRequests = 1;
}

message CreateAccessRequestRequest {
  string organizationName = 1;
  string serviceName = 2;
}

message SendAccessRequestRequest {
  string organizationName = 1;
  string serviceName = 2;
  string accessRequestID = 3;
}

message ListAccessGrantsForServiceRequest {
  string serviceName = 1;
}

message ListAccessGrantsForServiceResponse {
  repeated AccessGrant accessGrants = 1;
}

message RevokeAccessGrantRequest {
  string organizationName = 1;
  string serviceName = 2;
  string accessGrantID = 3;
}

message AccessGrant {
  string id = 1;
  string organizationName = 2;
  string serviceName = 3;
  string publicKeyFingerprint = 4;
  google.protobuf.Timestamp createdAt = 5;
  google.protobuf.Timestamp revokedAt = 6;
  string accessRequestId = 7;
}

message AccessProof {
  string id = 1;
  string organizationName = 2;
  string serviceName = 3;
  google.protobuf.Timestamp createdAt = 4;
  google.protobuf.Timestamp revokedAt = 5;
  string accessRequestId = 6;
}

service Directory {
  rpc ListServices (google.protobuf.Empty) returns (DirectoryListServicesResponse) {
    option (google.api.http) = {get: "/api/v1/directory/services"};
  }
  rpc GetOrganizationService (GetOrganizationServiceRequest) returns (DirectoryService) {
    option (google.api.http) = {get: "/api/v1/directory/organizations/{organizationName}/services/{serviceName}"};
  }
  rpc RequestAccessToService (RequestAccessToServiceRequest) returns (OutgoingAccessRequest) {
    option (google.api.http) = {post: "/api/v1/directory/organizations/{organizationName}/services/{serviceName}/access-requests"};
  }
}

message DirectoryListServicesResponse {
  repeated DirectoryService services = 1;
}

message GetOrganizationServiceRequest {
  string organizationName = 1;
  string serviceName = 2;
}

message DirectoryAccessRequest {
  string id = 1;
  AccessRequestState state = 2;
  google.protobuf.Timestamp createdAt = 3;
  google.protobuf.Timestamp updatedAt = 4;
}

message DirectoryService {
  enum State {
    unknown = 0;
    up = 1;
    down = 2;
    degraded = 3;
  }

  string serviceName = 1;
  string organizationName = 2;
  string apiSpecificationType = 3 [(gogoproto.customname)="APISpecificationType"];
  string publicSupportContact = 4;
  State state = 5;
  OutgoingAccessRequest latestAccessRequest = 6;
  AccessProof latestAccessProof = 7;
}

message RequestAccessToServiceRequest {
  string organizationName = 1;
  string serviceName = 2;
}

message Settings {
  string organizationInway = 1;
}

message UpdateSettingsRequest{
  string organizationInway = 1;
}
