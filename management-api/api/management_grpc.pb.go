// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: management.proto

package api

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagementServiceClient is the client API for ManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagementServiceClient interface {
	SynchronizeOrders(ctx context.Context, in *SynchronizeOrdersRequest, opts ...grpc.CallOption) (*SynchronizeOrdersResponse, error)
	IsFinanceEnabled(ctx context.Context, in *IsFinanceEnabledRequest, opts ...grpc.CallOption) (*IsFinanceEnabledResponse, error)
	IsTXLogEnabled(ctx context.Context, in *IsTXLogEnabledRequest, opts ...grpc.CallOption) (*IsTXLogEnabledResponse, error)
	DownloadFinanceExport(ctx context.Context, in *DownloadFinanceExportRequest, opts ...grpc.CallOption) (*DownloadFinanceExportResponse, error)
	ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error)
	GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*GetServiceResponse, error)
	CreateService(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*CreateServiceResponse, error)
	UpdateService(ctx context.Context, in *UpdateServiceRequest, opts ...grpc.CallOption) (*UpdateServiceResponse, error)
	DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*DeleteServiceResponse, error)
	GetStatisticsOfServices(ctx context.Context, in *GetStatisticsOfServicesRequest, opts ...grpc.CallOption) (*GetStatisticsOfServicesResponse, error)
	ListInways(ctx context.Context, in *ListInwaysRequest, opts ...grpc.CallOption) (*ListInwaysResponse, error)
	GetInway(ctx context.Context, in *GetInwayRequest, opts ...grpc.CallOption) (*GetInwayResponse, error)
	RegisterInway(ctx context.Context, in *RegisterInwayRequest, opts ...grpc.CallOption) (*RegisterInwayResponse, error)
	UpdateInway(ctx context.Context, in *UpdateInwayRequest, opts ...grpc.CallOption) (*UpdateInwayResponse, error)
	DeleteInway(ctx context.Context, in *DeleteInwayRequest, opts ...grpc.CallOption) (*DeleteInwayResponse, error)
	RegisterOutway(ctx context.Context, in *RegisterOutwayRequest, opts ...grpc.CallOption) (*RegisterOutwayResponse, error)
	ListOutways(ctx context.Context, in *ListOutwaysRequest, opts ...grpc.CallOption) (*ListOutwaysResponse, error)
	DeleteOutway(ctx context.Context, in *DeleteOutwayRequest, opts ...grpc.CallOption) (*DeleteOutwayResponse, error)
	ListIncomingAccessRequests(ctx context.Context, in *ListIncomingAccessRequestsRequest, opts ...grpc.CallOption) (*ListIncomingAccessRequestsResponse, error)
	ApproveIncomingAccessRequest(ctx context.Context, in *ApproveIncomingAccessRequestRequest, opts ...grpc.CallOption) (*ApproveIncomingAccessRequestResponse, error)
	RejectIncomingAccessRequest(ctx context.Context, in *RejectIncomingAccessRequestRequest, opts ...grpc.CallOption) (*RejectIncomingAccessRequestResponse, error)
	WithdrawOutgoingAccessRequest(ctx context.Context, in *WithdrawOutgoingAccessRequestRequest, opts ...grpc.CallOption) (*WithdrawOutgoingAccessRequestResponse, error)
	TerminateAccessProof(ctx context.Context, in *TerminateAccessProofRequest, opts ...grpc.CallOption) (*TerminateAccessProofResponse, error)
	SendAccessRequest(ctx context.Context, in *SendAccessRequestRequest, opts ...grpc.CallOption) (*SendAccessRequestResponse, error)
	GetSettings(ctx context.Context, in *GetSettingsRequest, opts ...grpc.CallOption) (*GetSettingsResponse, error)
	UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*UpdateSettingsResponse, error)
	ListAccessGrantsForService(ctx context.Context, in *ListAccessGrantsForServiceRequest, opts ...grpc.CallOption) (*ListAccessGrantsForServiceResponse, error)
	RevokeAccessGrant(ctx context.Context, in *RevokeAccessGrantRequest, opts ...grpc.CallOption) (*RevokeAccessGrantResponse, error)
	ListAuditLogs(ctx context.Context, in *ListAuditLogsRequest, opts ...grpc.CallOption) (*ListAuditLogsResponse, error)
	CreateOutgoingOrder(ctx context.Context, in *CreateOutgoingOrderRequest, opts ...grpc.CallOption) (*CreateOutgoingOrderResponse, error)
	UpdateOutgoingOrder(ctx context.Context, in *UpdateOutgoingOrderRequest, opts ...grpc.CallOption) (*UpdateOutgoingOrderResponse, error)
	RevokeOutgoingOrder(ctx context.Context, in *RevokeOutgoingOrderRequest, opts ...grpc.CallOption) (*RevokeOutgoingOrderResponse, error)
	ListOutgoingOrders(ctx context.Context, in *ListOutgoingOrdersRequest, opts ...grpc.CallOption) (*ListOutgoingOrdersResponse, error)
	ListIncomingOrders(ctx context.Context, in *ListIncomingOrdersRequest, opts ...grpc.CallOption) (*ListIncomingOrdersResponse, error)
	GetTermsOfServiceStatus(ctx context.Context, in *GetTermsOfServiceStatusRequest, opts ...grpc.CallOption) (*GetTermsOfServiceStatusResponse, error)
	AcceptTermsOfService(ctx context.Context, in *AcceptTermsOfServiceRequest, opts ...grpc.CallOption) (*AcceptTermsOfServiceResponse, error)
	GetInwayConfig(ctx context.Context, in *GetInwayConfigRequest, opts ...grpc.CallOption) (*GetInwayConfigResponse, error)
	SynchronizeOutgoingAccessRequests(ctx context.Context, in *SynchronizeOutgoingAccessRequestsRequest, opts ...grpc.CallOption) (*SynchronizeOutgoingAccessRequestsResponse, error)
	SynchronizeAllOutgoingAccessRequests(ctx context.Context, in *SynchronizeAllOutgoingAccessRequestsRequest, opts ...grpc.CallOption) (*SynchronizeAllOutgoingAccessRequestsResponse, error)
}

type managementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManagementServiceClient(cc grpc.ClientConnInterface) ManagementServiceClient {
	return &managementServiceClient{cc}
}

func (c *managementServiceClient) SynchronizeOrders(ctx context.Context, in *SynchronizeOrdersRequest, opts ...grpc.CallOption) (*SynchronizeOrdersResponse, error) {
	out := new(SynchronizeOrdersResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/SynchronizeOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) IsFinanceEnabled(ctx context.Context, in *IsFinanceEnabledRequest, opts ...grpc.CallOption) (*IsFinanceEnabledResponse, error) {
	out := new(IsFinanceEnabledResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/IsFinanceEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) IsTXLogEnabled(ctx context.Context, in *IsTXLogEnabledRequest, opts ...grpc.CallOption) (*IsTXLogEnabledResponse, error) {
	out := new(IsTXLogEnabledResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/IsTXLogEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) DownloadFinanceExport(ctx context.Context, in *DownloadFinanceExportRequest, opts ...grpc.CallOption) (*DownloadFinanceExportResponse, error) {
	out := new(DownloadFinanceExportResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/DownloadFinanceExport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error) {
	out := new(ListServicesResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/ListServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*GetServiceResponse, error) {
	out := new(GetServiceResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/GetService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) CreateService(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*CreateServiceResponse, error) {
	out := new(CreateServiceResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/CreateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateService(ctx context.Context, in *UpdateServiceRequest, opts ...grpc.CallOption) (*UpdateServiceResponse, error) {
	out := new(UpdateServiceResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/UpdateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*DeleteServiceResponse, error) {
	out := new(DeleteServiceResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/DeleteService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetStatisticsOfServices(ctx context.Context, in *GetStatisticsOfServicesRequest, opts ...grpc.CallOption) (*GetStatisticsOfServicesResponse, error) {
	out := new(GetStatisticsOfServicesResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/GetStatisticsOfServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListInways(ctx context.Context, in *ListInwaysRequest, opts ...grpc.CallOption) (*ListInwaysResponse, error) {
	out := new(ListInwaysResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/ListInways", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetInway(ctx context.Context, in *GetInwayRequest, opts ...grpc.CallOption) (*GetInwayResponse, error) {
	out := new(GetInwayResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/GetInway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RegisterInway(ctx context.Context, in *RegisterInwayRequest, opts ...grpc.CallOption) (*RegisterInwayResponse, error) {
	out := new(RegisterInwayResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/RegisterInway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateInway(ctx context.Context, in *UpdateInwayRequest, opts ...grpc.CallOption) (*UpdateInwayResponse, error) {
	out := new(UpdateInwayResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/UpdateInway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) DeleteInway(ctx context.Context, in *DeleteInwayRequest, opts ...grpc.CallOption) (*DeleteInwayResponse, error) {
	out := new(DeleteInwayResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/DeleteInway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RegisterOutway(ctx context.Context, in *RegisterOutwayRequest, opts ...grpc.CallOption) (*RegisterOutwayResponse, error) {
	out := new(RegisterOutwayResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/RegisterOutway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListOutways(ctx context.Context, in *ListOutwaysRequest, opts ...grpc.CallOption) (*ListOutwaysResponse, error) {
	out := new(ListOutwaysResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/ListOutways", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) DeleteOutway(ctx context.Context, in *DeleteOutwayRequest, opts ...grpc.CallOption) (*DeleteOutwayResponse, error) {
	out := new(DeleteOutwayResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/DeleteOutway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListIncomingAccessRequests(ctx context.Context, in *ListIncomingAccessRequestsRequest, opts ...grpc.CallOption) (*ListIncomingAccessRequestsResponse, error) {
	out := new(ListIncomingAccessRequestsResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/ListIncomingAccessRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ApproveIncomingAccessRequest(ctx context.Context, in *ApproveIncomingAccessRequestRequest, opts ...grpc.CallOption) (*ApproveIncomingAccessRequestResponse, error) {
	out := new(ApproveIncomingAccessRequestResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/ApproveIncomingAccessRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RejectIncomingAccessRequest(ctx context.Context, in *RejectIncomingAccessRequestRequest, opts ...grpc.CallOption) (*RejectIncomingAccessRequestResponse, error) {
	out := new(RejectIncomingAccessRequestResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/RejectIncomingAccessRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) WithdrawOutgoingAccessRequest(ctx context.Context, in *WithdrawOutgoingAccessRequestRequest, opts ...grpc.CallOption) (*WithdrawOutgoingAccessRequestResponse, error) {
	out := new(WithdrawOutgoingAccessRequestResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/WithdrawOutgoingAccessRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) TerminateAccessProof(ctx context.Context, in *TerminateAccessProofRequest, opts ...grpc.CallOption) (*TerminateAccessProofResponse, error) {
	out := new(TerminateAccessProofResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/TerminateAccessProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SendAccessRequest(ctx context.Context, in *SendAccessRequestRequest, opts ...grpc.CallOption) (*SendAccessRequestResponse, error) {
	out := new(SendAccessRequestResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/SendAccessRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetSettings(ctx context.Context, in *GetSettingsRequest, opts ...grpc.CallOption) (*GetSettingsResponse, error) {
	out := new(GetSettingsResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/GetSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*UpdateSettingsResponse, error) {
	out := new(UpdateSettingsResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/UpdateSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListAccessGrantsForService(ctx context.Context, in *ListAccessGrantsForServiceRequest, opts ...grpc.CallOption) (*ListAccessGrantsForServiceResponse, error) {
	out := new(ListAccessGrantsForServiceResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/ListAccessGrantsForService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RevokeAccessGrant(ctx context.Context, in *RevokeAccessGrantRequest, opts ...grpc.CallOption) (*RevokeAccessGrantResponse, error) {
	out := new(RevokeAccessGrantResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/RevokeAccessGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListAuditLogs(ctx context.Context, in *ListAuditLogsRequest, opts ...grpc.CallOption) (*ListAuditLogsResponse, error) {
	out := new(ListAuditLogsResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/ListAuditLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) CreateOutgoingOrder(ctx context.Context, in *CreateOutgoingOrderRequest, opts ...grpc.CallOption) (*CreateOutgoingOrderResponse, error) {
	out := new(CreateOutgoingOrderResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/CreateOutgoingOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateOutgoingOrder(ctx context.Context, in *UpdateOutgoingOrderRequest, opts ...grpc.CallOption) (*UpdateOutgoingOrderResponse, error) {
	out := new(UpdateOutgoingOrderResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/UpdateOutgoingOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RevokeOutgoingOrder(ctx context.Context, in *RevokeOutgoingOrderRequest, opts ...grpc.CallOption) (*RevokeOutgoingOrderResponse, error) {
	out := new(RevokeOutgoingOrderResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/RevokeOutgoingOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListOutgoingOrders(ctx context.Context, in *ListOutgoingOrdersRequest, opts ...grpc.CallOption) (*ListOutgoingOrdersResponse, error) {
	out := new(ListOutgoingOrdersResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/ListOutgoingOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListIncomingOrders(ctx context.Context, in *ListIncomingOrdersRequest, opts ...grpc.CallOption) (*ListIncomingOrdersResponse, error) {
	out := new(ListIncomingOrdersResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/ListIncomingOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetTermsOfServiceStatus(ctx context.Context, in *GetTermsOfServiceStatusRequest, opts ...grpc.CallOption) (*GetTermsOfServiceStatusResponse, error) {
	out := new(GetTermsOfServiceStatusResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/GetTermsOfServiceStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AcceptTermsOfService(ctx context.Context, in *AcceptTermsOfServiceRequest, opts ...grpc.CallOption) (*AcceptTermsOfServiceResponse, error) {
	out := new(AcceptTermsOfServiceResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/AcceptTermsOfService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetInwayConfig(ctx context.Context, in *GetInwayConfigRequest, opts ...grpc.CallOption) (*GetInwayConfigResponse, error) {
	out := new(GetInwayConfigResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/GetInwayConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SynchronizeOutgoingAccessRequests(ctx context.Context, in *SynchronizeOutgoingAccessRequestsRequest, opts ...grpc.CallOption) (*SynchronizeOutgoingAccessRequestsResponse, error) {
	out := new(SynchronizeOutgoingAccessRequestsResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/SynchronizeOutgoingAccessRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SynchronizeAllOutgoingAccessRequests(ctx context.Context, in *SynchronizeAllOutgoingAccessRequestsRequest, opts ...grpc.CallOption) (*SynchronizeAllOutgoingAccessRequestsResponse, error) {
	out := new(SynchronizeAllOutgoingAccessRequestsResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.ManagementService/SynchronizeAllOutgoingAccessRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagementServiceServer is the server API for ManagementService service.
// All implementations must embed UnimplementedManagementServiceServer
// for forward compatibility
type ManagementServiceServer interface {
	SynchronizeOrders(context.Context, *SynchronizeOrdersRequest) (*SynchronizeOrdersResponse, error)
	IsFinanceEnabled(context.Context, *IsFinanceEnabledRequest) (*IsFinanceEnabledResponse, error)
	IsTXLogEnabled(context.Context, *IsTXLogEnabledRequest) (*IsTXLogEnabledResponse, error)
	DownloadFinanceExport(context.Context, *DownloadFinanceExportRequest) (*DownloadFinanceExportResponse, error)
	ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error)
	GetService(context.Context, *GetServiceRequest) (*GetServiceResponse, error)
	CreateService(context.Context, *CreateServiceRequest) (*CreateServiceResponse, error)
	UpdateService(context.Context, *UpdateServiceRequest) (*UpdateServiceResponse, error)
	DeleteService(context.Context, *DeleteServiceRequest) (*DeleteServiceResponse, error)
	GetStatisticsOfServices(context.Context, *GetStatisticsOfServicesRequest) (*GetStatisticsOfServicesResponse, error)
	ListInways(context.Context, *ListInwaysRequest) (*ListInwaysResponse, error)
	GetInway(context.Context, *GetInwayRequest) (*GetInwayResponse, error)
	RegisterInway(context.Context, *RegisterInwayRequest) (*RegisterInwayResponse, error)
	UpdateInway(context.Context, *UpdateInwayRequest) (*UpdateInwayResponse, error)
	DeleteInway(context.Context, *DeleteInwayRequest) (*DeleteInwayResponse, error)
	RegisterOutway(context.Context, *RegisterOutwayRequest) (*RegisterOutwayResponse, error)
	ListOutways(context.Context, *ListOutwaysRequest) (*ListOutwaysResponse, error)
	DeleteOutway(context.Context, *DeleteOutwayRequest) (*DeleteOutwayResponse, error)
	ListIncomingAccessRequests(context.Context, *ListIncomingAccessRequestsRequest) (*ListIncomingAccessRequestsResponse, error)
	ApproveIncomingAccessRequest(context.Context, *ApproveIncomingAccessRequestRequest) (*ApproveIncomingAccessRequestResponse, error)
	RejectIncomingAccessRequest(context.Context, *RejectIncomingAccessRequestRequest) (*RejectIncomingAccessRequestResponse, error)
	WithdrawOutgoingAccessRequest(context.Context, *WithdrawOutgoingAccessRequestRequest) (*WithdrawOutgoingAccessRequestResponse, error)
	TerminateAccessProof(context.Context, *TerminateAccessProofRequest) (*TerminateAccessProofResponse, error)
	SendAccessRequest(context.Context, *SendAccessRequestRequest) (*SendAccessRequestResponse, error)
	GetSettings(context.Context, *GetSettingsRequest) (*GetSettingsResponse, error)
	UpdateSettings(context.Context, *UpdateSettingsRequest) (*UpdateSettingsResponse, error)
	ListAccessGrantsForService(context.Context, *ListAccessGrantsForServiceRequest) (*ListAccessGrantsForServiceResponse, error)
	RevokeAccessGrant(context.Context, *RevokeAccessGrantRequest) (*RevokeAccessGrantResponse, error)
	ListAuditLogs(context.Context, *ListAuditLogsRequest) (*ListAuditLogsResponse, error)
	CreateOutgoingOrder(context.Context, *CreateOutgoingOrderRequest) (*CreateOutgoingOrderResponse, error)
	UpdateOutgoingOrder(context.Context, *UpdateOutgoingOrderRequest) (*UpdateOutgoingOrderResponse, error)
	RevokeOutgoingOrder(context.Context, *RevokeOutgoingOrderRequest) (*RevokeOutgoingOrderResponse, error)
	ListOutgoingOrders(context.Context, *ListOutgoingOrdersRequest) (*ListOutgoingOrdersResponse, error)
	ListIncomingOrders(context.Context, *ListIncomingOrdersRequest) (*ListIncomingOrdersResponse, error)
	GetTermsOfServiceStatus(context.Context, *GetTermsOfServiceStatusRequest) (*GetTermsOfServiceStatusResponse, error)
	AcceptTermsOfService(context.Context, *AcceptTermsOfServiceRequest) (*AcceptTermsOfServiceResponse, error)
	GetInwayConfig(context.Context, *GetInwayConfigRequest) (*GetInwayConfigResponse, error)
	SynchronizeOutgoingAccessRequests(context.Context, *SynchronizeOutgoingAccessRequestsRequest) (*SynchronizeOutgoingAccessRequestsResponse, error)
	SynchronizeAllOutgoingAccessRequests(context.Context, *SynchronizeAllOutgoingAccessRequestsRequest) (*SynchronizeAllOutgoingAccessRequestsResponse, error)
	mustEmbedUnimplementedManagementServiceServer()
}

// UnimplementedManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedManagementServiceServer struct {
}

func (UnimplementedManagementServiceServer) SynchronizeOrders(context.Context, *SynchronizeOrdersRequest) (*SynchronizeOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SynchronizeOrders not implemented")
}
func (UnimplementedManagementServiceServer) IsFinanceEnabled(context.Context, *IsFinanceEnabledRequest) (*IsFinanceEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFinanceEnabled not implemented")
}
func (UnimplementedManagementServiceServer) IsTXLogEnabled(context.Context, *IsTXLogEnabledRequest) (*IsTXLogEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsTXLogEnabled not implemented")
}
func (UnimplementedManagementServiceServer) DownloadFinanceExport(context.Context, *DownloadFinanceExportRequest) (*DownloadFinanceExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadFinanceExport not implemented")
}
func (UnimplementedManagementServiceServer) ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (UnimplementedManagementServiceServer) GetService(context.Context, *GetServiceRequest) (*GetServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetService not implemented")
}
func (UnimplementedManagementServiceServer) CreateService(context.Context, *CreateServiceRequest) (*CreateServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateService not implemented")
}
func (UnimplementedManagementServiceServer) UpdateService(context.Context, *UpdateServiceRequest) (*UpdateServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateService not implemented")
}
func (UnimplementedManagementServiceServer) DeleteService(context.Context, *DeleteServiceRequest) (*DeleteServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteService not implemented")
}
func (UnimplementedManagementServiceServer) GetStatisticsOfServices(context.Context, *GetStatisticsOfServicesRequest) (*GetStatisticsOfServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatisticsOfServices not implemented")
}
func (UnimplementedManagementServiceServer) ListInways(context.Context, *ListInwaysRequest) (*ListInwaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInways not implemented")
}
func (UnimplementedManagementServiceServer) GetInway(context.Context, *GetInwayRequest) (*GetInwayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInway not implemented")
}
func (UnimplementedManagementServiceServer) RegisterInway(context.Context, *RegisterInwayRequest) (*RegisterInwayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterInway not implemented")
}
func (UnimplementedManagementServiceServer) UpdateInway(context.Context, *UpdateInwayRequest) (*UpdateInwayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInway not implemented")
}
func (UnimplementedManagementServiceServer) DeleteInway(context.Context, *DeleteInwayRequest) (*DeleteInwayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInway not implemented")
}
func (UnimplementedManagementServiceServer) RegisterOutway(context.Context, *RegisterOutwayRequest) (*RegisterOutwayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterOutway not implemented")
}
func (UnimplementedManagementServiceServer) ListOutways(context.Context, *ListOutwaysRequest) (*ListOutwaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOutways not implemented")
}
func (UnimplementedManagementServiceServer) DeleteOutway(context.Context, *DeleteOutwayRequest) (*DeleteOutwayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOutway not implemented")
}
func (UnimplementedManagementServiceServer) ListIncomingAccessRequests(context.Context, *ListIncomingAccessRequestsRequest) (*ListIncomingAccessRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIncomingAccessRequests not implemented")
}
func (UnimplementedManagementServiceServer) ApproveIncomingAccessRequest(context.Context, *ApproveIncomingAccessRequestRequest) (*ApproveIncomingAccessRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveIncomingAccessRequest not implemented")
}
func (UnimplementedManagementServiceServer) RejectIncomingAccessRequest(context.Context, *RejectIncomingAccessRequestRequest) (*RejectIncomingAccessRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectIncomingAccessRequest not implemented")
}
func (UnimplementedManagementServiceServer) WithdrawOutgoingAccessRequest(context.Context, *WithdrawOutgoingAccessRequestRequest) (*WithdrawOutgoingAccessRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawOutgoingAccessRequest not implemented")
}
func (UnimplementedManagementServiceServer) TerminateAccessProof(context.Context, *TerminateAccessProofRequest) (*TerminateAccessProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateAccessProof not implemented")
}
func (UnimplementedManagementServiceServer) SendAccessRequest(context.Context, *SendAccessRequestRequest) (*SendAccessRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAccessRequest not implemented")
}
func (UnimplementedManagementServiceServer) GetSettings(context.Context, *GetSettingsRequest) (*GetSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettings not implemented")
}
func (UnimplementedManagementServiceServer) UpdateSettings(context.Context, *UpdateSettingsRequest) (*UpdateSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSettings not implemented")
}
func (UnimplementedManagementServiceServer) ListAccessGrantsForService(context.Context, *ListAccessGrantsForServiceRequest) (*ListAccessGrantsForServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccessGrantsForService not implemented")
}
func (UnimplementedManagementServiceServer) RevokeAccessGrant(context.Context, *RevokeAccessGrantRequest) (*RevokeAccessGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeAccessGrant not implemented")
}
func (UnimplementedManagementServiceServer) ListAuditLogs(context.Context, *ListAuditLogsRequest) (*ListAuditLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuditLogs not implemented")
}
func (UnimplementedManagementServiceServer) CreateOutgoingOrder(context.Context, *CreateOutgoingOrderRequest) (*CreateOutgoingOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOutgoingOrder not implemented")
}
func (UnimplementedManagementServiceServer) UpdateOutgoingOrder(context.Context, *UpdateOutgoingOrderRequest) (*UpdateOutgoingOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOutgoingOrder not implemented")
}
func (UnimplementedManagementServiceServer) RevokeOutgoingOrder(context.Context, *RevokeOutgoingOrderRequest) (*RevokeOutgoingOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeOutgoingOrder not implemented")
}
func (UnimplementedManagementServiceServer) ListOutgoingOrders(context.Context, *ListOutgoingOrdersRequest) (*ListOutgoingOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOutgoingOrders not implemented")
}
func (UnimplementedManagementServiceServer) ListIncomingOrders(context.Context, *ListIncomingOrdersRequest) (*ListIncomingOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIncomingOrders not implemented")
}
func (UnimplementedManagementServiceServer) GetTermsOfServiceStatus(context.Context, *GetTermsOfServiceStatusRequest) (*GetTermsOfServiceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTermsOfServiceStatus not implemented")
}
func (UnimplementedManagementServiceServer) AcceptTermsOfService(context.Context, *AcceptTermsOfServiceRequest) (*AcceptTermsOfServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptTermsOfService not implemented")
}
func (UnimplementedManagementServiceServer) GetInwayConfig(context.Context, *GetInwayConfigRequest) (*GetInwayConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInwayConfig not implemented")
}
func (UnimplementedManagementServiceServer) SynchronizeOutgoingAccessRequests(context.Context, *SynchronizeOutgoingAccessRequestsRequest) (*SynchronizeOutgoingAccessRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SynchronizeOutgoingAccessRequests not implemented")
}
func (UnimplementedManagementServiceServer) SynchronizeAllOutgoingAccessRequests(context.Context, *SynchronizeAllOutgoingAccessRequestsRequest) (*SynchronizeAllOutgoingAccessRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SynchronizeAllOutgoingAccessRequests not implemented")
}
func (UnimplementedManagementServiceServer) mustEmbedUnimplementedManagementServiceServer() {}

// UnsafeManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagementServiceServer will
// result in compilation errors.
type UnsafeManagementServiceServer interface {
	mustEmbedUnimplementedManagementServiceServer()
}

func RegisterManagementServiceServer(s grpc.ServiceRegistrar, srv ManagementServiceServer) {
	s.RegisterService(&ManagementService_ServiceDesc, srv)
}

func _ManagementService_SynchronizeOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SynchronizeOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SynchronizeOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/SynchronizeOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SynchronizeOrders(ctx, req.(*SynchronizeOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_IsFinanceEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsFinanceEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).IsFinanceEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/IsFinanceEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).IsFinanceEnabled(ctx, req.(*IsFinanceEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_IsTXLogEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsTXLogEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).IsTXLogEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/IsTXLogEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).IsTXLogEnabled(ctx, req.(*IsTXLogEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_DownloadFinanceExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadFinanceExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).DownloadFinanceExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/DownloadFinanceExport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).DownloadFinanceExport(ctx, req.(*DownloadFinanceExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/ListServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListServices(ctx, req.(*ListServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetService(ctx, req.(*GetServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/CreateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).CreateService(ctx, req.(*CreateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/UpdateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateService(ctx, req.(*UpdateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/DeleteService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).DeleteService(ctx, req.(*DeleteServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetStatisticsOfServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatisticsOfServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetStatisticsOfServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/GetStatisticsOfServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetStatisticsOfServices(ctx, req.(*GetStatisticsOfServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListInways_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInwaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListInways(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/ListInways",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListInways(ctx, req.(*ListInwaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetInway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInwayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetInway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/GetInway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetInway(ctx, req.(*GetInwayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RegisterInway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterInwayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RegisterInway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/RegisterInway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RegisterInway(ctx, req.(*RegisterInwayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateInway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInwayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateInway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/UpdateInway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateInway(ctx, req.(*UpdateInwayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_DeleteInway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInwayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).DeleteInway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/DeleteInway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).DeleteInway(ctx, req.(*DeleteInwayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RegisterOutway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterOutwayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RegisterOutway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/RegisterOutway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RegisterOutway(ctx, req.(*RegisterOutwayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListOutways_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOutwaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListOutways(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/ListOutways",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListOutways(ctx, req.(*ListOutwaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_DeleteOutway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOutwayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).DeleteOutway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/DeleteOutway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).DeleteOutway(ctx, req.(*DeleteOutwayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListIncomingAccessRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIncomingAccessRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListIncomingAccessRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/ListIncomingAccessRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListIncomingAccessRequests(ctx, req.(*ListIncomingAccessRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ApproveIncomingAccessRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveIncomingAccessRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ApproveIncomingAccessRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/ApproveIncomingAccessRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ApproveIncomingAccessRequest(ctx, req.(*ApproveIncomingAccessRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RejectIncomingAccessRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectIncomingAccessRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RejectIncomingAccessRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/RejectIncomingAccessRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RejectIncomingAccessRequest(ctx, req.(*RejectIncomingAccessRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_WithdrawOutgoingAccessRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawOutgoingAccessRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).WithdrawOutgoingAccessRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/WithdrawOutgoingAccessRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).WithdrawOutgoingAccessRequest(ctx, req.(*WithdrawOutgoingAccessRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_TerminateAccessProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateAccessProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).TerminateAccessProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/TerminateAccessProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).TerminateAccessProof(ctx, req.(*TerminateAccessProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SendAccessRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAccessRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SendAccessRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/SendAccessRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SendAccessRequest(ctx, req.(*SendAccessRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/GetSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetSettings(ctx, req.(*GetSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/UpdateSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateSettings(ctx, req.(*UpdateSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListAccessGrantsForService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccessGrantsForServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListAccessGrantsForService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/ListAccessGrantsForService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListAccessGrantsForService(ctx, req.(*ListAccessGrantsForServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RevokeAccessGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeAccessGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RevokeAccessGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/RevokeAccessGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RevokeAccessGrant(ctx, req.(*RevokeAccessGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListAuditLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuditLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListAuditLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/ListAuditLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListAuditLogs(ctx, req.(*ListAuditLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_CreateOutgoingOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOutgoingOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).CreateOutgoingOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/CreateOutgoingOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).CreateOutgoingOrder(ctx, req.(*CreateOutgoingOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateOutgoingOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOutgoingOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateOutgoingOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/UpdateOutgoingOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateOutgoingOrder(ctx, req.(*UpdateOutgoingOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RevokeOutgoingOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeOutgoingOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RevokeOutgoingOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/RevokeOutgoingOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RevokeOutgoingOrder(ctx, req.(*RevokeOutgoingOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListOutgoingOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOutgoingOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListOutgoingOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/ListOutgoingOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListOutgoingOrders(ctx, req.(*ListOutgoingOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListIncomingOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIncomingOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListIncomingOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/ListIncomingOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListIncomingOrders(ctx, req.(*ListIncomingOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetTermsOfServiceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTermsOfServiceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetTermsOfServiceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/GetTermsOfServiceStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetTermsOfServiceStatus(ctx, req.(*GetTermsOfServiceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AcceptTermsOfService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptTermsOfServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AcceptTermsOfService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/AcceptTermsOfService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AcceptTermsOfService(ctx, req.(*AcceptTermsOfServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetInwayConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInwayConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetInwayConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/GetInwayConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetInwayConfig(ctx, req.(*GetInwayConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SynchronizeOutgoingAccessRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SynchronizeOutgoingAccessRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SynchronizeOutgoingAccessRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/SynchronizeOutgoingAccessRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SynchronizeOutgoingAccessRequests(ctx, req.(*SynchronizeOutgoingAccessRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SynchronizeAllOutgoingAccessRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SynchronizeAllOutgoingAccessRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SynchronizeAllOutgoingAccessRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.ManagementService/SynchronizeAllOutgoingAccessRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SynchronizeAllOutgoingAccessRequests(ctx, req.(*SynchronizeAllOutgoingAccessRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagementService_ServiceDesc is the grpc.ServiceDesc for ManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nlx.management.ManagementService",
	HandlerType: (*ManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SynchronizeOrders",
			Handler:    _ManagementService_SynchronizeOrders_Handler,
		},
		{
			MethodName: "IsFinanceEnabled",
			Handler:    _ManagementService_IsFinanceEnabled_Handler,
		},
		{
			MethodName: "IsTXLogEnabled",
			Handler:    _ManagementService_IsTXLogEnabled_Handler,
		},
		{
			MethodName: "DownloadFinanceExport",
			Handler:    _ManagementService_DownloadFinanceExport_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _ManagementService_ListServices_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _ManagementService_GetService_Handler,
		},
		{
			MethodName: "CreateService",
			Handler:    _ManagementService_CreateService_Handler,
		},
		{
			MethodName: "UpdateService",
			Handler:    _ManagementService_UpdateService_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _ManagementService_DeleteService_Handler,
		},
		{
			MethodName: "GetStatisticsOfServices",
			Handler:    _ManagementService_GetStatisticsOfServices_Handler,
		},
		{
			MethodName: "ListInways",
			Handler:    _ManagementService_ListInways_Handler,
		},
		{
			MethodName: "GetInway",
			Handler:    _ManagementService_GetInway_Handler,
		},
		{
			MethodName: "RegisterInway",
			Handler:    _ManagementService_RegisterInway_Handler,
		},
		{
			MethodName: "UpdateInway",
			Handler:    _ManagementService_UpdateInway_Handler,
		},
		{
			MethodName: "DeleteInway",
			Handler:    _ManagementService_DeleteInway_Handler,
		},
		{
			MethodName: "RegisterOutway",
			Handler:    _ManagementService_RegisterOutway_Handler,
		},
		{
			MethodName: "ListOutways",
			Handler:    _ManagementService_ListOutways_Handler,
		},
		{
			MethodName: "DeleteOutway",
			Handler:    _ManagementService_DeleteOutway_Handler,
		},
		{
			MethodName: "ListIncomingAccessRequests",
			Handler:    _ManagementService_ListIncomingAccessRequests_Handler,
		},
		{
			MethodName: "ApproveIncomingAccessRequest",
			Handler:    _ManagementService_ApproveIncomingAccessRequest_Handler,
		},
		{
			MethodName: "RejectIncomingAccessRequest",
			Handler:    _ManagementService_RejectIncomingAccessRequest_Handler,
		},
		{
			MethodName: "WithdrawOutgoingAccessRequest",
			Handler:    _ManagementService_WithdrawOutgoingAccessRequest_Handler,
		},
		{
			MethodName: "TerminateAccessProof",
			Handler:    _ManagementService_TerminateAccessProof_Handler,
		},
		{
			MethodName: "SendAccessRequest",
			Handler:    _ManagementService_SendAccessRequest_Handler,
		},
		{
			MethodName: "GetSettings",
			Handler:    _ManagementService_GetSettings_Handler,
		},
		{
			MethodName: "UpdateSettings",
			Handler:    _ManagementService_UpdateSettings_Handler,
		},
		{
			MethodName: "ListAccessGrantsForService",
			Handler:    _ManagementService_ListAccessGrantsForService_Handler,
		},
		{
			MethodName: "RevokeAccessGrant",
			Handler:    _ManagementService_RevokeAccessGrant_Handler,
		},
		{
			MethodName: "ListAuditLogs",
			Handler:    _ManagementService_ListAuditLogs_Handler,
		},
		{
			MethodName: "CreateOutgoingOrder",
			Handler:    _ManagementService_CreateOutgoingOrder_Handler,
		},
		{
			MethodName: "UpdateOutgoingOrder",
			Handler:    _ManagementService_UpdateOutgoingOrder_Handler,
		},
		{
			MethodName: "RevokeOutgoingOrder",
			Handler:    _ManagementService_RevokeOutgoingOrder_Handler,
		},
		{
			MethodName: "ListOutgoingOrders",
			Handler:    _ManagementService_ListOutgoingOrders_Handler,
		},
		{
			MethodName: "ListIncomingOrders",
			Handler:    _ManagementService_ListIncomingOrders_Handler,
		},
		{
			MethodName: "GetTermsOfServiceStatus",
			Handler:    _ManagementService_GetTermsOfServiceStatus_Handler,
		},
		{
			MethodName: "AcceptTermsOfService",
			Handler:    _ManagementService_AcceptTermsOfService_Handler,
		},
		{
			MethodName: "GetInwayConfig",
			Handler:    _ManagementService_GetInwayConfig_Handler,
		},
		{
			MethodName: "SynchronizeOutgoingAccessRequests",
			Handler:    _ManagementService_SynchronizeOutgoingAccessRequests_Handler,
		},
		{
			MethodName: "SynchronizeAllOutgoingAccessRequests",
			Handler:    _ManagementService_SynchronizeAllOutgoingAccessRequests_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "management.proto",
}

// DirectoryServiceClient is the client API for DirectoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DirectoryServiceClient interface {
	ListServices(ctx context.Context, in *DirectoryServiceListServicesRequest, opts ...grpc.CallOption) (*DirectoryServiceListServicesResponse, error)
	GetOrganizationService(ctx context.Context, in *GetOrganizationServiceRequest, opts ...grpc.CallOption) (*GetOrganizationServiceResponse, error)
	RequestAccessToService(ctx context.Context, in *RequestAccessToServiceRequest, opts ...grpc.CallOption) (*RequestAccessToServiceResponse, error)
	GetTermsOfService(ctx context.Context, in *GetTermsOfServiceRequest, opts ...grpc.CallOption) (*GetTermsOfServiceResponse, error)
}

type directoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDirectoryServiceClient(cc grpc.ClientConnInterface) DirectoryServiceClient {
	return &directoryServiceClient{cc}
}

func (c *directoryServiceClient) ListServices(ctx context.Context, in *DirectoryServiceListServicesRequest, opts ...grpc.CallOption) (*DirectoryServiceListServicesResponse, error) {
	out := new(DirectoryServiceListServicesResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.DirectoryService/ListServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryServiceClient) GetOrganizationService(ctx context.Context, in *GetOrganizationServiceRequest, opts ...grpc.CallOption) (*GetOrganizationServiceResponse, error) {
	out := new(GetOrganizationServiceResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.DirectoryService/GetOrganizationService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryServiceClient) RequestAccessToService(ctx context.Context, in *RequestAccessToServiceRequest, opts ...grpc.CallOption) (*RequestAccessToServiceResponse, error) {
	out := new(RequestAccessToServiceResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.DirectoryService/RequestAccessToService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryServiceClient) GetTermsOfService(ctx context.Context, in *GetTermsOfServiceRequest, opts ...grpc.CallOption) (*GetTermsOfServiceResponse, error) {
	out := new(GetTermsOfServiceResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.DirectoryService/GetTermsOfService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DirectoryServiceServer is the server API for DirectoryService service.
// All implementations must embed UnimplementedDirectoryServiceServer
// for forward compatibility
type DirectoryServiceServer interface {
	ListServices(context.Context, *DirectoryServiceListServicesRequest) (*DirectoryServiceListServicesResponse, error)
	GetOrganizationService(context.Context, *GetOrganizationServiceRequest) (*GetOrganizationServiceResponse, error)
	RequestAccessToService(context.Context, *RequestAccessToServiceRequest) (*RequestAccessToServiceResponse, error)
	GetTermsOfService(context.Context, *GetTermsOfServiceRequest) (*GetTermsOfServiceResponse, error)
	mustEmbedUnimplementedDirectoryServiceServer()
}

// UnimplementedDirectoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDirectoryServiceServer struct {
}

func (UnimplementedDirectoryServiceServer) ListServices(context.Context, *DirectoryServiceListServicesRequest) (*DirectoryServiceListServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (UnimplementedDirectoryServiceServer) GetOrganizationService(context.Context, *GetOrganizationServiceRequest) (*GetOrganizationServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationService not implemented")
}
func (UnimplementedDirectoryServiceServer) RequestAccessToService(context.Context, *RequestAccessToServiceRequest) (*RequestAccessToServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAccessToService not implemented")
}
func (UnimplementedDirectoryServiceServer) GetTermsOfService(context.Context, *GetTermsOfServiceRequest) (*GetTermsOfServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTermsOfService not implemented")
}
func (UnimplementedDirectoryServiceServer) mustEmbedUnimplementedDirectoryServiceServer() {}

// UnsafeDirectoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DirectoryServiceServer will
// result in compilation errors.
type UnsafeDirectoryServiceServer interface {
	mustEmbedUnimplementedDirectoryServiceServer()
}

func RegisterDirectoryServiceServer(s grpc.ServiceRegistrar, srv DirectoryServiceServer) {
	s.RegisterService(&DirectoryService_ServiceDesc, srv)
}

func _DirectoryService_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryServiceListServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServiceServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.DirectoryService/ListServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServiceServer).ListServices(ctx, req.(*DirectoryServiceListServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryService_GetOrganizationService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServiceServer).GetOrganizationService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.DirectoryService/GetOrganizationService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServiceServer).GetOrganizationService(ctx, req.(*GetOrganizationServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryService_RequestAccessToService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAccessToServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServiceServer).RequestAccessToService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.DirectoryService/RequestAccessToService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServiceServer).RequestAccessToService(ctx, req.(*RequestAccessToServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryService_GetTermsOfService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTermsOfServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServiceServer).GetTermsOfService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.DirectoryService/GetTermsOfService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServiceServer).GetTermsOfService(ctx, req.(*GetTermsOfServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DirectoryService_ServiceDesc is the grpc.ServiceDesc for DirectoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DirectoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nlx.management.DirectoryService",
	HandlerType: (*DirectoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListServices",
			Handler:    _DirectoryService_ListServices_Handler,
		},
		{
			MethodName: "GetOrganizationService",
			Handler:    _DirectoryService_GetOrganizationService_Handler,
		},
		{
			MethodName: "RequestAccessToService",
			Handler:    _DirectoryService_RequestAccessToService_Handler,
		},
		{
			MethodName: "GetTermsOfService",
			Handler:    _DirectoryService_GetTermsOfService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "management.proto",
}

// TXLogServiceClient is the client API for TXLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TXLogServiceClient interface {
	ListRecords(ctx context.Context, in *TXLogServiceListRecordsRequest, opts ...grpc.CallOption) (*TXLogServiceListRecordsResponse, error)
}

type tXLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTXLogServiceClient(cc grpc.ClientConnInterface) TXLogServiceClient {
	return &tXLogServiceClient{cc}
}

func (c *tXLogServiceClient) ListRecords(ctx context.Context, in *TXLogServiceListRecordsRequest, opts ...grpc.CallOption) (*TXLogServiceListRecordsResponse, error) {
	out := new(TXLogServiceListRecordsResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.TXLogService/ListRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TXLogServiceServer is the server API for TXLogService service.
// All implementations must embed UnimplementedTXLogServiceServer
// for forward compatibility
type TXLogServiceServer interface {
	ListRecords(context.Context, *TXLogServiceListRecordsRequest) (*TXLogServiceListRecordsResponse, error)
	mustEmbedUnimplementedTXLogServiceServer()
}

// UnimplementedTXLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTXLogServiceServer struct {
}

func (UnimplementedTXLogServiceServer) ListRecords(context.Context, *TXLogServiceListRecordsRequest) (*TXLogServiceListRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecords not implemented")
}
func (UnimplementedTXLogServiceServer) mustEmbedUnimplementedTXLogServiceServer() {}

// UnsafeTXLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TXLogServiceServer will
// result in compilation errors.
type UnsafeTXLogServiceServer interface {
	mustEmbedUnimplementedTXLogServiceServer()
}

func RegisterTXLogServiceServer(s grpc.ServiceRegistrar, srv TXLogServiceServer) {
	s.RegisterService(&TXLogService_ServiceDesc, srv)
}

func _TXLogService_ListRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TXLogServiceListRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TXLogServiceServer).ListRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.TXLogService/ListRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TXLogServiceServer).ListRecords(ctx, req.(*TXLogServiceListRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TXLogService_ServiceDesc is the grpc.ServiceDesc for TXLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TXLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nlx.management.TXLogService",
	HandlerType: (*TXLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRecords",
			Handler:    _TXLogService_ListRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "management.proto",
}
