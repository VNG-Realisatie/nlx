// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagementClient is the client API for Management service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagementClient interface {
	IsFinanceEnabled(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*IsFinanceEnabledResponse, error)
	DownloadFinanceExport(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DownloadFinanceExportResponse, error)
	ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error)
	GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*GetServiceResponse, error)
	CreateService(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*CreateServiceResponse, error)
	UpdateService(ctx context.Context, in *UpdateServiceRequest, opts ...grpc.CallOption) (*UpdateServiceResponse, error)
	DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetStatisticsOfServices(ctx context.Context, in *GetStatisticsOfServicesRequest, opts ...grpc.CallOption) (*GetStatisticsOfServicesResponse, error)
	ListInways(ctx context.Context, in *ListInwaysRequest, opts ...grpc.CallOption) (*ListInwaysResponse, error)
	GetInway(ctx context.Context, in *GetInwayRequest, opts ...grpc.CallOption) (*Inway, error)
	CreateInway(ctx context.Context, in *Inway, opts ...grpc.CallOption) (*Inway, error)
	UpdateInway(ctx context.Context, in *UpdateInwayRequest, opts ...grpc.CallOption) (*Inway, error)
	DeleteInway(ctx context.Context, in *DeleteInwayRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PutInsightConfiguration(ctx context.Context, in *InsightConfiguration, opts ...grpc.CallOption) (*InsightConfiguration, error)
	GetInsightConfiguration(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InsightConfiguration, error)
	ListIncomingAccessRequest(ctx context.Context, in *ListIncomingAccessRequestsRequests, opts ...grpc.CallOption) (*ListIncomingAccessRequestsResponse, error)
	ApproveIncomingAccessRequest(ctx context.Context, in *ApproveIncomingAccessRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RejectIncomingAccessRequest(ctx context.Context, in *RejectIncomingAccessRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListOutgoingAccessRequests(ctx context.Context, in *ListOutgoingAccessRequestsRequest, opts ...grpc.CallOption) (*ListOutgoingAccessRequestsResponse, error)
	CreateAccessRequest(ctx context.Context, in *CreateAccessRequestRequest, opts ...grpc.CallOption) (*OutgoingAccessRequest, error)
	SendAccessRequest(ctx context.Context, in *SendAccessRequestRequest, opts ...grpc.CallOption) (*OutgoingAccessRequest, error)
	GetSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Settings, error)
	UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListAccessGrantsForService(ctx context.Context, in *ListAccessGrantsForServiceRequest, opts ...grpc.CallOption) (*ListAccessGrantsForServiceResponse, error)
	RevokeAccessGrant(ctx context.Context, in *RevokeAccessGrantRequest, opts ...grpc.CallOption) (*AccessGrant, error)
	ListAuditLogs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAuditLogsResponse, error)
}

type managementClient struct {
	cc grpc.ClientConnInterface
}

func NewManagementClient(cc grpc.ClientConnInterface) ManagementClient {
	return &managementClient{cc}
}

func (c *managementClient) IsFinanceEnabled(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*IsFinanceEnabledResponse, error) {
	out := new(IsFinanceEnabledResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/IsFinanceEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) DownloadFinanceExport(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DownloadFinanceExportResponse, error) {
	out := new(DownloadFinanceExportResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/DownloadFinanceExport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error) {
	out := new(ListServicesResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/ListServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*GetServiceResponse, error) {
	out := new(GetServiceResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/GetService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) CreateService(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*CreateServiceResponse, error) {
	out := new(CreateServiceResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/CreateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) UpdateService(ctx context.Context, in *UpdateServiceRequest, opts ...grpc.CallOption) (*UpdateServiceResponse, error) {
	out := new(UpdateServiceResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/UpdateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/DeleteService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetStatisticsOfServices(ctx context.Context, in *GetStatisticsOfServicesRequest, opts ...grpc.CallOption) (*GetStatisticsOfServicesResponse, error) {
	out := new(GetStatisticsOfServicesResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/GetStatisticsOfServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ListInways(ctx context.Context, in *ListInwaysRequest, opts ...grpc.CallOption) (*ListInwaysResponse, error) {
	out := new(ListInwaysResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/ListInways", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetInway(ctx context.Context, in *GetInwayRequest, opts ...grpc.CallOption) (*Inway, error) {
	out := new(Inway)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/GetInway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) CreateInway(ctx context.Context, in *Inway, opts ...grpc.CallOption) (*Inway, error) {
	out := new(Inway)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/CreateInway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) UpdateInway(ctx context.Context, in *UpdateInwayRequest, opts ...grpc.CallOption) (*Inway, error) {
	out := new(Inway)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/UpdateInway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) DeleteInway(ctx context.Context, in *DeleteInwayRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/DeleteInway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) PutInsightConfiguration(ctx context.Context, in *InsightConfiguration, opts ...grpc.CallOption) (*InsightConfiguration, error) {
	out := new(InsightConfiguration)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/PutInsightConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetInsightConfiguration(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InsightConfiguration, error) {
	out := new(InsightConfiguration)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/GetInsightConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ListIncomingAccessRequest(ctx context.Context, in *ListIncomingAccessRequestsRequests, opts ...grpc.CallOption) (*ListIncomingAccessRequestsResponse, error) {
	out := new(ListIncomingAccessRequestsResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/ListIncomingAccessRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ApproveIncomingAccessRequest(ctx context.Context, in *ApproveIncomingAccessRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/ApproveIncomingAccessRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) RejectIncomingAccessRequest(ctx context.Context, in *RejectIncomingAccessRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/RejectIncomingAccessRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ListOutgoingAccessRequests(ctx context.Context, in *ListOutgoingAccessRequestsRequest, opts ...grpc.CallOption) (*ListOutgoingAccessRequestsResponse, error) {
	out := new(ListOutgoingAccessRequestsResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/ListOutgoingAccessRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) CreateAccessRequest(ctx context.Context, in *CreateAccessRequestRequest, opts ...grpc.CallOption) (*OutgoingAccessRequest, error) {
	out := new(OutgoingAccessRequest)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/CreateAccessRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) SendAccessRequest(ctx context.Context, in *SendAccessRequestRequest, opts ...grpc.CallOption) (*OutgoingAccessRequest, error) {
	out := new(OutgoingAccessRequest)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/SendAccessRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Settings, error) {
	out := new(Settings)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/GetSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/UpdateSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ListAccessGrantsForService(ctx context.Context, in *ListAccessGrantsForServiceRequest, opts ...grpc.CallOption) (*ListAccessGrantsForServiceResponse, error) {
	out := new(ListAccessGrantsForServiceResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/ListAccessGrantsForService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) RevokeAccessGrant(ctx context.Context, in *RevokeAccessGrantRequest, opts ...grpc.CallOption) (*AccessGrant, error) {
	out := new(AccessGrant)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/RevokeAccessGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ListAuditLogs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAuditLogsResponse, error) {
	out := new(ListAuditLogsResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.Management/ListAuditLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagementServer is the server API for Management service.
// All implementations must embed UnimplementedManagementServer
// for forward compatibility
type ManagementServer interface {
	IsFinanceEnabled(context.Context, *emptypb.Empty) (*IsFinanceEnabledResponse, error)
	DownloadFinanceExport(context.Context, *emptypb.Empty) (*DownloadFinanceExportResponse, error)
	ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error)
	GetService(context.Context, *GetServiceRequest) (*GetServiceResponse, error)
	CreateService(context.Context, *CreateServiceRequest) (*CreateServiceResponse, error)
	UpdateService(context.Context, *UpdateServiceRequest) (*UpdateServiceResponse, error)
	DeleteService(context.Context, *DeleteServiceRequest) (*emptypb.Empty, error)
	GetStatisticsOfServices(context.Context, *GetStatisticsOfServicesRequest) (*GetStatisticsOfServicesResponse, error)
	ListInways(context.Context, *ListInwaysRequest) (*ListInwaysResponse, error)
	GetInway(context.Context, *GetInwayRequest) (*Inway, error)
	CreateInway(context.Context, *Inway) (*Inway, error)
	UpdateInway(context.Context, *UpdateInwayRequest) (*Inway, error)
	DeleteInway(context.Context, *DeleteInwayRequest) (*emptypb.Empty, error)
	PutInsightConfiguration(context.Context, *InsightConfiguration) (*InsightConfiguration, error)
	GetInsightConfiguration(context.Context, *emptypb.Empty) (*InsightConfiguration, error)
	ListIncomingAccessRequest(context.Context, *ListIncomingAccessRequestsRequests) (*ListIncomingAccessRequestsResponse, error)
	ApproveIncomingAccessRequest(context.Context, *ApproveIncomingAccessRequestRequest) (*emptypb.Empty, error)
	RejectIncomingAccessRequest(context.Context, *RejectIncomingAccessRequestRequest) (*emptypb.Empty, error)
	ListOutgoingAccessRequests(context.Context, *ListOutgoingAccessRequestsRequest) (*ListOutgoingAccessRequestsResponse, error)
	CreateAccessRequest(context.Context, *CreateAccessRequestRequest) (*OutgoingAccessRequest, error)
	SendAccessRequest(context.Context, *SendAccessRequestRequest) (*OutgoingAccessRequest, error)
	GetSettings(context.Context, *emptypb.Empty) (*Settings, error)
	UpdateSettings(context.Context, *UpdateSettingsRequest) (*emptypb.Empty, error)
	ListAccessGrantsForService(context.Context, *ListAccessGrantsForServiceRequest) (*ListAccessGrantsForServiceResponse, error)
	RevokeAccessGrant(context.Context, *RevokeAccessGrantRequest) (*AccessGrant, error)
	ListAuditLogs(context.Context, *emptypb.Empty) (*ListAuditLogsResponse, error)
	mustEmbedUnimplementedManagementServer()
}

// UnimplementedManagementServer must be embedded to have forward compatible implementations.
type UnimplementedManagementServer struct {
}

func (UnimplementedManagementServer) IsFinanceEnabled(context.Context, *emptypb.Empty) (*IsFinanceEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFinanceEnabled not implemented")
}
func (UnimplementedManagementServer) DownloadFinanceExport(context.Context, *emptypb.Empty) (*DownloadFinanceExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadFinanceExport not implemented")
}
func (UnimplementedManagementServer) ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (UnimplementedManagementServer) GetService(context.Context, *GetServiceRequest) (*GetServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetService not implemented")
}
func (UnimplementedManagementServer) CreateService(context.Context, *CreateServiceRequest) (*CreateServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateService not implemented")
}
func (UnimplementedManagementServer) UpdateService(context.Context, *UpdateServiceRequest) (*UpdateServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateService not implemented")
}
func (UnimplementedManagementServer) DeleteService(context.Context, *DeleteServiceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteService not implemented")
}
func (UnimplementedManagementServer) GetStatisticsOfServices(context.Context, *GetStatisticsOfServicesRequest) (*GetStatisticsOfServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatisticsOfServices not implemented")
}
func (UnimplementedManagementServer) ListInways(context.Context, *ListInwaysRequest) (*ListInwaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInways not implemented")
}
func (UnimplementedManagementServer) GetInway(context.Context, *GetInwayRequest) (*Inway, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInway not implemented")
}
func (UnimplementedManagementServer) CreateInway(context.Context, *Inway) (*Inway, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInway not implemented")
}
func (UnimplementedManagementServer) UpdateInway(context.Context, *UpdateInwayRequest) (*Inway, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInway not implemented")
}
func (UnimplementedManagementServer) DeleteInway(context.Context, *DeleteInwayRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInway not implemented")
}
func (UnimplementedManagementServer) PutInsightConfiguration(context.Context, *InsightConfiguration) (*InsightConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutInsightConfiguration not implemented")
}
func (UnimplementedManagementServer) GetInsightConfiguration(context.Context, *emptypb.Empty) (*InsightConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInsightConfiguration not implemented")
}
func (UnimplementedManagementServer) ListIncomingAccessRequest(context.Context, *ListIncomingAccessRequestsRequests) (*ListIncomingAccessRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIncomingAccessRequest not implemented")
}
func (UnimplementedManagementServer) ApproveIncomingAccessRequest(context.Context, *ApproveIncomingAccessRequestRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveIncomingAccessRequest not implemented")
}
func (UnimplementedManagementServer) RejectIncomingAccessRequest(context.Context, *RejectIncomingAccessRequestRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectIncomingAccessRequest not implemented")
}
func (UnimplementedManagementServer) ListOutgoingAccessRequests(context.Context, *ListOutgoingAccessRequestsRequest) (*ListOutgoingAccessRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOutgoingAccessRequests not implemented")
}
func (UnimplementedManagementServer) CreateAccessRequest(context.Context, *CreateAccessRequestRequest) (*OutgoingAccessRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccessRequest not implemented")
}
func (UnimplementedManagementServer) SendAccessRequest(context.Context, *SendAccessRequestRequest) (*OutgoingAccessRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAccessRequest not implemented")
}
func (UnimplementedManagementServer) GetSettings(context.Context, *emptypb.Empty) (*Settings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettings not implemented")
}
func (UnimplementedManagementServer) UpdateSettings(context.Context, *UpdateSettingsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSettings not implemented")
}
func (UnimplementedManagementServer) ListAccessGrantsForService(context.Context, *ListAccessGrantsForServiceRequest) (*ListAccessGrantsForServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccessGrantsForService not implemented")
}
func (UnimplementedManagementServer) RevokeAccessGrant(context.Context, *RevokeAccessGrantRequest) (*AccessGrant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeAccessGrant not implemented")
}
func (UnimplementedManagementServer) ListAuditLogs(context.Context, *emptypb.Empty) (*ListAuditLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuditLogs not implemented")
}
func (UnimplementedManagementServer) mustEmbedUnimplementedManagementServer() {}

// UnsafeManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagementServer will
// result in compilation errors.
type UnsafeManagementServer interface {
	mustEmbedUnimplementedManagementServer()
}

func RegisterManagementServer(s grpc.ServiceRegistrar, srv ManagementServer) {
	s.RegisterService(&Management_ServiceDesc, srv)
}

func _Management_IsFinanceEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).IsFinanceEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/IsFinanceEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).IsFinanceEnabled(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_DownloadFinanceExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).DownloadFinanceExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/DownloadFinanceExport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).DownloadFinanceExport(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/ListServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ListServices(ctx, req.(*ListServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetService(ctx, req.(*GetServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/CreateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).CreateService(ctx, req.(*CreateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_UpdateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).UpdateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/UpdateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).UpdateService(ctx, req.(*UpdateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/DeleteService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).DeleteService(ctx, req.(*DeleteServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetStatisticsOfServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatisticsOfServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetStatisticsOfServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/GetStatisticsOfServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetStatisticsOfServices(ctx, req.(*GetStatisticsOfServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ListInways_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInwaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ListInways(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/ListInways",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ListInways(ctx, req.(*ListInwaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetInway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInwayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetInway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/GetInway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetInway(ctx, req.(*GetInwayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_CreateInway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Inway)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).CreateInway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/CreateInway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).CreateInway(ctx, req.(*Inway))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_UpdateInway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInwayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).UpdateInway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/UpdateInway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).UpdateInway(ctx, req.(*UpdateInwayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_DeleteInway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInwayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).DeleteInway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/DeleteInway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).DeleteInway(ctx, req.(*DeleteInwayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_PutInsightConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsightConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).PutInsightConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/PutInsightConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).PutInsightConfiguration(ctx, req.(*InsightConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetInsightConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetInsightConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/GetInsightConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetInsightConfiguration(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ListIncomingAccessRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIncomingAccessRequestsRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ListIncomingAccessRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/ListIncomingAccessRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ListIncomingAccessRequest(ctx, req.(*ListIncomingAccessRequestsRequests))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ApproveIncomingAccessRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveIncomingAccessRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ApproveIncomingAccessRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/ApproveIncomingAccessRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ApproveIncomingAccessRequest(ctx, req.(*ApproveIncomingAccessRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_RejectIncomingAccessRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectIncomingAccessRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).RejectIncomingAccessRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/RejectIncomingAccessRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).RejectIncomingAccessRequest(ctx, req.(*RejectIncomingAccessRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ListOutgoingAccessRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOutgoingAccessRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ListOutgoingAccessRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/ListOutgoingAccessRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ListOutgoingAccessRequests(ctx, req.(*ListOutgoingAccessRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_CreateAccessRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccessRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).CreateAccessRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/CreateAccessRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).CreateAccessRequest(ctx, req.(*CreateAccessRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_SendAccessRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAccessRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).SendAccessRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/SendAccessRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).SendAccessRequest(ctx, req.(*SendAccessRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/GetSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetSettings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_UpdateSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).UpdateSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/UpdateSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).UpdateSettings(ctx, req.(*UpdateSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ListAccessGrantsForService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccessGrantsForServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ListAccessGrantsForService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/ListAccessGrantsForService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ListAccessGrantsForService(ctx, req.(*ListAccessGrantsForServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_RevokeAccessGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeAccessGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).RevokeAccessGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/RevokeAccessGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).RevokeAccessGrant(ctx, req.(*RevokeAccessGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ListAuditLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ListAuditLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Management/ListAuditLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ListAuditLogs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Management_ServiceDesc is the grpc.ServiceDesc for Management service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Management_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nlx.management.Management",
	HandlerType: (*ManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsFinanceEnabled",
			Handler:    _Management_IsFinanceEnabled_Handler,
		},
		{
			MethodName: "DownloadFinanceExport",
			Handler:    _Management_DownloadFinanceExport_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _Management_ListServices_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _Management_GetService_Handler,
		},
		{
			MethodName: "CreateService",
			Handler:    _Management_CreateService_Handler,
		},
		{
			MethodName: "UpdateService",
			Handler:    _Management_UpdateService_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _Management_DeleteService_Handler,
		},
		{
			MethodName: "GetStatisticsOfServices",
			Handler:    _Management_GetStatisticsOfServices_Handler,
		},
		{
			MethodName: "ListInways",
			Handler:    _Management_ListInways_Handler,
		},
		{
			MethodName: "GetInway",
			Handler:    _Management_GetInway_Handler,
		},
		{
			MethodName: "CreateInway",
			Handler:    _Management_CreateInway_Handler,
		},
		{
			MethodName: "UpdateInway",
			Handler:    _Management_UpdateInway_Handler,
		},
		{
			MethodName: "DeleteInway",
			Handler:    _Management_DeleteInway_Handler,
		},
		{
			MethodName: "PutInsightConfiguration",
			Handler:    _Management_PutInsightConfiguration_Handler,
		},
		{
			MethodName: "GetInsightConfiguration",
			Handler:    _Management_GetInsightConfiguration_Handler,
		},
		{
			MethodName: "ListIncomingAccessRequest",
			Handler:    _Management_ListIncomingAccessRequest_Handler,
		},
		{
			MethodName: "ApproveIncomingAccessRequest",
			Handler:    _Management_ApproveIncomingAccessRequest_Handler,
		},
		{
			MethodName: "RejectIncomingAccessRequest",
			Handler:    _Management_RejectIncomingAccessRequest_Handler,
		},
		{
			MethodName: "ListOutgoingAccessRequests",
			Handler:    _Management_ListOutgoingAccessRequests_Handler,
		},
		{
			MethodName: "CreateAccessRequest",
			Handler:    _Management_CreateAccessRequest_Handler,
		},
		{
			MethodName: "SendAccessRequest",
			Handler:    _Management_SendAccessRequest_Handler,
		},
		{
			MethodName: "GetSettings",
			Handler:    _Management_GetSettings_Handler,
		},
		{
			MethodName: "UpdateSettings",
			Handler:    _Management_UpdateSettings_Handler,
		},
		{
			MethodName: "ListAccessGrantsForService",
			Handler:    _Management_ListAccessGrantsForService_Handler,
		},
		{
			MethodName: "RevokeAccessGrant",
			Handler:    _Management_RevokeAccessGrant_Handler,
		},
		{
			MethodName: "ListAuditLogs",
			Handler:    _Management_ListAuditLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "management.proto",
}

// DirectoryClient is the client API for Directory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DirectoryClient interface {
	ListServices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DirectoryListServicesResponse, error)
	GetOrganizationService(ctx context.Context, in *GetOrganizationServiceRequest, opts ...grpc.CallOption) (*DirectoryService, error)
	RequestAccessToService(ctx context.Context, in *RequestAccessToServiceRequest, opts ...grpc.CallOption) (*OutgoingAccessRequest, error)
}

type directoryClient struct {
	cc grpc.ClientConnInterface
}

func NewDirectoryClient(cc grpc.ClientConnInterface) DirectoryClient {
	return &directoryClient{cc}
}

func (c *directoryClient) ListServices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DirectoryListServicesResponse, error) {
	out := new(DirectoryListServicesResponse)
	err := c.cc.Invoke(ctx, "/nlx.management.Directory/ListServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) GetOrganizationService(ctx context.Context, in *GetOrganizationServiceRequest, opts ...grpc.CallOption) (*DirectoryService, error) {
	out := new(DirectoryService)
	err := c.cc.Invoke(ctx, "/nlx.management.Directory/GetOrganizationService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) RequestAccessToService(ctx context.Context, in *RequestAccessToServiceRequest, opts ...grpc.CallOption) (*OutgoingAccessRequest, error) {
	out := new(OutgoingAccessRequest)
	err := c.cc.Invoke(ctx, "/nlx.management.Directory/RequestAccessToService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DirectoryServer is the server API for Directory service.
// All implementations must embed UnimplementedDirectoryServer
// for forward compatibility
type DirectoryServer interface {
	ListServices(context.Context, *emptypb.Empty) (*DirectoryListServicesResponse, error)
	GetOrganizationService(context.Context, *GetOrganizationServiceRequest) (*DirectoryService, error)
	RequestAccessToService(context.Context, *RequestAccessToServiceRequest) (*OutgoingAccessRequest, error)
	mustEmbedUnimplementedDirectoryServer()
}

// UnimplementedDirectoryServer must be embedded to have forward compatible implementations.
type UnimplementedDirectoryServer struct {
}

func (UnimplementedDirectoryServer) ListServices(context.Context, *emptypb.Empty) (*DirectoryListServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (UnimplementedDirectoryServer) GetOrganizationService(context.Context, *GetOrganizationServiceRequest) (*DirectoryService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationService not implemented")
}
func (UnimplementedDirectoryServer) RequestAccessToService(context.Context, *RequestAccessToServiceRequest) (*OutgoingAccessRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAccessToService not implemented")
}
func (UnimplementedDirectoryServer) mustEmbedUnimplementedDirectoryServer() {}

// UnsafeDirectoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DirectoryServer will
// result in compilation errors.
type UnsafeDirectoryServer interface {
	mustEmbedUnimplementedDirectoryServer()
}

func RegisterDirectoryServer(s grpc.ServiceRegistrar, srv DirectoryServer) {
	s.RegisterService(&Directory_ServiceDesc, srv)
}

func _Directory_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Directory/ListServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).ListServices(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_GetOrganizationService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).GetOrganizationService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Directory/GetOrganizationService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).GetOrganizationService(ctx, req.(*GetOrganizationServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_RequestAccessToService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAccessToServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).RequestAccessToService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.management.Directory/RequestAccessToService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).RequestAccessToService(ctx, req.(*RequestAccessToServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Directory_ServiceDesc is the grpc.ServiceDesc for Directory service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Directory_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nlx.management.Directory",
	HandlerType: (*DirectoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListServices",
			Handler:    _Directory_ListServices_Handler,
		},
		{
			MethodName: "GetOrganizationService",
			Handler:    _Directory_GetOrganizationService_Handler,
		},
		{
			MethodName: "RequestAccessToService",
			Handler:    _Directory_RequestAccessToService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "management.proto",
}
