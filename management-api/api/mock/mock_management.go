// Code generated by MockGen. DO NOT EDIT.
// Source: api/management_grpc.pb.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"

	api "go.nlx.io/nlx/management-api/api"
)

// MockManagementServiceClient is a mock of ManagementServiceClient interface.
type MockManagementServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockManagementServiceClientMockRecorder
}

// MockManagementServiceClientMockRecorder is the mock recorder for MockManagementServiceClient.
type MockManagementServiceClientMockRecorder struct {
	mock *MockManagementServiceClient
}

// NewMockManagementServiceClient creates a new mock instance.
func NewMockManagementServiceClient(ctrl *gomock.Controller) *MockManagementServiceClient {
	mock := &MockManagementServiceClient{ctrl: ctrl}
	mock.recorder = &MockManagementServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagementServiceClient) EXPECT() *MockManagementServiceClientMockRecorder {
	return m.recorder
}

// AcceptTermsOfService mocks base method.
func (m *MockManagementServiceClient) AcceptTermsOfService(ctx context.Context, in *api.AcceptTermsOfServiceRequest, opts ...grpc.CallOption) (*api.AcceptTermsOfServiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AcceptTermsOfService", varargs...)
	ret0, _ := ret[0].(*api.AcceptTermsOfServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptTermsOfService indicates an expected call of AcceptTermsOfService.
func (mr *MockManagementServiceClientMockRecorder) AcceptTermsOfService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptTermsOfService", reflect.TypeOf((*MockManagementServiceClient)(nil).AcceptTermsOfService), varargs...)
}

// ApproveIncomingAccessRequest mocks base method.
func (m *MockManagementServiceClient) ApproveIncomingAccessRequest(ctx context.Context, in *api.ApproveIncomingAccessRequestRequest, opts ...grpc.CallOption) (*api.ApproveIncomingAccessRequestResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApproveIncomingAccessRequest", varargs...)
	ret0, _ := ret[0].(*api.ApproveIncomingAccessRequestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApproveIncomingAccessRequest indicates an expected call of ApproveIncomingAccessRequest.
func (mr *MockManagementServiceClientMockRecorder) ApproveIncomingAccessRequest(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveIncomingAccessRequest", reflect.TypeOf((*MockManagementServiceClient)(nil).ApproveIncomingAccessRequest), varargs...)
}

// CreateOutgoingOrder mocks base method.
func (m *MockManagementServiceClient) CreateOutgoingOrder(ctx context.Context, in *api.CreateOutgoingOrderRequest, opts ...grpc.CallOption) (*api.CreateOutgoingOrderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOutgoingOrder", varargs...)
	ret0, _ := ret[0].(*api.CreateOutgoingOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOutgoingOrder indicates an expected call of CreateOutgoingOrder.
func (mr *MockManagementServiceClientMockRecorder) CreateOutgoingOrder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOutgoingOrder", reflect.TypeOf((*MockManagementServiceClient)(nil).CreateOutgoingOrder), varargs...)
}

// CreateService mocks base method.
func (m *MockManagementServiceClient) CreateService(ctx context.Context, in *api.CreateServiceRequest, opts ...grpc.CallOption) (*api.CreateServiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateService", varargs...)
	ret0, _ := ret[0].(*api.CreateServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateService indicates an expected call of CreateService.
func (mr *MockManagementServiceClientMockRecorder) CreateService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockManagementServiceClient)(nil).CreateService), varargs...)
}

// DeleteInway mocks base method.
func (m *MockManagementServiceClient) DeleteInway(ctx context.Context, in *api.DeleteInwayRequest, opts ...grpc.CallOption) (*api.DeleteInwayResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteInway", varargs...)
	ret0, _ := ret[0].(*api.DeleteInwayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInway indicates an expected call of DeleteInway.
func (mr *MockManagementServiceClientMockRecorder) DeleteInway(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInway", reflect.TypeOf((*MockManagementServiceClient)(nil).DeleteInway), varargs...)
}

// DeleteOutway mocks base method.
func (m *MockManagementServiceClient) DeleteOutway(ctx context.Context, in *api.DeleteOutwayRequest, opts ...grpc.CallOption) (*api.DeleteOutwayResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOutway", varargs...)
	ret0, _ := ret[0].(*api.DeleteOutwayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOutway indicates an expected call of DeleteOutway.
func (mr *MockManagementServiceClientMockRecorder) DeleteOutway(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOutway", reflect.TypeOf((*MockManagementServiceClient)(nil).DeleteOutway), varargs...)
}

// DeleteService mocks base method.
func (m *MockManagementServiceClient) DeleteService(ctx context.Context, in *api.DeleteServiceRequest, opts ...grpc.CallOption) (*api.DeleteServiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteService", varargs...)
	ret0, _ := ret[0].(*api.DeleteServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteService indicates an expected call of DeleteService.
func (mr *MockManagementServiceClientMockRecorder) DeleteService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockManagementServiceClient)(nil).DeleteService), varargs...)
}

// DownloadFinanceExport mocks base method.
func (m *MockManagementServiceClient) DownloadFinanceExport(ctx context.Context, in *api.DownloadFinanceExportRequest, opts ...grpc.CallOption) (*api.DownloadFinanceExportResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadFinanceExport", varargs...)
	ret0, _ := ret[0].(*api.DownloadFinanceExportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFinanceExport indicates an expected call of DownloadFinanceExport.
func (mr *MockManagementServiceClientMockRecorder) DownloadFinanceExport(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFinanceExport", reflect.TypeOf((*MockManagementServiceClient)(nil).DownloadFinanceExport), varargs...)
}

// GetInway mocks base method.
func (m *MockManagementServiceClient) GetInway(ctx context.Context, in *api.GetInwayRequest, opts ...grpc.CallOption) (*api.GetInwayResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInway", varargs...)
	ret0, _ := ret[0].(*api.GetInwayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInway indicates an expected call of GetInway.
func (mr *MockManagementServiceClientMockRecorder) GetInway(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInway", reflect.TypeOf((*MockManagementServiceClient)(nil).GetInway), varargs...)
}

// GetInwayConfig mocks base method.
func (m *MockManagementServiceClient) GetInwayConfig(ctx context.Context, in *api.GetInwayConfigRequest, opts ...grpc.CallOption) (*api.GetInwayConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInwayConfig", varargs...)
	ret0, _ := ret[0].(*api.GetInwayConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInwayConfig indicates an expected call of GetInwayConfig.
func (mr *MockManagementServiceClientMockRecorder) GetInwayConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInwayConfig", reflect.TypeOf((*MockManagementServiceClient)(nil).GetInwayConfig), varargs...)
}

// GetService mocks base method.
func (m *MockManagementServiceClient) GetService(ctx context.Context, in *api.GetServiceRequest, opts ...grpc.CallOption) (*api.GetServiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetService", varargs...)
	ret0, _ := ret[0].(*api.GetServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockManagementServiceClientMockRecorder) GetService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockManagementServiceClient)(nil).GetService), varargs...)
}

// GetSettings mocks base method.
func (m *MockManagementServiceClient) GetSettings(ctx context.Context, in *api.GetSettingsRequest, opts ...grpc.CallOption) (*api.GetSettingsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSettings", varargs...)
	ret0, _ := ret[0].(*api.GetSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettings indicates an expected call of GetSettings.
func (mr *MockManagementServiceClientMockRecorder) GetSettings(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettings", reflect.TypeOf((*MockManagementServiceClient)(nil).GetSettings), varargs...)
}

// GetStatisticsOfServices mocks base method.
func (m *MockManagementServiceClient) GetStatisticsOfServices(ctx context.Context, in *api.GetStatisticsOfServicesRequest, opts ...grpc.CallOption) (*api.GetStatisticsOfServicesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStatisticsOfServices", varargs...)
	ret0, _ := ret[0].(*api.GetStatisticsOfServicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatisticsOfServices indicates an expected call of GetStatisticsOfServices.
func (mr *MockManagementServiceClientMockRecorder) GetStatisticsOfServices(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatisticsOfServices", reflect.TypeOf((*MockManagementServiceClient)(nil).GetStatisticsOfServices), varargs...)
}

// GetTermsOfServiceStatus mocks base method.
func (m *MockManagementServiceClient) GetTermsOfServiceStatus(ctx context.Context, in *api.GetTermsOfServiceStatusRequest, opts ...grpc.CallOption) (*api.GetTermsOfServiceStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTermsOfServiceStatus", varargs...)
	ret0, _ := ret[0].(*api.GetTermsOfServiceStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTermsOfServiceStatus indicates an expected call of GetTermsOfServiceStatus.
func (mr *MockManagementServiceClientMockRecorder) GetTermsOfServiceStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTermsOfServiceStatus", reflect.TypeOf((*MockManagementServiceClient)(nil).GetTermsOfServiceStatus), varargs...)
}

// IsFinanceEnabled mocks base method.
func (m *MockManagementServiceClient) IsFinanceEnabled(ctx context.Context, in *api.IsFinanceEnabledRequest, opts ...grpc.CallOption) (*api.IsFinanceEnabledResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsFinanceEnabled", varargs...)
	ret0, _ := ret[0].(*api.IsFinanceEnabledResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFinanceEnabled indicates an expected call of IsFinanceEnabled.
func (mr *MockManagementServiceClientMockRecorder) IsFinanceEnabled(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFinanceEnabled", reflect.TypeOf((*MockManagementServiceClient)(nil).IsFinanceEnabled), varargs...)
}

// IsTXLogEnabled mocks base method.
func (m *MockManagementServiceClient) IsTXLogEnabled(ctx context.Context, in *api.IsTXLogEnabledRequest, opts ...grpc.CallOption) (*api.IsTXLogEnabledResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsTXLogEnabled", varargs...)
	ret0, _ := ret[0].(*api.IsTXLogEnabledResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTXLogEnabled indicates an expected call of IsTXLogEnabled.
func (mr *MockManagementServiceClientMockRecorder) IsTXLogEnabled(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTXLogEnabled", reflect.TypeOf((*MockManagementServiceClient)(nil).IsTXLogEnabled), varargs...)
}

// ListAccessGrantsForService mocks base method.
func (m *MockManagementServiceClient) ListAccessGrantsForService(ctx context.Context, in *api.ListAccessGrantsForServiceRequest, opts ...grpc.CallOption) (*api.ListAccessGrantsForServiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccessGrantsForService", varargs...)
	ret0, _ := ret[0].(*api.ListAccessGrantsForServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessGrantsForService indicates an expected call of ListAccessGrantsForService.
func (mr *MockManagementServiceClientMockRecorder) ListAccessGrantsForService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessGrantsForService", reflect.TypeOf((*MockManagementServiceClient)(nil).ListAccessGrantsForService), varargs...)
}

// ListAuditLogs mocks base method.
func (m *MockManagementServiceClient) ListAuditLogs(ctx context.Context, in *api.ListAuditLogsRequest, opts ...grpc.CallOption) (*api.ListAuditLogsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAuditLogs", varargs...)
	ret0, _ := ret[0].(*api.ListAuditLogsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAuditLogs indicates an expected call of ListAuditLogs.
func (mr *MockManagementServiceClientMockRecorder) ListAuditLogs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuditLogs", reflect.TypeOf((*MockManagementServiceClient)(nil).ListAuditLogs), varargs...)
}

// ListIncomingAccessRequests mocks base method.
func (m *MockManagementServiceClient) ListIncomingAccessRequests(ctx context.Context, in *api.ListIncomingAccessRequestsRequest, opts ...grpc.CallOption) (*api.ListIncomingAccessRequestsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIncomingAccessRequests", varargs...)
	ret0, _ := ret[0].(*api.ListIncomingAccessRequestsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIncomingAccessRequests indicates an expected call of ListIncomingAccessRequests.
func (mr *MockManagementServiceClientMockRecorder) ListIncomingAccessRequests(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIncomingAccessRequests", reflect.TypeOf((*MockManagementServiceClient)(nil).ListIncomingAccessRequests), varargs...)
}

// ListIncomingOrders mocks base method.
func (m *MockManagementServiceClient) ListIncomingOrders(ctx context.Context, in *api.ListIncomingOrdersRequest, opts ...grpc.CallOption) (*api.ListIncomingOrdersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIncomingOrders", varargs...)
	ret0, _ := ret[0].(*api.ListIncomingOrdersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIncomingOrders indicates an expected call of ListIncomingOrders.
func (mr *MockManagementServiceClientMockRecorder) ListIncomingOrders(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIncomingOrders", reflect.TypeOf((*MockManagementServiceClient)(nil).ListIncomingOrders), varargs...)
}

// ListInways mocks base method.
func (m *MockManagementServiceClient) ListInways(ctx context.Context, in *api.ListInwaysRequest, opts ...grpc.CallOption) (*api.ListInwaysResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInways", varargs...)
	ret0, _ := ret[0].(*api.ListInwaysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInways indicates an expected call of ListInways.
func (mr *MockManagementServiceClientMockRecorder) ListInways(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInways", reflect.TypeOf((*MockManagementServiceClient)(nil).ListInways), varargs...)
}

// ListOutgoingOrders mocks base method.
func (m *MockManagementServiceClient) ListOutgoingOrders(ctx context.Context, in *api.ListOutgoingOrdersRequest, opts ...grpc.CallOption) (*api.ListOutgoingOrdersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOutgoingOrders", varargs...)
	ret0, _ := ret[0].(*api.ListOutgoingOrdersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOutgoingOrders indicates an expected call of ListOutgoingOrders.
func (mr *MockManagementServiceClientMockRecorder) ListOutgoingOrders(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOutgoingOrders", reflect.TypeOf((*MockManagementServiceClient)(nil).ListOutgoingOrders), varargs...)
}

// ListOutways mocks base method.
func (m *MockManagementServiceClient) ListOutways(ctx context.Context, in *api.ListOutwaysRequest, opts ...grpc.CallOption) (*api.ListOutwaysResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOutways", varargs...)
	ret0, _ := ret[0].(*api.ListOutwaysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOutways indicates an expected call of ListOutways.
func (mr *MockManagementServiceClientMockRecorder) ListOutways(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOutways", reflect.TypeOf((*MockManagementServiceClient)(nil).ListOutways), varargs...)
}

// ListServices mocks base method.
func (m *MockManagementServiceClient) ListServices(ctx context.Context, in *api.ListServicesRequest, opts ...grpc.CallOption) (*api.ListServicesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServices", varargs...)
	ret0, _ := ret[0].(*api.ListServicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices.
func (mr *MockManagementServiceClientMockRecorder) ListServices(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockManagementServiceClient)(nil).ListServices), varargs...)
}

// RegisterInway mocks base method.
func (m *MockManagementServiceClient) RegisterInway(ctx context.Context, in *api.RegisterInwayRequest, opts ...grpc.CallOption) (*api.RegisterInwayResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterInway", varargs...)
	ret0, _ := ret[0].(*api.RegisterInwayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterInway indicates an expected call of RegisterInway.
func (mr *MockManagementServiceClientMockRecorder) RegisterInway(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterInway", reflect.TypeOf((*MockManagementServiceClient)(nil).RegisterInway), varargs...)
}

// RegisterOutway mocks base method.
func (m *MockManagementServiceClient) RegisterOutway(ctx context.Context, in *api.RegisterOutwayRequest, opts ...grpc.CallOption) (*api.RegisterOutwayResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterOutway", varargs...)
	ret0, _ := ret[0].(*api.RegisterOutwayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterOutway indicates an expected call of RegisterOutway.
func (mr *MockManagementServiceClientMockRecorder) RegisterOutway(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterOutway", reflect.TypeOf((*MockManagementServiceClient)(nil).RegisterOutway), varargs...)
}

// RejectIncomingAccessRequest mocks base method.
func (m *MockManagementServiceClient) RejectIncomingAccessRequest(ctx context.Context, in *api.RejectIncomingAccessRequestRequest, opts ...grpc.CallOption) (*api.RejectIncomingAccessRequestResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RejectIncomingAccessRequest", varargs...)
	ret0, _ := ret[0].(*api.RejectIncomingAccessRequestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectIncomingAccessRequest indicates an expected call of RejectIncomingAccessRequest.
func (mr *MockManagementServiceClientMockRecorder) RejectIncomingAccessRequest(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectIncomingAccessRequest", reflect.TypeOf((*MockManagementServiceClient)(nil).RejectIncomingAccessRequest), varargs...)
}

// RevokeAccessGrant mocks base method.
func (m *MockManagementServiceClient) RevokeAccessGrant(ctx context.Context, in *api.RevokeAccessGrantRequest, opts ...grpc.CallOption) (*api.RevokeAccessGrantResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevokeAccessGrant", varargs...)
	ret0, _ := ret[0].(*api.RevokeAccessGrantResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeAccessGrant indicates an expected call of RevokeAccessGrant.
func (mr *MockManagementServiceClientMockRecorder) RevokeAccessGrant(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAccessGrant", reflect.TypeOf((*MockManagementServiceClient)(nil).RevokeAccessGrant), varargs...)
}

// RevokeOutgoingOrder mocks base method.
func (m *MockManagementServiceClient) RevokeOutgoingOrder(ctx context.Context, in *api.RevokeOutgoingOrderRequest, opts ...grpc.CallOption) (*api.RevokeOutgoingOrderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevokeOutgoingOrder", varargs...)
	ret0, _ := ret[0].(*api.RevokeOutgoingOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeOutgoingOrder indicates an expected call of RevokeOutgoingOrder.
func (mr *MockManagementServiceClientMockRecorder) RevokeOutgoingOrder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeOutgoingOrder", reflect.TypeOf((*MockManagementServiceClient)(nil).RevokeOutgoingOrder), varargs...)
}

// SendAccessRequest mocks base method.
func (m *MockManagementServiceClient) SendAccessRequest(ctx context.Context, in *api.SendAccessRequestRequest, opts ...grpc.CallOption) (*api.SendAccessRequestResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendAccessRequest", varargs...)
	ret0, _ := ret[0].(*api.SendAccessRequestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendAccessRequest indicates an expected call of SendAccessRequest.
func (mr *MockManagementServiceClientMockRecorder) SendAccessRequest(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAccessRequest", reflect.TypeOf((*MockManagementServiceClient)(nil).SendAccessRequest), varargs...)
}

// SynchronizeAllOutgoingAccessRequests mocks base method.
func (m *MockManagementServiceClient) SynchronizeAllOutgoingAccessRequests(ctx context.Context, in *api.SynchronizeAllOutgoingAccessRequestsRequest, opts ...grpc.CallOption) (*api.SynchronizeAllOutgoingAccessRequestsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SynchronizeAllOutgoingAccessRequests", varargs...)
	ret0, _ := ret[0].(*api.SynchronizeAllOutgoingAccessRequestsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SynchronizeAllOutgoingAccessRequests indicates an expected call of SynchronizeAllOutgoingAccessRequests.
func (mr *MockManagementServiceClientMockRecorder) SynchronizeAllOutgoingAccessRequests(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SynchronizeAllOutgoingAccessRequests", reflect.TypeOf((*MockManagementServiceClient)(nil).SynchronizeAllOutgoingAccessRequests), varargs...)
}

// SynchronizeOrders mocks base method.
func (m *MockManagementServiceClient) SynchronizeOrders(ctx context.Context, in *api.SynchronizeOrdersRequest, opts ...grpc.CallOption) (*api.SynchronizeOrdersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SynchronizeOrders", varargs...)
	ret0, _ := ret[0].(*api.SynchronizeOrdersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SynchronizeOrders indicates an expected call of SynchronizeOrders.
func (mr *MockManagementServiceClientMockRecorder) SynchronizeOrders(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SynchronizeOrders", reflect.TypeOf((*MockManagementServiceClient)(nil).SynchronizeOrders), varargs...)
}

// SynchronizeOutgoingAccessRequests mocks base method.
func (m *MockManagementServiceClient) SynchronizeOutgoingAccessRequests(ctx context.Context, in *api.SynchronizeOutgoingAccessRequestsRequest, opts ...grpc.CallOption) (*api.SynchronizeOutgoingAccessRequestsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SynchronizeOutgoingAccessRequests", varargs...)
	ret0, _ := ret[0].(*api.SynchronizeOutgoingAccessRequestsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SynchronizeOutgoingAccessRequests indicates an expected call of SynchronizeOutgoingAccessRequests.
func (mr *MockManagementServiceClientMockRecorder) SynchronizeOutgoingAccessRequests(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SynchronizeOutgoingAccessRequests", reflect.TypeOf((*MockManagementServiceClient)(nil).SynchronizeOutgoingAccessRequests), varargs...)
}

// UpdateInway mocks base method.
func (m *MockManagementServiceClient) UpdateInway(ctx context.Context, in *api.UpdateInwayRequest, opts ...grpc.CallOption) (*api.UpdateInwayResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateInway", varargs...)
	ret0, _ := ret[0].(*api.UpdateInwayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInway indicates an expected call of UpdateInway.
func (mr *MockManagementServiceClientMockRecorder) UpdateInway(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInway", reflect.TypeOf((*MockManagementServiceClient)(nil).UpdateInway), varargs...)
}

// UpdateOutgoingOrder mocks base method.
func (m *MockManagementServiceClient) UpdateOutgoingOrder(ctx context.Context, in *api.UpdateOutgoingOrderRequest, opts ...grpc.CallOption) (*api.UpdateOutgoingOrderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOutgoingOrder", varargs...)
	ret0, _ := ret[0].(*api.UpdateOutgoingOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOutgoingOrder indicates an expected call of UpdateOutgoingOrder.
func (mr *MockManagementServiceClientMockRecorder) UpdateOutgoingOrder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOutgoingOrder", reflect.TypeOf((*MockManagementServiceClient)(nil).UpdateOutgoingOrder), varargs...)
}

// UpdateService mocks base method.
func (m *MockManagementServiceClient) UpdateService(ctx context.Context, in *api.UpdateServiceRequest, opts ...grpc.CallOption) (*api.UpdateServiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateService", varargs...)
	ret0, _ := ret[0].(*api.UpdateServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateService indicates an expected call of UpdateService.
func (mr *MockManagementServiceClientMockRecorder) UpdateService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockManagementServiceClient)(nil).UpdateService), varargs...)
}

// UpdateSettings mocks base method.
func (m *MockManagementServiceClient) UpdateSettings(ctx context.Context, in *api.UpdateSettingsRequest, opts ...grpc.CallOption) (*api.UpdateSettingsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSettings", varargs...)
	ret0, _ := ret[0].(*api.UpdateSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSettings indicates an expected call of UpdateSettings.
func (mr *MockManagementServiceClientMockRecorder) UpdateSettings(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSettings", reflect.TypeOf((*MockManagementServiceClient)(nil).UpdateSettings), varargs...)
}

// MockManagementServiceServer is a mock of ManagementServiceServer interface.
type MockManagementServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockManagementServiceServerMockRecorder
}

// MockManagementServiceServerMockRecorder is the mock recorder for MockManagementServiceServer.
type MockManagementServiceServerMockRecorder struct {
	mock *MockManagementServiceServer
}

// NewMockManagementServiceServer creates a new mock instance.
func NewMockManagementServiceServer(ctrl *gomock.Controller) *MockManagementServiceServer {
	mock := &MockManagementServiceServer{ctrl: ctrl}
	mock.recorder = &MockManagementServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagementServiceServer) EXPECT() *MockManagementServiceServerMockRecorder {
	return m.recorder
}

// AcceptTermsOfService mocks base method.
func (m *MockManagementServiceServer) AcceptTermsOfService(arg0 context.Context, arg1 *api.AcceptTermsOfServiceRequest) (*api.AcceptTermsOfServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptTermsOfService", arg0, arg1)
	ret0, _ := ret[0].(*api.AcceptTermsOfServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptTermsOfService indicates an expected call of AcceptTermsOfService.
func (mr *MockManagementServiceServerMockRecorder) AcceptTermsOfService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptTermsOfService", reflect.TypeOf((*MockManagementServiceServer)(nil).AcceptTermsOfService), arg0, arg1)
}

// ApproveIncomingAccessRequest mocks base method.
func (m *MockManagementServiceServer) ApproveIncomingAccessRequest(arg0 context.Context, arg1 *api.ApproveIncomingAccessRequestRequest) (*api.ApproveIncomingAccessRequestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveIncomingAccessRequest", arg0, arg1)
	ret0, _ := ret[0].(*api.ApproveIncomingAccessRequestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApproveIncomingAccessRequest indicates an expected call of ApproveIncomingAccessRequest.
func (mr *MockManagementServiceServerMockRecorder) ApproveIncomingAccessRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveIncomingAccessRequest", reflect.TypeOf((*MockManagementServiceServer)(nil).ApproveIncomingAccessRequest), arg0, arg1)
}

// CreateOutgoingOrder mocks base method.
func (m *MockManagementServiceServer) CreateOutgoingOrder(arg0 context.Context, arg1 *api.CreateOutgoingOrderRequest) (*api.CreateOutgoingOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOutgoingOrder", arg0, arg1)
	ret0, _ := ret[0].(*api.CreateOutgoingOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOutgoingOrder indicates an expected call of CreateOutgoingOrder.
func (mr *MockManagementServiceServerMockRecorder) CreateOutgoingOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOutgoingOrder", reflect.TypeOf((*MockManagementServiceServer)(nil).CreateOutgoingOrder), arg0, arg1)
}

// CreateService mocks base method.
func (m *MockManagementServiceServer) CreateService(arg0 context.Context, arg1 *api.CreateServiceRequest) (*api.CreateServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateService", arg0, arg1)
	ret0, _ := ret[0].(*api.CreateServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateService indicates an expected call of CreateService.
func (mr *MockManagementServiceServerMockRecorder) CreateService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockManagementServiceServer)(nil).CreateService), arg0, arg1)
}

// DeleteInway mocks base method.
func (m *MockManagementServiceServer) DeleteInway(arg0 context.Context, arg1 *api.DeleteInwayRequest) (*api.DeleteInwayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInway", arg0, arg1)
	ret0, _ := ret[0].(*api.DeleteInwayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInway indicates an expected call of DeleteInway.
func (mr *MockManagementServiceServerMockRecorder) DeleteInway(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInway", reflect.TypeOf((*MockManagementServiceServer)(nil).DeleteInway), arg0, arg1)
}

// DeleteOutway mocks base method.
func (m *MockManagementServiceServer) DeleteOutway(arg0 context.Context, arg1 *api.DeleteOutwayRequest) (*api.DeleteOutwayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOutway", arg0, arg1)
	ret0, _ := ret[0].(*api.DeleteOutwayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOutway indicates an expected call of DeleteOutway.
func (mr *MockManagementServiceServerMockRecorder) DeleteOutway(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOutway", reflect.TypeOf((*MockManagementServiceServer)(nil).DeleteOutway), arg0, arg1)
}

// DeleteService mocks base method.
func (m *MockManagementServiceServer) DeleteService(arg0 context.Context, arg1 *api.DeleteServiceRequest) (*api.DeleteServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", arg0, arg1)
	ret0, _ := ret[0].(*api.DeleteServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteService indicates an expected call of DeleteService.
func (mr *MockManagementServiceServerMockRecorder) DeleteService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockManagementServiceServer)(nil).DeleteService), arg0, arg1)
}

// DownloadFinanceExport mocks base method.
func (m *MockManagementServiceServer) DownloadFinanceExport(arg0 context.Context, arg1 *api.DownloadFinanceExportRequest) (*api.DownloadFinanceExportResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFinanceExport", arg0, arg1)
	ret0, _ := ret[0].(*api.DownloadFinanceExportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFinanceExport indicates an expected call of DownloadFinanceExport.
func (mr *MockManagementServiceServerMockRecorder) DownloadFinanceExport(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFinanceExport", reflect.TypeOf((*MockManagementServiceServer)(nil).DownloadFinanceExport), arg0, arg1)
}

// GetInway mocks base method.
func (m *MockManagementServiceServer) GetInway(arg0 context.Context, arg1 *api.GetInwayRequest) (*api.GetInwayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInway", arg0, arg1)
	ret0, _ := ret[0].(*api.GetInwayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInway indicates an expected call of GetInway.
func (mr *MockManagementServiceServerMockRecorder) GetInway(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInway", reflect.TypeOf((*MockManagementServiceServer)(nil).GetInway), arg0, arg1)
}

// GetInwayConfig mocks base method.
func (m *MockManagementServiceServer) GetInwayConfig(arg0 context.Context, arg1 *api.GetInwayConfigRequest) (*api.GetInwayConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInwayConfig", arg0, arg1)
	ret0, _ := ret[0].(*api.GetInwayConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInwayConfig indicates an expected call of GetInwayConfig.
func (mr *MockManagementServiceServerMockRecorder) GetInwayConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInwayConfig", reflect.TypeOf((*MockManagementServiceServer)(nil).GetInwayConfig), arg0, arg1)
}

// GetService mocks base method.
func (m *MockManagementServiceServer) GetService(arg0 context.Context, arg1 *api.GetServiceRequest) (*api.GetServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", arg0, arg1)
	ret0, _ := ret[0].(*api.GetServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockManagementServiceServerMockRecorder) GetService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockManagementServiceServer)(nil).GetService), arg0, arg1)
}

// GetSettings mocks base method.
func (m *MockManagementServiceServer) GetSettings(arg0 context.Context, arg1 *api.GetSettingsRequest) (*api.GetSettingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettings", arg0, arg1)
	ret0, _ := ret[0].(*api.GetSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettings indicates an expected call of GetSettings.
func (mr *MockManagementServiceServerMockRecorder) GetSettings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettings", reflect.TypeOf((*MockManagementServiceServer)(nil).GetSettings), arg0, arg1)
}

// GetStatisticsOfServices mocks base method.
func (m *MockManagementServiceServer) GetStatisticsOfServices(arg0 context.Context, arg1 *api.GetStatisticsOfServicesRequest) (*api.GetStatisticsOfServicesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatisticsOfServices", arg0, arg1)
	ret0, _ := ret[0].(*api.GetStatisticsOfServicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatisticsOfServices indicates an expected call of GetStatisticsOfServices.
func (mr *MockManagementServiceServerMockRecorder) GetStatisticsOfServices(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatisticsOfServices", reflect.TypeOf((*MockManagementServiceServer)(nil).GetStatisticsOfServices), arg0, arg1)
}

// GetTermsOfServiceStatus mocks base method.
func (m *MockManagementServiceServer) GetTermsOfServiceStatus(arg0 context.Context, arg1 *api.GetTermsOfServiceStatusRequest) (*api.GetTermsOfServiceStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTermsOfServiceStatus", arg0, arg1)
	ret0, _ := ret[0].(*api.GetTermsOfServiceStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTermsOfServiceStatus indicates an expected call of GetTermsOfServiceStatus.
func (mr *MockManagementServiceServerMockRecorder) GetTermsOfServiceStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTermsOfServiceStatus", reflect.TypeOf((*MockManagementServiceServer)(nil).GetTermsOfServiceStatus), arg0, arg1)
}

// IsFinanceEnabled mocks base method.
func (m *MockManagementServiceServer) IsFinanceEnabled(arg0 context.Context, arg1 *api.IsFinanceEnabledRequest) (*api.IsFinanceEnabledResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFinanceEnabled", arg0, arg1)
	ret0, _ := ret[0].(*api.IsFinanceEnabledResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFinanceEnabled indicates an expected call of IsFinanceEnabled.
func (mr *MockManagementServiceServerMockRecorder) IsFinanceEnabled(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFinanceEnabled", reflect.TypeOf((*MockManagementServiceServer)(nil).IsFinanceEnabled), arg0, arg1)
}

// IsTXLogEnabled mocks base method.
func (m *MockManagementServiceServer) IsTXLogEnabled(arg0 context.Context, arg1 *api.IsTXLogEnabledRequest) (*api.IsTXLogEnabledResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTXLogEnabled", arg0, arg1)
	ret0, _ := ret[0].(*api.IsTXLogEnabledResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTXLogEnabled indicates an expected call of IsTXLogEnabled.
func (mr *MockManagementServiceServerMockRecorder) IsTXLogEnabled(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTXLogEnabled", reflect.TypeOf((*MockManagementServiceServer)(nil).IsTXLogEnabled), arg0, arg1)
}

// ListAccessGrantsForService mocks base method.
func (m *MockManagementServiceServer) ListAccessGrantsForService(arg0 context.Context, arg1 *api.ListAccessGrantsForServiceRequest) (*api.ListAccessGrantsForServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessGrantsForService", arg0, arg1)
	ret0, _ := ret[0].(*api.ListAccessGrantsForServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessGrantsForService indicates an expected call of ListAccessGrantsForService.
func (mr *MockManagementServiceServerMockRecorder) ListAccessGrantsForService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessGrantsForService", reflect.TypeOf((*MockManagementServiceServer)(nil).ListAccessGrantsForService), arg0, arg1)
}

// ListAuditLogs mocks base method.
func (m *MockManagementServiceServer) ListAuditLogs(arg0 context.Context, arg1 *api.ListAuditLogsRequest) (*api.ListAuditLogsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAuditLogs", arg0, arg1)
	ret0, _ := ret[0].(*api.ListAuditLogsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAuditLogs indicates an expected call of ListAuditLogs.
func (mr *MockManagementServiceServerMockRecorder) ListAuditLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuditLogs", reflect.TypeOf((*MockManagementServiceServer)(nil).ListAuditLogs), arg0, arg1)
}

// ListIncomingAccessRequests mocks base method.
func (m *MockManagementServiceServer) ListIncomingAccessRequests(arg0 context.Context, arg1 *api.ListIncomingAccessRequestsRequest) (*api.ListIncomingAccessRequestsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIncomingAccessRequests", arg0, arg1)
	ret0, _ := ret[0].(*api.ListIncomingAccessRequestsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIncomingAccessRequests indicates an expected call of ListIncomingAccessRequests.
func (mr *MockManagementServiceServerMockRecorder) ListIncomingAccessRequests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIncomingAccessRequests", reflect.TypeOf((*MockManagementServiceServer)(nil).ListIncomingAccessRequests), arg0, arg1)
}

// ListIncomingOrders mocks base method.
func (m *MockManagementServiceServer) ListIncomingOrders(arg0 context.Context, arg1 *api.ListIncomingOrdersRequest) (*api.ListIncomingOrdersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIncomingOrders", arg0, arg1)
	ret0, _ := ret[0].(*api.ListIncomingOrdersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIncomingOrders indicates an expected call of ListIncomingOrders.
func (mr *MockManagementServiceServerMockRecorder) ListIncomingOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIncomingOrders", reflect.TypeOf((*MockManagementServiceServer)(nil).ListIncomingOrders), arg0, arg1)
}

// ListInways mocks base method.
func (m *MockManagementServiceServer) ListInways(arg0 context.Context, arg1 *api.ListInwaysRequest) (*api.ListInwaysResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInways", arg0, arg1)
	ret0, _ := ret[0].(*api.ListInwaysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInways indicates an expected call of ListInways.
func (mr *MockManagementServiceServerMockRecorder) ListInways(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInways", reflect.TypeOf((*MockManagementServiceServer)(nil).ListInways), arg0, arg1)
}

// ListOutgoingOrders mocks base method.
func (m *MockManagementServiceServer) ListOutgoingOrders(arg0 context.Context, arg1 *api.ListOutgoingOrdersRequest) (*api.ListOutgoingOrdersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOutgoingOrders", arg0, arg1)
	ret0, _ := ret[0].(*api.ListOutgoingOrdersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOutgoingOrders indicates an expected call of ListOutgoingOrders.
func (mr *MockManagementServiceServerMockRecorder) ListOutgoingOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOutgoingOrders", reflect.TypeOf((*MockManagementServiceServer)(nil).ListOutgoingOrders), arg0, arg1)
}

// ListOutways mocks base method.
func (m *MockManagementServiceServer) ListOutways(arg0 context.Context, arg1 *api.ListOutwaysRequest) (*api.ListOutwaysResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOutways", arg0, arg1)
	ret0, _ := ret[0].(*api.ListOutwaysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOutways indicates an expected call of ListOutways.
func (mr *MockManagementServiceServerMockRecorder) ListOutways(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOutways", reflect.TypeOf((*MockManagementServiceServer)(nil).ListOutways), arg0, arg1)
}

// ListServices mocks base method.
func (m *MockManagementServiceServer) ListServices(arg0 context.Context, arg1 *api.ListServicesRequest) (*api.ListServicesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServices", arg0, arg1)
	ret0, _ := ret[0].(*api.ListServicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices.
func (mr *MockManagementServiceServerMockRecorder) ListServices(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockManagementServiceServer)(nil).ListServices), arg0, arg1)
}

// RegisterInway mocks base method.
func (m *MockManagementServiceServer) RegisterInway(arg0 context.Context, arg1 *api.RegisterInwayRequest) (*api.RegisterInwayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterInway", arg0, arg1)
	ret0, _ := ret[0].(*api.RegisterInwayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterInway indicates an expected call of RegisterInway.
func (mr *MockManagementServiceServerMockRecorder) RegisterInway(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterInway", reflect.TypeOf((*MockManagementServiceServer)(nil).RegisterInway), arg0, arg1)
}

// RegisterOutway mocks base method.
func (m *MockManagementServiceServer) RegisterOutway(arg0 context.Context, arg1 *api.RegisterOutwayRequest) (*api.RegisterOutwayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterOutway", arg0, arg1)
	ret0, _ := ret[0].(*api.RegisterOutwayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterOutway indicates an expected call of RegisterOutway.
func (mr *MockManagementServiceServerMockRecorder) RegisterOutway(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterOutway", reflect.TypeOf((*MockManagementServiceServer)(nil).RegisterOutway), arg0, arg1)
}

// RejectIncomingAccessRequest mocks base method.
func (m *MockManagementServiceServer) RejectIncomingAccessRequest(arg0 context.Context, arg1 *api.RejectIncomingAccessRequestRequest) (*api.RejectIncomingAccessRequestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectIncomingAccessRequest", arg0, arg1)
	ret0, _ := ret[0].(*api.RejectIncomingAccessRequestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectIncomingAccessRequest indicates an expected call of RejectIncomingAccessRequest.
func (mr *MockManagementServiceServerMockRecorder) RejectIncomingAccessRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectIncomingAccessRequest", reflect.TypeOf((*MockManagementServiceServer)(nil).RejectIncomingAccessRequest), arg0, arg1)
}

// RevokeAccessGrant mocks base method.
func (m *MockManagementServiceServer) RevokeAccessGrant(arg0 context.Context, arg1 *api.RevokeAccessGrantRequest) (*api.RevokeAccessGrantResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeAccessGrant", arg0, arg1)
	ret0, _ := ret[0].(*api.RevokeAccessGrantResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeAccessGrant indicates an expected call of RevokeAccessGrant.
func (mr *MockManagementServiceServerMockRecorder) RevokeAccessGrant(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAccessGrant", reflect.TypeOf((*MockManagementServiceServer)(nil).RevokeAccessGrant), arg0, arg1)
}

// RevokeOutgoingOrder mocks base method.
func (m *MockManagementServiceServer) RevokeOutgoingOrder(arg0 context.Context, arg1 *api.RevokeOutgoingOrderRequest) (*api.RevokeOutgoingOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeOutgoingOrder", arg0, arg1)
	ret0, _ := ret[0].(*api.RevokeOutgoingOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeOutgoingOrder indicates an expected call of RevokeOutgoingOrder.
func (mr *MockManagementServiceServerMockRecorder) RevokeOutgoingOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeOutgoingOrder", reflect.TypeOf((*MockManagementServiceServer)(nil).RevokeOutgoingOrder), arg0, arg1)
}

// SendAccessRequest mocks base method.
func (m *MockManagementServiceServer) SendAccessRequest(arg0 context.Context, arg1 *api.SendAccessRequestRequest) (*api.SendAccessRequestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAccessRequest", arg0, arg1)
	ret0, _ := ret[0].(*api.SendAccessRequestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendAccessRequest indicates an expected call of SendAccessRequest.
func (mr *MockManagementServiceServerMockRecorder) SendAccessRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAccessRequest", reflect.TypeOf((*MockManagementServiceServer)(nil).SendAccessRequest), arg0, arg1)
}

// SynchronizeAllOutgoingAccessRequests mocks base method.
func (m *MockManagementServiceServer) SynchronizeAllOutgoingAccessRequests(arg0 context.Context, arg1 *api.SynchronizeAllOutgoingAccessRequestsRequest) (*api.SynchronizeAllOutgoingAccessRequestsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SynchronizeAllOutgoingAccessRequests", arg0, arg1)
	ret0, _ := ret[0].(*api.SynchronizeAllOutgoingAccessRequestsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SynchronizeAllOutgoingAccessRequests indicates an expected call of SynchronizeAllOutgoingAccessRequests.
func (mr *MockManagementServiceServerMockRecorder) SynchronizeAllOutgoingAccessRequests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SynchronizeAllOutgoingAccessRequests", reflect.TypeOf((*MockManagementServiceServer)(nil).SynchronizeAllOutgoingAccessRequests), arg0, arg1)
}

// SynchronizeOrders mocks base method.
func (m *MockManagementServiceServer) SynchronizeOrders(arg0 context.Context, arg1 *api.SynchronizeOrdersRequest) (*api.SynchronizeOrdersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SynchronizeOrders", arg0, arg1)
	ret0, _ := ret[0].(*api.SynchronizeOrdersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SynchronizeOrders indicates an expected call of SynchronizeOrders.
func (mr *MockManagementServiceServerMockRecorder) SynchronizeOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SynchronizeOrders", reflect.TypeOf((*MockManagementServiceServer)(nil).SynchronizeOrders), arg0, arg1)
}

// SynchronizeOutgoingAccessRequests mocks base method.
func (m *MockManagementServiceServer) SynchronizeOutgoingAccessRequests(arg0 context.Context, arg1 *api.SynchronizeOutgoingAccessRequestsRequest) (*api.SynchronizeOutgoingAccessRequestsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SynchronizeOutgoingAccessRequests", arg0, arg1)
	ret0, _ := ret[0].(*api.SynchronizeOutgoingAccessRequestsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SynchronizeOutgoingAccessRequests indicates an expected call of SynchronizeOutgoingAccessRequests.
func (mr *MockManagementServiceServerMockRecorder) SynchronizeOutgoingAccessRequests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SynchronizeOutgoingAccessRequests", reflect.TypeOf((*MockManagementServiceServer)(nil).SynchronizeOutgoingAccessRequests), arg0, arg1)
}

// UpdateInway mocks base method.
func (m *MockManagementServiceServer) UpdateInway(arg0 context.Context, arg1 *api.UpdateInwayRequest) (*api.UpdateInwayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInway", arg0, arg1)
	ret0, _ := ret[0].(*api.UpdateInwayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInway indicates an expected call of UpdateInway.
func (mr *MockManagementServiceServerMockRecorder) UpdateInway(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInway", reflect.TypeOf((*MockManagementServiceServer)(nil).UpdateInway), arg0, arg1)
}

// UpdateOutgoingOrder mocks base method.
func (m *MockManagementServiceServer) UpdateOutgoingOrder(arg0 context.Context, arg1 *api.UpdateOutgoingOrderRequest) (*api.UpdateOutgoingOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOutgoingOrder", arg0, arg1)
	ret0, _ := ret[0].(*api.UpdateOutgoingOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOutgoingOrder indicates an expected call of UpdateOutgoingOrder.
func (mr *MockManagementServiceServerMockRecorder) UpdateOutgoingOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOutgoingOrder", reflect.TypeOf((*MockManagementServiceServer)(nil).UpdateOutgoingOrder), arg0, arg1)
}

// UpdateService mocks base method.
func (m *MockManagementServiceServer) UpdateService(arg0 context.Context, arg1 *api.UpdateServiceRequest) (*api.UpdateServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateService", arg0, arg1)
	ret0, _ := ret[0].(*api.UpdateServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateService indicates an expected call of UpdateService.
func (mr *MockManagementServiceServerMockRecorder) UpdateService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockManagementServiceServer)(nil).UpdateService), arg0, arg1)
}

// UpdateSettings mocks base method.
func (m *MockManagementServiceServer) UpdateSettings(arg0 context.Context, arg1 *api.UpdateSettingsRequest) (*api.UpdateSettingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSettings", arg0, arg1)
	ret0, _ := ret[0].(*api.UpdateSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSettings indicates an expected call of UpdateSettings.
func (mr *MockManagementServiceServerMockRecorder) UpdateSettings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSettings", reflect.TypeOf((*MockManagementServiceServer)(nil).UpdateSettings), arg0, arg1)
}

// mustEmbedUnimplementedManagementServiceServer mocks base method.
func (m *MockManagementServiceServer) mustEmbedUnimplementedManagementServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedManagementServiceServer")
}

// mustEmbedUnimplementedManagementServiceServer indicates an expected call of mustEmbedUnimplementedManagementServiceServer.
func (mr *MockManagementServiceServerMockRecorder) mustEmbedUnimplementedManagementServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedManagementServiceServer", reflect.TypeOf((*MockManagementServiceServer)(nil).mustEmbedUnimplementedManagementServiceServer))
}

// MockUnsafeManagementServiceServer is a mock of UnsafeManagementServiceServer interface.
type MockUnsafeManagementServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeManagementServiceServerMockRecorder
}

// MockUnsafeManagementServiceServerMockRecorder is the mock recorder for MockUnsafeManagementServiceServer.
type MockUnsafeManagementServiceServerMockRecorder struct {
	mock *MockUnsafeManagementServiceServer
}

// NewMockUnsafeManagementServiceServer creates a new mock instance.
func NewMockUnsafeManagementServiceServer(ctrl *gomock.Controller) *MockUnsafeManagementServiceServer {
	mock := &MockUnsafeManagementServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeManagementServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeManagementServiceServer) EXPECT() *MockUnsafeManagementServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedManagementServiceServer mocks base method.
func (m *MockUnsafeManagementServiceServer) mustEmbedUnimplementedManagementServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedManagementServiceServer")
}

// mustEmbedUnimplementedManagementServiceServer indicates an expected call of mustEmbedUnimplementedManagementServiceServer.
func (mr *MockUnsafeManagementServiceServerMockRecorder) mustEmbedUnimplementedManagementServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedManagementServiceServer", reflect.TypeOf((*MockUnsafeManagementServiceServer)(nil).mustEmbedUnimplementedManagementServiceServer))
}

// MockDirectoryServiceClient is a mock of DirectoryServiceClient interface.
type MockDirectoryServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockDirectoryServiceClientMockRecorder
}

// MockDirectoryServiceClientMockRecorder is the mock recorder for MockDirectoryServiceClient.
type MockDirectoryServiceClientMockRecorder struct {
	mock *MockDirectoryServiceClient
}

// NewMockDirectoryServiceClient creates a new mock instance.
func NewMockDirectoryServiceClient(ctrl *gomock.Controller) *MockDirectoryServiceClient {
	mock := &MockDirectoryServiceClient{ctrl: ctrl}
	mock.recorder = &MockDirectoryServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectoryServiceClient) EXPECT() *MockDirectoryServiceClientMockRecorder {
	return m.recorder
}

// GetOrganizationService mocks base method.
func (m *MockDirectoryServiceClient) GetOrganizationService(ctx context.Context, in *api.GetOrganizationServiceRequest, opts ...grpc.CallOption) (*api.GetOrganizationServiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrganizationService", varargs...)
	ret0, _ := ret[0].(*api.GetOrganizationServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationService indicates an expected call of GetOrganizationService.
func (mr *MockDirectoryServiceClientMockRecorder) GetOrganizationService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationService", reflect.TypeOf((*MockDirectoryServiceClient)(nil).GetOrganizationService), varargs...)
}

// GetTermsOfService mocks base method.
func (m *MockDirectoryServiceClient) GetTermsOfService(ctx context.Context, in *api.GetTermsOfServiceRequest, opts ...grpc.CallOption) (*api.GetTermsOfServiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTermsOfService", varargs...)
	ret0, _ := ret[0].(*api.GetTermsOfServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTermsOfService indicates an expected call of GetTermsOfService.
func (mr *MockDirectoryServiceClientMockRecorder) GetTermsOfService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTermsOfService", reflect.TypeOf((*MockDirectoryServiceClient)(nil).GetTermsOfService), varargs...)
}

// ListServices mocks base method.
func (m *MockDirectoryServiceClient) ListServices(ctx context.Context, in *api.DirectoryServiceListServicesRequest, opts ...grpc.CallOption) (*api.DirectoryServiceListServicesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServices", varargs...)
	ret0, _ := ret[0].(*api.DirectoryServiceListServicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices.
func (mr *MockDirectoryServiceClientMockRecorder) ListServices(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockDirectoryServiceClient)(nil).ListServices), varargs...)
}

// RequestAccessToService mocks base method.
func (m *MockDirectoryServiceClient) RequestAccessToService(ctx context.Context, in *api.RequestAccessToServiceRequest, opts ...grpc.CallOption) (*api.RequestAccessToServiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequestAccessToService", varargs...)
	ret0, _ := ret[0].(*api.RequestAccessToServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestAccessToService indicates an expected call of RequestAccessToService.
func (mr *MockDirectoryServiceClientMockRecorder) RequestAccessToService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestAccessToService", reflect.TypeOf((*MockDirectoryServiceClient)(nil).RequestAccessToService), varargs...)
}

// MockDirectoryServiceServer is a mock of DirectoryServiceServer interface.
type MockDirectoryServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockDirectoryServiceServerMockRecorder
}

// MockDirectoryServiceServerMockRecorder is the mock recorder for MockDirectoryServiceServer.
type MockDirectoryServiceServerMockRecorder struct {
	mock *MockDirectoryServiceServer
}

// NewMockDirectoryServiceServer creates a new mock instance.
func NewMockDirectoryServiceServer(ctrl *gomock.Controller) *MockDirectoryServiceServer {
	mock := &MockDirectoryServiceServer{ctrl: ctrl}
	mock.recorder = &MockDirectoryServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectoryServiceServer) EXPECT() *MockDirectoryServiceServerMockRecorder {
	return m.recorder
}

// GetOrganizationService mocks base method.
func (m *MockDirectoryServiceServer) GetOrganizationService(arg0 context.Context, arg1 *api.GetOrganizationServiceRequest) (*api.GetOrganizationServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationService", arg0, arg1)
	ret0, _ := ret[0].(*api.GetOrganizationServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationService indicates an expected call of GetOrganizationService.
func (mr *MockDirectoryServiceServerMockRecorder) GetOrganizationService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationService", reflect.TypeOf((*MockDirectoryServiceServer)(nil).GetOrganizationService), arg0, arg1)
}

// GetTermsOfService mocks base method.
func (m *MockDirectoryServiceServer) GetTermsOfService(arg0 context.Context, arg1 *api.GetTermsOfServiceRequest) (*api.GetTermsOfServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTermsOfService", arg0, arg1)
	ret0, _ := ret[0].(*api.GetTermsOfServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTermsOfService indicates an expected call of GetTermsOfService.
func (mr *MockDirectoryServiceServerMockRecorder) GetTermsOfService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTermsOfService", reflect.TypeOf((*MockDirectoryServiceServer)(nil).GetTermsOfService), arg0, arg1)
}

// ListServices mocks base method.
func (m *MockDirectoryServiceServer) ListServices(arg0 context.Context, arg1 *api.DirectoryServiceListServicesRequest) (*api.DirectoryServiceListServicesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServices", arg0, arg1)
	ret0, _ := ret[0].(*api.DirectoryServiceListServicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices.
func (mr *MockDirectoryServiceServerMockRecorder) ListServices(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockDirectoryServiceServer)(nil).ListServices), arg0, arg1)
}

// RequestAccessToService mocks base method.
func (m *MockDirectoryServiceServer) RequestAccessToService(arg0 context.Context, arg1 *api.RequestAccessToServiceRequest) (*api.RequestAccessToServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestAccessToService", arg0, arg1)
	ret0, _ := ret[0].(*api.RequestAccessToServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestAccessToService indicates an expected call of RequestAccessToService.
func (mr *MockDirectoryServiceServerMockRecorder) RequestAccessToService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestAccessToService", reflect.TypeOf((*MockDirectoryServiceServer)(nil).RequestAccessToService), arg0, arg1)
}

// mustEmbedUnimplementedDirectoryServiceServer mocks base method.
func (m *MockDirectoryServiceServer) mustEmbedUnimplementedDirectoryServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDirectoryServiceServer")
}

// mustEmbedUnimplementedDirectoryServiceServer indicates an expected call of mustEmbedUnimplementedDirectoryServiceServer.
func (mr *MockDirectoryServiceServerMockRecorder) mustEmbedUnimplementedDirectoryServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDirectoryServiceServer", reflect.TypeOf((*MockDirectoryServiceServer)(nil).mustEmbedUnimplementedDirectoryServiceServer))
}

// MockUnsafeDirectoryServiceServer is a mock of UnsafeDirectoryServiceServer interface.
type MockUnsafeDirectoryServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeDirectoryServiceServerMockRecorder
}

// MockUnsafeDirectoryServiceServerMockRecorder is the mock recorder for MockUnsafeDirectoryServiceServer.
type MockUnsafeDirectoryServiceServerMockRecorder struct {
	mock *MockUnsafeDirectoryServiceServer
}

// NewMockUnsafeDirectoryServiceServer creates a new mock instance.
func NewMockUnsafeDirectoryServiceServer(ctrl *gomock.Controller) *MockUnsafeDirectoryServiceServer {
	mock := &MockUnsafeDirectoryServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeDirectoryServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeDirectoryServiceServer) EXPECT() *MockUnsafeDirectoryServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedDirectoryServiceServer mocks base method.
func (m *MockUnsafeDirectoryServiceServer) mustEmbedUnimplementedDirectoryServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDirectoryServiceServer")
}

// mustEmbedUnimplementedDirectoryServiceServer indicates an expected call of mustEmbedUnimplementedDirectoryServiceServer.
func (mr *MockUnsafeDirectoryServiceServerMockRecorder) mustEmbedUnimplementedDirectoryServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDirectoryServiceServer", reflect.TypeOf((*MockUnsafeDirectoryServiceServer)(nil).mustEmbedUnimplementedDirectoryServiceServer))
}

// MockTXLogServiceClient is a mock of TXLogServiceClient interface.
type MockTXLogServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTXLogServiceClientMockRecorder
}

// MockTXLogServiceClientMockRecorder is the mock recorder for MockTXLogServiceClient.
type MockTXLogServiceClientMockRecorder struct {
	mock *MockTXLogServiceClient
}

// NewMockTXLogServiceClient creates a new mock instance.
func NewMockTXLogServiceClient(ctrl *gomock.Controller) *MockTXLogServiceClient {
	mock := &MockTXLogServiceClient{ctrl: ctrl}
	mock.recorder = &MockTXLogServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTXLogServiceClient) EXPECT() *MockTXLogServiceClientMockRecorder {
	return m.recorder
}

// ListRecords mocks base method.
func (m *MockTXLogServiceClient) ListRecords(ctx context.Context, in *api.TXLogServiceListRecordsRequest, opts ...grpc.CallOption) (*api.TXLogServiceListRecordsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecords", varargs...)
	ret0, _ := ret[0].(*api.TXLogServiceListRecordsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecords indicates an expected call of ListRecords.
func (mr *MockTXLogServiceClientMockRecorder) ListRecords(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecords", reflect.TypeOf((*MockTXLogServiceClient)(nil).ListRecords), varargs...)
}

// MockTXLogServiceServer is a mock of TXLogServiceServer interface.
type MockTXLogServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockTXLogServiceServerMockRecorder
}

// MockTXLogServiceServerMockRecorder is the mock recorder for MockTXLogServiceServer.
type MockTXLogServiceServerMockRecorder struct {
	mock *MockTXLogServiceServer
}

// NewMockTXLogServiceServer creates a new mock instance.
func NewMockTXLogServiceServer(ctrl *gomock.Controller) *MockTXLogServiceServer {
	mock := &MockTXLogServiceServer{ctrl: ctrl}
	mock.recorder = &MockTXLogServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTXLogServiceServer) EXPECT() *MockTXLogServiceServerMockRecorder {
	return m.recorder
}

// ListRecords mocks base method.
func (m *MockTXLogServiceServer) ListRecords(arg0 context.Context, arg1 *api.TXLogServiceListRecordsRequest) (*api.TXLogServiceListRecordsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecords", arg0, arg1)
	ret0, _ := ret[0].(*api.TXLogServiceListRecordsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecords indicates an expected call of ListRecords.
func (mr *MockTXLogServiceServerMockRecorder) ListRecords(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecords", reflect.TypeOf((*MockTXLogServiceServer)(nil).ListRecords), arg0, arg1)
}

// mustEmbedUnimplementedTXLogServiceServer mocks base method.
func (m *MockTXLogServiceServer) mustEmbedUnimplementedTXLogServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTXLogServiceServer")
}

// mustEmbedUnimplementedTXLogServiceServer indicates an expected call of mustEmbedUnimplementedTXLogServiceServer.
func (mr *MockTXLogServiceServerMockRecorder) mustEmbedUnimplementedTXLogServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTXLogServiceServer", reflect.TypeOf((*MockTXLogServiceServer)(nil).mustEmbedUnimplementedTXLogServiceServer))
}

// MockUnsafeTXLogServiceServer is a mock of UnsafeTXLogServiceServer interface.
type MockUnsafeTXLogServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeTXLogServiceServerMockRecorder
}

// MockUnsafeTXLogServiceServerMockRecorder is the mock recorder for MockUnsafeTXLogServiceServer.
type MockUnsafeTXLogServiceServerMockRecorder struct {
	mock *MockUnsafeTXLogServiceServer
}

// NewMockUnsafeTXLogServiceServer creates a new mock instance.
func NewMockUnsafeTXLogServiceServer(ctrl *gomock.Controller) *MockUnsafeTXLogServiceServer {
	mock := &MockUnsafeTXLogServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeTXLogServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeTXLogServiceServer) EXPECT() *MockUnsafeTXLogServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedTXLogServiceServer mocks base method.
func (m *MockUnsafeTXLogServiceServer) mustEmbedUnimplementedTXLogServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTXLogServiceServer")
}

// mustEmbedUnimplementedTXLogServiceServer indicates an expected call of mustEmbedUnimplementedTXLogServiceServer.
func (mr *MockUnsafeTXLogServiceServerMockRecorder) mustEmbedUnimplementedTXLogServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTXLogServiceServer", reflect.TypeOf((*MockUnsafeTXLogServiceServer)(nil).mustEmbedUnimplementedTXLogServiceServer))
}
