// Code generated by MockGen. DO NOT EDIT.
// Source: api/management_grpc.pb.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"

	api "go.nlx.io/nlx/management-api/api"
)

// MockManagementClient is a mock of ManagementClient interface.
type MockManagementClient struct {
	ctrl     *gomock.Controller
	recorder *MockManagementClientMockRecorder
}

// MockManagementClientMockRecorder is the mock recorder for MockManagementClient.
type MockManagementClientMockRecorder struct {
	mock *MockManagementClient
}

// NewMockManagementClient creates a new mock instance.
func NewMockManagementClient(ctrl *gomock.Controller) *MockManagementClient {
	mock := &MockManagementClient{ctrl: ctrl}
	mock.recorder = &MockManagementClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagementClient) EXPECT() *MockManagementClientMockRecorder {
	return m.recorder
}

// AcceptTermsOfService mocks base method.
func (m *MockManagementClient) AcceptTermsOfService(ctx context.Context, in *api.AcceptTermsOfServiceRequest, opts ...grpc.CallOption) (*api.AcceptTermsOfServiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AcceptTermsOfService", varargs...)
	ret0, _ := ret[0].(*api.AcceptTermsOfServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptTermsOfService indicates an expected call of AcceptTermsOfService.
func (mr *MockManagementClientMockRecorder) AcceptTermsOfService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptTermsOfService", reflect.TypeOf((*MockManagementClient)(nil).AcceptTermsOfService), varargs...)
}

// ApproveIncomingAccessRequest mocks base method.
func (m *MockManagementClient) ApproveIncomingAccessRequest(ctx context.Context, in *api.ApproveIncomingAccessRequestRequest, opts ...grpc.CallOption) (*api.ApproveIncomingAccessRequestResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApproveIncomingAccessRequest", varargs...)
	ret0, _ := ret[0].(*api.ApproveIncomingAccessRequestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApproveIncomingAccessRequest indicates an expected call of ApproveIncomingAccessRequest.
func (mr *MockManagementClientMockRecorder) ApproveIncomingAccessRequest(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveIncomingAccessRequest", reflect.TypeOf((*MockManagementClient)(nil).ApproveIncomingAccessRequest), varargs...)
}

// CreateOutgoingOrder mocks base method.
func (m *MockManagementClient) CreateOutgoingOrder(ctx context.Context, in *api.CreateOutgoingOrderRequest, opts ...grpc.CallOption) (*api.CreateOutgoingOrderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOutgoingOrder", varargs...)
	ret0, _ := ret[0].(*api.CreateOutgoingOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOutgoingOrder indicates an expected call of CreateOutgoingOrder.
func (mr *MockManagementClientMockRecorder) CreateOutgoingOrder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOutgoingOrder", reflect.TypeOf((*MockManagementClient)(nil).CreateOutgoingOrder), varargs...)
}

// CreateService mocks base method.
func (m *MockManagementClient) CreateService(ctx context.Context, in *api.CreateServiceRequest, opts ...grpc.CallOption) (*api.CreateServiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateService", varargs...)
	ret0, _ := ret[0].(*api.CreateServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateService indicates an expected call of CreateService.
func (mr *MockManagementClientMockRecorder) CreateService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockManagementClient)(nil).CreateService), varargs...)
}

// DeleteInway mocks base method.
func (m *MockManagementClient) DeleteInway(ctx context.Context, in *api.DeleteInwayRequest, opts ...grpc.CallOption) (*api.DeleteInwayResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteInway", varargs...)
	ret0, _ := ret[0].(*api.DeleteInwayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInway indicates an expected call of DeleteInway.
func (mr *MockManagementClientMockRecorder) DeleteInway(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInway", reflect.TypeOf((*MockManagementClient)(nil).DeleteInway), varargs...)
}

// DeleteOutway mocks base method.
func (m *MockManagementClient) DeleteOutway(ctx context.Context, in *api.DeleteOutwayRequest, opts ...grpc.CallOption) (*api.DeleteOutwayResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOutway", varargs...)
	ret0, _ := ret[0].(*api.DeleteOutwayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOutway indicates an expected call of DeleteOutway.
func (mr *MockManagementClientMockRecorder) DeleteOutway(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOutway", reflect.TypeOf((*MockManagementClient)(nil).DeleteOutway), varargs...)
}

// DeleteService mocks base method.
func (m *MockManagementClient) DeleteService(ctx context.Context, in *api.DeleteServiceRequest, opts ...grpc.CallOption) (*api.DeleteServiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteService", varargs...)
	ret0, _ := ret[0].(*api.DeleteServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteService indicates an expected call of DeleteService.
func (mr *MockManagementClientMockRecorder) DeleteService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockManagementClient)(nil).DeleteService), varargs...)
}

// DownloadFinanceExport mocks base method.
func (m *MockManagementClient) DownloadFinanceExport(ctx context.Context, in *api.DownloadFinanceExportRequest, opts ...grpc.CallOption) (*api.DownloadFinanceExportResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadFinanceExport", varargs...)
	ret0, _ := ret[0].(*api.DownloadFinanceExportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFinanceExport indicates an expected call of DownloadFinanceExport.
func (mr *MockManagementClientMockRecorder) DownloadFinanceExport(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFinanceExport", reflect.TypeOf((*MockManagementClient)(nil).DownloadFinanceExport), varargs...)
}

// GetInway mocks base method.
func (m *MockManagementClient) GetInway(ctx context.Context, in *api.GetInwayRequest, opts ...grpc.CallOption) (*api.GetInwayResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInway", varargs...)
	ret0, _ := ret[0].(*api.GetInwayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInway indicates an expected call of GetInway.
func (mr *MockManagementClientMockRecorder) GetInway(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInway", reflect.TypeOf((*MockManagementClient)(nil).GetInway), varargs...)
}

// GetInwayConfig mocks base method.
func (m *MockManagementClient) GetInwayConfig(ctx context.Context, in *api.GetInwayConfigRequest, opts ...grpc.CallOption) (*api.GetInwayConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInwayConfig", varargs...)
	ret0, _ := ret[0].(*api.GetInwayConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInwayConfig indicates an expected call of GetInwayConfig.
func (mr *MockManagementClientMockRecorder) GetInwayConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInwayConfig", reflect.TypeOf((*MockManagementClient)(nil).GetInwayConfig), varargs...)
}

// GetService mocks base method.
func (m *MockManagementClient) GetService(ctx context.Context, in *api.GetServiceRequest, opts ...grpc.CallOption) (*api.GetServiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetService", varargs...)
	ret0, _ := ret[0].(*api.GetServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockManagementClientMockRecorder) GetService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockManagementClient)(nil).GetService), varargs...)
}

// GetSettings mocks base method.
func (m *MockManagementClient) GetSettings(ctx context.Context, in *api.GetSettingsRequest, opts ...grpc.CallOption) (*api.GetSettingsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSettings", varargs...)
	ret0, _ := ret[0].(*api.GetSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettings indicates an expected call of GetSettings.
func (mr *MockManagementClientMockRecorder) GetSettings(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettings", reflect.TypeOf((*MockManagementClient)(nil).GetSettings), varargs...)
}

// GetStatisticsOfServices mocks base method.
func (m *MockManagementClient) GetStatisticsOfServices(ctx context.Context, in *api.GetStatisticsOfServicesRequest, opts ...grpc.CallOption) (*api.GetStatisticsOfServicesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStatisticsOfServices", varargs...)
	ret0, _ := ret[0].(*api.GetStatisticsOfServicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatisticsOfServices indicates an expected call of GetStatisticsOfServices.
func (mr *MockManagementClientMockRecorder) GetStatisticsOfServices(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatisticsOfServices", reflect.TypeOf((*MockManagementClient)(nil).GetStatisticsOfServices), varargs...)
}

// GetTermsOfServiceStatus mocks base method.
func (m *MockManagementClient) GetTermsOfServiceStatus(ctx context.Context, in *api.GetTermsOfServiceStatusRequest, opts ...grpc.CallOption) (*api.GetTermsOfServiceStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTermsOfServiceStatus", varargs...)
	ret0, _ := ret[0].(*api.GetTermsOfServiceStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTermsOfServiceStatus indicates an expected call of GetTermsOfServiceStatus.
func (mr *MockManagementClientMockRecorder) GetTermsOfServiceStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTermsOfServiceStatus", reflect.TypeOf((*MockManagementClient)(nil).GetTermsOfServiceStatus), varargs...)
}

// IsFinanceEnabled mocks base method.
func (m *MockManagementClient) IsFinanceEnabled(ctx context.Context, in *api.IsFinanceEnabledRequest, opts ...grpc.CallOption) (*api.IsFinanceEnabledResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsFinanceEnabled", varargs...)
	ret0, _ := ret[0].(*api.IsFinanceEnabledResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFinanceEnabled indicates an expected call of IsFinanceEnabled.
func (mr *MockManagementClientMockRecorder) IsFinanceEnabled(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFinanceEnabled", reflect.TypeOf((*MockManagementClient)(nil).IsFinanceEnabled), varargs...)
}

// IsTXLogEnabled mocks base method.
func (m *MockManagementClient) IsTXLogEnabled(ctx context.Context, in *api.IsTXLogEnabledRequest, opts ...grpc.CallOption) (*api.IsTXLogEnabledResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsTXLogEnabled", varargs...)
	ret0, _ := ret[0].(*api.IsTXLogEnabledResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTXLogEnabled indicates an expected call of IsTXLogEnabled.
func (mr *MockManagementClientMockRecorder) IsTXLogEnabled(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTXLogEnabled", reflect.TypeOf((*MockManagementClient)(nil).IsTXLogEnabled), varargs...)
}

// ListAccessGrantsForService mocks base method.
func (m *MockManagementClient) ListAccessGrantsForService(ctx context.Context, in *api.ListAccessGrantsForServiceRequest, opts ...grpc.CallOption) (*api.ListAccessGrantsForServiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccessGrantsForService", varargs...)
	ret0, _ := ret[0].(*api.ListAccessGrantsForServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessGrantsForService indicates an expected call of ListAccessGrantsForService.
func (mr *MockManagementClientMockRecorder) ListAccessGrantsForService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessGrantsForService", reflect.TypeOf((*MockManagementClient)(nil).ListAccessGrantsForService), varargs...)
}

// ListAuditLogs mocks base method.
func (m *MockManagementClient) ListAuditLogs(ctx context.Context, in *api.ListAuditLogsRequest, opts ...grpc.CallOption) (*api.ListAuditLogsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAuditLogs", varargs...)
	ret0, _ := ret[0].(*api.ListAuditLogsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAuditLogs indicates an expected call of ListAuditLogs.
func (mr *MockManagementClientMockRecorder) ListAuditLogs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuditLogs", reflect.TypeOf((*MockManagementClient)(nil).ListAuditLogs), varargs...)
}

// ListIncomingAccessRequests mocks base method.
func (m *MockManagementClient) ListIncomingAccessRequests(ctx context.Context, in *api.ListIncomingAccessRequestsRequest, opts ...grpc.CallOption) (*api.ListIncomingAccessRequestsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIncomingAccessRequests", varargs...)
	ret0, _ := ret[0].(*api.ListIncomingAccessRequestsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIncomingAccessRequests indicates an expected call of ListIncomingAccessRequests.
func (mr *MockManagementClientMockRecorder) ListIncomingAccessRequests(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIncomingAccessRequests", reflect.TypeOf((*MockManagementClient)(nil).ListIncomingAccessRequests), varargs...)
}

// ListIncomingOrders mocks base method.
func (m *MockManagementClient) ListIncomingOrders(ctx context.Context, in *api.ListIncomingOrdersRequest, opts ...grpc.CallOption) (*api.ListIncomingOrdersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIncomingOrders", varargs...)
	ret0, _ := ret[0].(*api.ListIncomingOrdersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIncomingOrders indicates an expected call of ListIncomingOrders.
func (mr *MockManagementClientMockRecorder) ListIncomingOrders(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIncomingOrders", reflect.TypeOf((*MockManagementClient)(nil).ListIncomingOrders), varargs...)
}

// ListInways mocks base method.
func (m *MockManagementClient) ListInways(ctx context.Context, in *api.ListInwaysRequest, opts ...grpc.CallOption) (*api.ListInwaysResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInways", varargs...)
	ret0, _ := ret[0].(*api.ListInwaysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInways indicates an expected call of ListInways.
func (mr *MockManagementClientMockRecorder) ListInways(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInways", reflect.TypeOf((*MockManagementClient)(nil).ListInways), varargs...)
}

// ListOutgoingOrders mocks base method.
func (m *MockManagementClient) ListOutgoingOrders(ctx context.Context, in *api.ListOutgoingOrdersRequest, opts ...grpc.CallOption) (*api.ListOutgoingOrdersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOutgoingOrders", varargs...)
	ret0, _ := ret[0].(*api.ListOutgoingOrdersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOutgoingOrders indicates an expected call of ListOutgoingOrders.
func (mr *MockManagementClientMockRecorder) ListOutgoingOrders(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOutgoingOrders", reflect.TypeOf((*MockManagementClient)(nil).ListOutgoingOrders), varargs...)
}

// ListOutways mocks base method.
func (m *MockManagementClient) ListOutways(ctx context.Context, in *api.ListOutwaysRequest, opts ...grpc.CallOption) (*api.ListOutwaysResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOutways", varargs...)
	ret0, _ := ret[0].(*api.ListOutwaysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOutways indicates an expected call of ListOutways.
func (mr *MockManagementClientMockRecorder) ListOutways(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOutways", reflect.TypeOf((*MockManagementClient)(nil).ListOutways), varargs...)
}

// ListServices mocks base method.
func (m *MockManagementClient) ListServices(ctx context.Context, in *api.ListServicesRequest, opts ...grpc.CallOption) (*api.ListServicesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServices", varargs...)
	ret0, _ := ret[0].(*api.ListServicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices.
func (mr *MockManagementClientMockRecorder) ListServices(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockManagementClient)(nil).ListServices), varargs...)
}

// RegisterInway mocks base method.
func (m *MockManagementClient) RegisterInway(ctx context.Context, in *api.RegisterInwayRequest, opts ...grpc.CallOption) (*api.RegisterInwayResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterInway", varargs...)
	ret0, _ := ret[0].(*api.RegisterInwayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterInway indicates an expected call of RegisterInway.
func (mr *MockManagementClientMockRecorder) RegisterInway(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterInway", reflect.TypeOf((*MockManagementClient)(nil).RegisterInway), varargs...)
}

// RegisterOutway mocks base method.
func (m *MockManagementClient) RegisterOutway(ctx context.Context, in *api.RegisterOutwayRequest, opts ...grpc.CallOption) (*api.RegisterOutwayResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterOutway", varargs...)
	ret0, _ := ret[0].(*api.RegisterOutwayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterOutway indicates an expected call of RegisterOutway.
func (mr *MockManagementClientMockRecorder) RegisterOutway(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterOutway", reflect.TypeOf((*MockManagementClient)(nil).RegisterOutway), varargs...)
}

// RejectIncomingAccessRequest mocks base method.
func (m *MockManagementClient) RejectIncomingAccessRequest(ctx context.Context, in *api.RejectIncomingAccessRequestRequest, opts ...grpc.CallOption) (*api.RejectIncomingAccessRequestResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RejectIncomingAccessRequest", varargs...)
	ret0, _ := ret[0].(*api.RejectIncomingAccessRequestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectIncomingAccessRequest indicates an expected call of RejectIncomingAccessRequest.
func (mr *MockManagementClientMockRecorder) RejectIncomingAccessRequest(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectIncomingAccessRequest", reflect.TypeOf((*MockManagementClient)(nil).RejectIncomingAccessRequest), varargs...)
}

// RevokeAccessGrant mocks base method.
func (m *MockManagementClient) RevokeAccessGrant(ctx context.Context, in *api.RevokeAccessGrantRequest, opts ...grpc.CallOption) (*api.RevokeAccessGrantResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevokeAccessGrant", varargs...)
	ret0, _ := ret[0].(*api.RevokeAccessGrantResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeAccessGrant indicates an expected call of RevokeAccessGrant.
func (mr *MockManagementClientMockRecorder) RevokeAccessGrant(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAccessGrant", reflect.TypeOf((*MockManagementClient)(nil).RevokeAccessGrant), varargs...)
}

// RevokeOutgoingOrder mocks base method.
func (m *MockManagementClient) RevokeOutgoingOrder(ctx context.Context, in *api.RevokeOutgoingOrderRequest, opts ...grpc.CallOption) (*api.RevokeOutgoingOrderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevokeOutgoingOrder", varargs...)
	ret0, _ := ret[0].(*api.RevokeOutgoingOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeOutgoingOrder indicates an expected call of RevokeOutgoingOrder.
func (mr *MockManagementClientMockRecorder) RevokeOutgoingOrder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeOutgoingOrder", reflect.TypeOf((*MockManagementClient)(nil).RevokeOutgoingOrder), varargs...)
}

// SendAccessRequest mocks base method.
func (m *MockManagementClient) SendAccessRequest(ctx context.Context, in *api.SendAccessRequestRequest, opts ...grpc.CallOption) (*api.SendAccessRequestResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendAccessRequest", varargs...)
	ret0, _ := ret[0].(*api.SendAccessRequestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendAccessRequest indicates an expected call of SendAccessRequest.
func (mr *MockManagementClientMockRecorder) SendAccessRequest(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAccessRequest", reflect.TypeOf((*MockManagementClient)(nil).SendAccessRequest), varargs...)
}

// SynchronizeAllOutgoingAccessRequests mocks base method.
func (m *MockManagementClient) SynchronizeAllOutgoingAccessRequests(ctx context.Context, in *api.SynchronizeAllOutgoingAccessRequestsRequest, opts ...grpc.CallOption) (*api.SynchronizeAllOutgoingAccessRequestsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SynchronizeAllOutgoingAccessRequests", varargs...)
	ret0, _ := ret[0].(*api.SynchronizeAllOutgoingAccessRequestsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SynchronizeAllOutgoingAccessRequests indicates an expected call of SynchronizeAllOutgoingAccessRequests.
func (mr *MockManagementClientMockRecorder) SynchronizeAllOutgoingAccessRequests(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SynchronizeAllOutgoingAccessRequests", reflect.TypeOf((*MockManagementClient)(nil).SynchronizeAllOutgoingAccessRequests), varargs...)
}

// SynchronizeOrders mocks base method.
func (m *MockManagementClient) SynchronizeOrders(ctx context.Context, in *api.SynchronizeOrdersRequest, opts ...grpc.CallOption) (*api.SynchronizeOrdersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SynchronizeOrders", varargs...)
	ret0, _ := ret[0].(*api.SynchronizeOrdersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SynchronizeOrders indicates an expected call of SynchronizeOrders.
func (mr *MockManagementClientMockRecorder) SynchronizeOrders(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SynchronizeOrders", reflect.TypeOf((*MockManagementClient)(nil).SynchronizeOrders), varargs...)
}

// SynchronizeOutgoingAccessRequests mocks base method.
func (m *MockManagementClient) SynchronizeOutgoingAccessRequests(ctx context.Context, in *api.SynchronizeOutgoingAccessRequestsRequest, opts ...grpc.CallOption) (*api.SynchronizeOutgoingAccessRequestsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SynchronizeOutgoingAccessRequests", varargs...)
	ret0, _ := ret[0].(*api.SynchronizeOutgoingAccessRequestsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SynchronizeOutgoingAccessRequests indicates an expected call of SynchronizeOutgoingAccessRequests.
func (mr *MockManagementClientMockRecorder) SynchronizeOutgoingAccessRequests(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SynchronizeOutgoingAccessRequests", reflect.TypeOf((*MockManagementClient)(nil).SynchronizeOutgoingAccessRequests), varargs...)
}

// UpdateInway mocks base method.
func (m *MockManagementClient) UpdateInway(ctx context.Context, in *api.UpdateInwayRequest, opts ...grpc.CallOption) (*api.UpdateInwayResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateInway", varargs...)
	ret0, _ := ret[0].(*api.UpdateInwayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInway indicates an expected call of UpdateInway.
func (mr *MockManagementClientMockRecorder) UpdateInway(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInway", reflect.TypeOf((*MockManagementClient)(nil).UpdateInway), varargs...)
}

// UpdateOutgoingOrder mocks base method.
func (m *MockManagementClient) UpdateOutgoingOrder(ctx context.Context, in *api.UpdateOutgoingOrderRequest, opts ...grpc.CallOption) (*api.UpdateOutgoingOrderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOutgoingOrder", varargs...)
	ret0, _ := ret[0].(*api.UpdateOutgoingOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOutgoingOrder indicates an expected call of UpdateOutgoingOrder.
func (mr *MockManagementClientMockRecorder) UpdateOutgoingOrder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOutgoingOrder", reflect.TypeOf((*MockManagementClient)(nil).UpdateOutgoingOrder), varargs...)
}

// UpdateService mocks base method.
func (m *MockManagementClient) UpdateService(ctx context.Context, in *api.UpdateServiceRequest, opts ...grpc.CallOption) (*api.UpdateServiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateService", varargs...)
	ret0, _ := ret[0].(*api.UpdateServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateService indicates an expected call of UpdateService.
func (mr *MockManagementClientMockRecorder) UpdateService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockManagementClient)(nil).UpdateService), varargs...)
}

// UpdateSettings mocks base method.
func (m *MockManagementClient) UpdateSettings(ctx context.Context, in *api.UpdateSettingsRequest, opts ...grpc.CallOption) (*api.UpdateSettingsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSettings", varargs...)
	ret0, _ := ret[0].(*api.UpdateSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSettings indicates an expected call of UpdateSettings.
func (mr *MockManagementClientMockRecorder) UpdateSettings(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSettings", reflect.TypeOf((*MockManagementClient)(nil).UpdateSettings), varargs...)
}

// MockManagementServer is a mock of ManagementServer interface.
type MockManagementServer struct {
	ctrl     *gomock.Controller
	recorder *MockManagementServerMockRecorder
}

// MockManagementServerMockRecorder is the mock recorder for MockManagementServer.
type MockManagementServerMockRecorder struct {
	mock *MockManagementServer
}

// NewMockManagementServer creates a new mock instance.
func NewMockManagementServer(ctrl *gomock.Controller) *MockManagementServer {
	mock := &MockManagementServer{ctrl: ctrl}
	mock.recorder = &MockManagementServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagementServer) EXPECT() *MockManagementServerMockRecorder {
	return m.recorder
}

// AcceptTermsOfService mocks base method.
func (m *MockManagementServer) AcceptTermsOfService(arg0 context.Context, arg1 *api.AcceptTermsOfServiceRequest) (*api.AcceptTermsOfServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptTermsOfService", arg0, arg1)
	ret0, _ := ret[0].(*api.AcceptTermsOfServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptTermsOfService indicates an expected call of AcceptTermsOfService.
func (mr *MockManagementServerMockRecorder) AcceptTermsOfService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptTermsOfService", reflect.TypeOf((*MockManagementServer)(nil).AcceptTermsOfService), arg0, arg1)
}

// ApproveIncomingAccessRequest mocks base method.
func (m *MockManagementServer) ApproveIncomingAccessRequest(arg0 context.Context, arg1 *api.ApproveIncomingAccessRequestRequest) (*api.ApproveIncomingAccessRequestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveIncomingAccessRequest", arg0, arg1)
	ret0, _ := ret[0].(*api.ApproveIncomingAccessRequestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApproveIncomingAccessRequest indicates an expected call of ApproveIncomingAccessRequest.
func (mr *MockManagementServerMockRecorder) ApproveIncomingAccessRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveIncomingAccessRequest", reflect.TypeOf((*MockManagementServer)(nil).ApproveIncomingAccessRequest), arg0, arg1)
}

// CreateOutgoingOrder mocks base method.
func (m *MockManagementServer) CreateOutgoingOrder(arg0 context.Context, arg1 *api.CreateOutgoingOrderRequest) (*api.CreateOutgoingOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOutgoingOrder", arg0, arg1)
	ret0, _ := ret[0].(*api.CreateOutgoingOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOutgoingOrder indicates an expected call of CreateOutgoingOrder.
func (mr *MockManagementServerMockRecorder) CreateOutgoingOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOutgoingOrder", reflect.TypeOf((*MockManagementServer)(nil).CreateOutgoingOrder), arg0, arg1)
}

// CreateService mocks base method.
func (m *MockManagementServer) CreateService(arg0 context.Context, arg1 *api.CreateServiceRequest) (*api.CreateServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateService", arg0, arg1)
	ret0, _ := ret[0].(*api.CreateServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateService indicates an expected call of CreateService.
func (mr *MockManagementServerMockRecorder) CreateService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockManagementServer)(nil).CreateService), arg0, arg1)
}

// DeleteInway mocks base method.
func (m *MockManagementServer) DeleteInway(arg0 context.Context, arg1 *api.DeleteInwayRequest) (*api.DeleteInwayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInway", arg0, arg1)
	ret0, _ := ret[0].(*api.DeleteInwayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInway indicates an expected call of DeleteInway.
func (mr *MockManagementServerMockRecorder) DeleteInway(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInway", reflect.TypeOf((*MockManagementServer)(nil).DeleteInway), arg0, arg1)
}

// DeleteOutway mocks base method.
func (m *MockManagementServer) DeleteOutway(arg0 context.Context, arg1 *api.DeleteOutwayRequest) (*api.DeleteOutwayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOutway", arg0, arg1)
	ret0, _ := ret[0].(*api.DeleteOutwayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOutway indicates an expected call of DeleteOutway.
func (mr *MockManagementServerMockRecorder) DeleteOutway(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOutway", reflect.TypeOf((*MockManagementServer)(nil).DeleteOutway), arg0, arg1)
}

// DeleteService mocks base method.
func (m *MockManagementServer) DeleteService(arg0 context.Context, arg1 *api.DeleteServiceRequest) (*api.DeleteServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", arg0, arg1)
	ret0, _ := ret[0].(*api.DeleteServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteService indicates an expected call of DeleteService.
func (mr *MockManagementServerMockRecorder) DeleteService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockManagementServer)(nil).DeleteService), arg0, arg1)
}

// DownloadFinanceExport mocks base method.
func (m *MockManagementServer) DownloadFinanceExport(arg0 context.Context, arg1 *api.DownloadFinanceExportRequest) (*api.DownloadFinanceExportResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFinanceExport", arg0, arg1)
	ret0, _ := ret[0].(*api.DownloadFinanceExportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFinanceExport indicates an expected call of DownloadFinanceExport.
func (mr *MockManagementServerMockRecorder) DownloadFinanceExport(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFinanceExport", reflect.TypeOf((*MockManagementServer)(nil).DownloadFinanceExport), arg0, arg1)
}

// GetInway mocks base method.
func (m *MockManagementServer) GetInway(arg0 context.Context, arg1 *api.GetInwayRequest) (*api.GetInwayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInway", arg0, arg1)
	ret0, _ := ret[0].(*api.GetInwayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInway indicates an expected call of GetInway.
func (mr *MockManagementServerMockRecorder) GetInway(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInway", reflect.TypeOf((*MockManagementServer)(nil).GetInway), arg0, arg1)
}

// GetInwayConfig mocks base method.
func (m *MockManagementServer) GetInwayConfig(arg0 context.Context, arg1 *api.GetInwayConfigRequest) (*api.GetInwayConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInwayConfig", arg0, arg1)
	ret0, _ := ret[0].(*api.GetInwayConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInwayConfig indicates an expected call of GetInwayConfig.
func (mr *MockManagementServerMockRecorder) GetInwayConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInwayConfig", reflect.TypeOf((*MockManagementServer)(nil).GetInwayConfig), arg0, arg1)
}

// GetService mocks base method.
func (m *MockManagementServer) GetService(arg0 context.Context, arg1 *api.GetServiceRequest) (*api.GetServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", arg0, arg1)
	ret0, _ := ret[0].(*api.GetServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockManagementServerMockRecorder) GetService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockManagementServer)(nil).GetService), arg0, arg1)
}

// GetSettings mocks base method.
func (m *MockManagementServer) GetSettings(arg0 context.Context, arg1 *api.GetSettingsRequest) (*api.GetSettingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettings", arg0, arg1)
	ret0, _ := ret[0].(*api.GetSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettings indicates an expected call of GetSettings.
func (mr *MockManagementServerMockRecorder) GetSettings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettings", reflect.TypeOf((*MockManagementServer)(nil).GetSettings), arg0, arg1)
}

// GetStatisticsOfServices mocks base method.
func (m *MockManagementServer) GetStatisticsOfServices(arg0 context.Context, arg1 *api.GetStatisticsOfServicesRequest) (*api.GetStatisticsOfServicesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatisticsOfServices", arg0, arg1)
	ret0, _ := ret[0].(*api.GetStatisticsOfServicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatisticsOfServices indicates an expected call of GetStatisticsOfServices.
func (mr *MockManagementServerMockRecorder) GetStatisticsOfServices(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatisticsOfServices", reflect.TypeOf((*MockManagementServer)(nil).GetStatisticsOfServices), arg0, arg1)
}

// GetTermsOfServiceStatus mocks base method.
func (m *MockManagementServer) GetTermsOfServiceStatus(arg0 context.Context, arg1 *api.GetTermsOfServiceStatusRequest) (*api.GetTermsOfServiceStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTermsOfServiceStatus", arg0, arg1)
	ret0, _ := ret[0].(*api.GetTermsOfServiceStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTermsOfServiceStatus indicates an expected call of GetTermsOfServiceStatus.
func (mr *MockManagementServerMockRecorder) GetTermsOfServiceStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTermsOfServiceStatus", reflect.TypeOf((*MockManagementServer)(nil).GetTermsOfServiceStatus), arg0, arg1)
}

// IsFinanceEnabled mocks base method.
func (m *MockManagementServer) IsFinanceEnabled(arg0 context.Context, arg1 *api.IsFinanceEnabledRequest) (*api.IsFinanceEnabledResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFinanceEnabled", arg0, arg1)
	ret0, _ := ret[0].(*api.IsFinanceEnabledResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFinanceEnabled indicates an expected call of IsFinanceEnabled.
func (mr *MockManagementServerMockRecorder) IsFinanceEnabled(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFinanceEnabled", reflect.TypeOf((*MockManagementServer)(nil).IsFinanceEnabled), arg0, arg1)
}

// IsTXLogEnabled mocks base method.
func (m *MockManagementServer) IsTXLogEnabled(arg0 context.Context, arg1 *api.IsTXLogEnabledRequest) (*api.IsTXLogEnabledResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTXLogEnabled", arg0, arg1)
	ret0, _ := ret[0].(*api.IsTXLogEnabledResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTXLogEnabled indicates an expected call of IsTXLogEnabled.
func (mr *MockManagementServerMockRecorder) IsTXLogEnabled(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTXLogEnabled", reflect.TypeOf((*MockManagementServer)(nil).IsTXLogEnabled), arg0, arg1)
}

// ListAccessGrantsForService mocks base method.
func (m *MockManagementServer) ListAccessGrantsForService(arg0 context.Context, arg1 *api.ListAccessGrantsForServiceRequest) (*api.ListAccessGrantsForServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessGrantsForService", arg0, arg1)
	ret0, _ := ret[0].(*api.ListAccessGrantsForServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessGrantsForService indicates an expected call of ListAccessGrantsForService.
func (mr *MockManagementServerMockRecorder) ListAccessGrantsForService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessGrantsForService", reflect.TypeOf((*MockManagementServer)(nil).ListAccessGrantsForService), arg0, arg1)
}

// ListAuditLogs mocks base method.
func (m *MockManagementServer) ListAuditLogs(arg0 context.Context, arg1 *api.ListAuditLogsRequest) (*api.ListAuditLogsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAuditLogs", arg0, arg1)
	ret0, _ := ret[0].(*api.ListAuditLogsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAuditLogs indicates an expected call of ListAuditLogs.
func (mr *MockManagementServerMockRecorder) ListAuditLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuditLogs", reflect.TypeOf((*MockManagementServer)(nil).ListAuditLogs), arg0, arg1)
}

// ListIncomingAccessRequests mocks base method.
func (m *MockManagementServer) ListIncomingAccessRequests(arg0 context.Context, arg1 *api.ListIncomingAccessRequestsRequest) (*api.ListIncomingAccessRequestsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIncomingAccessRequests", arg0, arg1)
	ret0, _ := ret[0].(*api.ListIncomingAccessRequestsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIncomingAccessRequests indicates an expected call of ListIncomingAccessRequests.
func (mr *MockManagementServerMockRecorder) ListIncomingAccessRequests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIncomingAccessRequests", reflect.TypeOf((*MockManagementServer)(nil).ListIncomingAccessRequests), arg0, arg1)
}

// ListIncomingOrders mocks base method.
func (m *MockManagementServer) ListIncomingOrders(arg0 context.Context, arg1 *api.ListIncomingOrdersRequest) (*api.ListIncomingOrdersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIncomingOrders", arg0, arg1)
	ret0, _ := ret[0].(*api.ListIncomingOrdersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIncomingOrders indicates an expected call of ListIncomingOrders.
func (mr *MockManagementServerMockRecorder) ListIncomingOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIncomingOrders", reflect.TypeOf((*MockManagementServer)(nil).ListIncomingOrders), arg0, arg1)
}

// ListInways mocks base method.
func (m *MockManagementServer) ListInways(arg0 context.Context, arg1 *api.ListInwaysRequest) (*api.ListInwaysResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInways", arg0, arg1)
	ret0, _ := ret[0].(*api.ListInwaysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInways indicates an expected call of ListInways.
func (mr *MockManagementServerMockRecorder) ListInways(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInways", reflect.TypeOf((*MockManagementServer)(nil).ListInways), arg0, arg1)
}

// ListOutgoingOrders mocks base method.
func (m *MockManagementServer) ListOutgoingOrders(arg0 context.Context, arg1 *api.ListOutgoingOrdersRequest) (*api.ListOutgoingOrdersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOutgoingOrders", arg0, arg1)
	ret0, _ := ret[0].(*api.ListOutgoingOrdersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOutgoingOrders indicates an expected call of ListOutgoingOrders.
func (mr *MockManagementServerMockRecorder) ListOutgoingOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOutgoingOrders", reflect.TypeOf((*MockManagementServer)(nil).ListOutgoingOrders), arg0, arg1)
}

// ListOutways mocks base method.
func (m *MockManagementServer) ListOutways(arg0 context.Context, arg1 *api.ListOutwaysRequest) (*api.ListOutwaysResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOutways", arg0, arg1)
	ret0, _ := ret[0].(*api.ListOutwaysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOutways indicates an expected call of ListOutways.
func (mr *MockManagementServerMockRecorder) ListOutways(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOutways", reflect.TypeOf((*MockManagementServer)(nil).ListOutways), arg0, arg1)
}

// ListServices mocks base method.
func (m *MockManagementServer) ListServices(arg0 context.Context, arg1 *api.ListServicesRequest) (*api.ListServicesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServices", arg0, arg1)
	ret0, _ := ret[0].(*api.ListServicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices.
func (mr *MockManagementServerMockRecorder) ListServices(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockManagementServer)(nil).ListServices), arg0, arg1)
}

// RegisterInway mocks base method.
func (m *MockManagementServer) RegisterInway(arg0 context.Context, arg1 *api.RegisterInwayRequest) (*api.RegisterInwayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterInway", arg0, arg1)
	ret0, _ := ret[0].(*api.RegisterInwayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterInway indicates an expected call of RegisterInway.
func (mr *MockManagementServerMockRecorder) RegisterInway(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterInway", reflect.TypeOf((*MockManagementServer)(nil).RegisterInway), arg0, arg1)
}

// RegisterOutway mocks base method.
func (m *MockManagementServer) RegisterOutway(arg0 context.Context, arg1 *api.RegisterOutwayRequest) (*api.RegisterOutwayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterOutway", arg0, arg1)
	ret0, _ := ret[0].(*api.RegisterOutwayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterOutway indicates an expected call of RegisterOutway.
func (mr *MockManagementServerMockRecorder) RegisterOutway(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterOutway", reflect.TypeOf((*MockManagementServer)(nil).RegisterOutway), arg0, arg1)
}

// RejectIncomingAccessRequest mocks base method.
func (m *MockManagementServer) RejectIncomingAccessRequest(arg0 context.Context, arg1 *api.RejectIncomingAccessRequestRequest) (*api.RejectIncomingAccessRequestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectIncomingAccessRequest", arg0, arg1)
	ret0, _ := ret[0].(*api.RejectIncomingAccessRequestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectIncomingAccessRequest indicates an expected call of RejectIncomingAccessRequest.
func (mr *MockManagementServerMockRecorder) RejectIncomingAccessRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectIncomingAccessRequest", reflect.TypeOf((*MockManagementServer)(nil).RejectIncomingAccessRequest), arg0, arg1)
}

// RevokeAccessGrant mocks base method.
func (m *MockManagementServer) RevokeAccessGrant(arg0 context.Context, arg1 *api.RevokeAccessGrantRequest) (*api.RevokeAccessGrantResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeAccessGrant", arg0, arg1)
	ret0, _ := ret[0].(*api.RevokeAccessGrantResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeAccessGrant indicates an expected call of RevokeAccessGrant.
func (mr *MockManagementServerMockRecorder) RevokeAccessGrant(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAccessGrant", reflect.TypeOf((*MockManagementServer)(nil).RevokeAccessGrant), arg0, arg1)
}

// RevokeOutgoingOrder mocks base method.
func (m *MockManagementServer) RevokeOutgoingOrder(arg0 context.Context, arg1 *api.RevokeOutgoingOrderRequest) (*api.RevokeOutgoingOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeOutgoingOrder", arg0, arg1)
	ret0, _ := ret[0].(*api.RevokeOutgoingOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeOutgoingOrder indicates an expected call of RevokeOutgoingOrder.
func (mr *MockManagementServerMockRecorder) RevokeOutgoingOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeOutgoingOrder", reflect.TypeOf((*MockManagementServer)(nil).RevokeOutgoingOrder), arg0, arg1)
}

// SendAccessRequest mocks base method.
func (m *MockManagementServer) SendAccessRequest(arg0 context.Context, arg1 *api.SendAccessRequestRequest) (*api.SendAccessRequestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAccessRequest", arg0, arg1)
	ret0, _ := ret[0].(*api.SendAccessRequestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendAccessRequest indicates an expected call of SendAccessRequest.
func (mr *MockManagementServerMockRecorder) SendAccessRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAccessRequest", reflect.TypeOf((*MockManagementServer)(nil).SendAccessRequest), arg0, arg1)
}

// SynchronizeAllOutgoingAccessRequests mocks base method.
func (m *MockManagementServer) SynchronizeAllOutgoingAccessRequests(arg0 context.Context, arg1 *api.SynchronizeAllOutgoingAccessRequestsRequest) (*api.SynchronizeAllOutgoingAccessRequestsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SynchronizeAllOutgoingAccessRequests", arg0, arg1)
	ret0, _ := ret[0].(*api.SynchronizeAllOutgoingAccessRequestsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SynchronizeAllOutgoingAccessRequests indicates an expected call of SynchronizeAllOutgoingAccessRequests.
func (mr *MockManagementServerMockRecorder) SynchronizeAllOutgoingAccessRequests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SynchronizeAllOutgoingAccessRequests", reflect.TypeOf((*MockManagementServer)(nil).SynchronizeAllOutgoingAccessRequests), arg0, arg1)
}

// SynchronizeOrders mocks base method.
func (m *MockManagementServer) SynchronizeOrders(arg0 context.Context, arg1 *api.SynchronizeOrdersRequest) (*api.SynchronizeOrdersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SynchronizeOrders", arg0, arg1)
	ret0, _ := ret[0].(*api.SynchronizeOrdersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SynchronizeOrders indicates an expected call of SynchronizeOrders.
func (mr *MockManagementServerMockRecorder) SynchronizeOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SynchronizeOrders", reflect.TypeOf((*MockManagementServer)(nil).SynchronizeOrders), arg0, arg1)
}

// SynchronizeOutgoingAccessRequests mocks base method.
func (m *MockManagementServer) SynchronizeOutgoingAccessRequests(arg0 context.Context, arg1 *api.SynchronizeOutgoingAccessRequestsRequest) (*api.SynchronizeOutgoingAccessRequestsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SynchronizeOutgoingAccessRequests", arg0, arg1)
	ret0, _ := ret[0].(*api.SynchronizeOutgoingAccessRequestsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SynchronizeOutgoingAccessRequests indicates an expected call of SynchronizeOutgoingAccessRequests.
func (mr *MockManagementServerMockRecorder) SynchronizeOutgoingAccessRequests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SynchronizeOutgoingAccessRequests", reflect.TypeOf((*MockManagementServer)(nil).SynchronizeOutgoingAccessRequests), arg0, arg1)
}

// UpdateInway mocks base method.
func (m *MockManagementServer) UpdateInway(arg0 context.Context, arg1 *api.UpdateInwayRequest) (*api.UpdateInwayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInway", arg0, arg1)
	ret0, _ := ret[0].(*api.UpdateInwayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInway indicates an expected call of UpdateInway.
func (mr *MockManagementServerMockRecorder) UpdateInway(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInway", reflect.TypeOf((*MockManagementServer)(nil).UpdateInway), arg0, arg1)
}

// UpdateOutgoingOrder mocks base method.
func (m *MockManagementServer) UpdateOutgoingOrder(arg0 context.Context, arg1 *api.UpdateOutgoingOrderRequest) (*api.UpdateOutgoingOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOutgoingOrder", arg0, arg1)
	ret0, _ := ret[0].(*api.UpdateOutgoingOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOutgoingOrder indicates an expected call of UpdateOutgoingOrder.
func (mr *MockManagementServerMockRecorder) UpdateOutgoingOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOutgoingOrder", reflect.TypeOf((*MockManagementServer)(nil).UpdateOutgoingOrder), arg0, arg1)
}

// UpdateService mocks base method.
func (m *MockManagementServer) UpdateService(arg0 context.Context, arg1 *api.UpdateServiceRequest) (*api.UpdateServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateService", arg0, arg1)
	ret0, _ := ret[0].(*api.UpdateServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateService indicates an expected call of UpdateService.
func (mr *MockManagementServerMockRecorder) UpdateService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockManagementServer)(nil).UpdateService), arg0, arg1)
}

// UpdateSettings mocks base method.
func (m *MockManagementServer) UpdateSettings(arg0 context.Context, arg1 *api.UpdateSettingsRequest) (*api.UpdateSettingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSettings", arg0, arg1)
	ret0, _ := ret[0].(*api.UpdateSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSettings indicates an expected call of UpdateSettings.
func (mr *MockManagementServerMockRecorder) UpdateSettings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSettings", reflect.TypeOf((*MockManagementServer)(nil).UpdateSettings), arg0, arg1)
}

// mustEmbedUnimplementedManagementServer mocks base method.
func (m *MockManagementServer) mustEmbedUnimplementedManagementServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedManagementServer")
}

// mustEmbedUnimplementedManagementServer indicates an expected call of mustEmbedUnimplementedManagementServer.
func (mr *MockManagementServerMockRecorder) mustEmbedUnimplementedManagementServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedManagementServer", reflect.TypeOf((*MockManagementServer)(nil).mustEmbedUnimplementedManagementServer))
}

// MockUnsafeManagementServer is a mock of UnsafeManagementServer interface.
type MockUnsafeManagementServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeManagementServerMockRecorder
}

// MockUnsafeManagementServerMockRecorder is the mock recorder for MockUnsafeManagementServer.
type MockUnsafeManagementServerMockRecorder struct {
	mock *MockUnsafeManagementServer
}

// NewMockUnsafeManagementServer creates a new mock instance.
func NewMockUnsafeManagementServer(ctrl *gomock.Controller) *MockUnsafeManagementServer {
	mock := &MockUnsafeManagementServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeManagementServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeManagementServer) EXPECT() *MockUnsafeManagementServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedManagementServer mocks base method.
func (m *MockUnsafeManagementServer) mustEmbedUnimplementedManagementServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedManagementServer")
}

// mustEmbedUnimplementedManagementServer indicates an expected call of mustEmbedUnimplementedManagementServer.
func (mr *MockUnsafeManagementServerMockRecorder) mustEmbedUnimplementedManagementServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedManagementServer", reflect.TypeOf((*MockUnsafeManagementServer)(nil).mustEmbedUnimplementedManagementServer))
}

// MockDirectoryClient is a mock of DirectoryClient interface.
type MockDirectoryClient struct {
	ctrl     *gomock.Controller
	recorder *MockDirectoryClientMockRecorder
}

// MockDirectoryClientMockRecorder is the mock recorder for MockDirectoryClient.
type MockDirectoryClientMockRecorder struct {
	mock *MockDirectoryClient
}

// NewMockDirectoryClient creates a new mock instance.
func NewMockDirectoryClient(ctrl *gomock.Controller) *MockDirectoryClient {
	mock := &MockDirectoryClient{ctrl: ctrl}
	mock.recorder = &MockDirectoryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectoryClient) EXPECT() *MockDirectoryClientMockRecorder {
	return m.recorder
}

// GetOrganizationService mocks base method.
func (m *MockDirectoryClient) GetOrganizationService(ctx context.Context, in *api.GetOrganizationServiceRequest, opts ...grpc.CallOption) (*api.GetOrganizationServiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrganizationService", varargs...)
	ret0, _ := ret[0].(*api.GetOrganizationServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationService indicates an expected call of GetOrganizationService.
func (mr *MockDirectoryClientMockRecorder) GetOrganizationService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationService", reflect.TypeOf((*MockDirectoryClient)(nil).GetOrganizationService), varargs...)
}

// GetTermsOfService mocks base method.
func (m *MockDirectoryClient) GetTermsOfService(ctx context.Context, in *api.GetTermsOfServiceRequest, opts ...grpc.CallOption) (*api.GetTermsOfServiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTermsOfService", varargs...)
	ret0, _ := ret[0].(*api.GetTermsOfServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTermsOfService indicates an expected call of GetTermsOfService.
func (mr *MockDirectoryClientMockRecorder) GetTermsOfService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTermsOfService", reflect.TypeOf((*MockDirectoryClient)(nil).GetTermsOfService), varargs...)
}

// ListServices mocks base method.
func (m *MockDirectoryClient) ListServices(ctx context.Context, in *api.DirectoryListServicesRequest, opts ...grpc.CallOption) (*api.DirectoryListServicesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServices", varargs...)
	ret0, _ := ret[0].(*api.DirectoryListServicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices.
func (mr *MockDirectoryClientMockRecorder) ListServices(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockDirectoryClient)(nil).ListServices), varargs...)
}

// RequestAccessToService mocks base method.
func (m *MockDirectoryClient) RequestAccessToService(ctx context.Context, in *api.RequestAccessToServiceRequest, opts ...grpc.CallOption) (*api.RequestAccessToServiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequestAccessToService", varargs...)
	ret0, _ := ret[0].(*api.RequestAccessToServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestAccessToService indicates an expected call of RequestAccessToService.
func (mr *MockDirectoryClientMockRecorder) RequestAccessToService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestAccessToService", reflect.TypeOf((*MockDirectoryClient)(nil).RequestAccessToService), varargs...)
}

// MockDirectoryServer is a mock of DirectoryServer interface.
type MockDirectoryServer struct {
	ctrl     *gomock.Controller
	recorder *MockDirectoryServerMockRecorder
}

// MockDirectoryServerMockRecorder is the mock recorder for MockDirectoryServer.
type MockDirectoryServerMockRecorder struct {
	mock *MockDirectoryServer
}

// NewMockDirectoryServer creates a new mock instance.
func NewMockDirectoryServer(ctrl *gomock.Controller) *MockDirectoryServer {
	mock := &MockDirectoryServer{ctrl: ctrl}
	mock.recorder = &MockDirectoryServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectoryServer) EXPECT() *MockDirectoryServerMockRecorder {
	return m.recorder
}

// GetOrganizationService mocks base method.
func (m *MockDirectoryServer) GetOrganizationService(arg0 context.Context, arg1 *api.GetOrganizationServiceRequest) (*api.GetOrganizationServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationService", arg0, arg1)
	ret0, _ := ret[0].(*api.GetOrganizationServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationService indicates an expected call of GetOrganizationService.
func (mr *MockDirectoryServerMockRecorder) GetOrganizationService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationService", reflect.TypeOf((*MockDirectoryServer)(nil).GetOrganizationService), arg0, arg1)
}

// GetTermsOfService mocks base method.
func (m *MockDirectoryServer) GetTermsOfService(arg0 context.Context, arg1 *api.GetTermsOfServiceRequest) (*api.GetTermsOfServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTermsOfService", arg0, arg1)
	ret0, _ := ret[0].(*api.GetTermsOfServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTermsOfService indicates an expected call of GetTermsOfService.
func (mr *MockDirectoryServerMockRecorder) GetTermsOfService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTermsOfService", reflect.TypeOf((*MockDirectoryServer)(nil).GetTermsOfService), arg0, arg1)
}

// ListServices mocks base method.
func (m *MockDirectoryServer) ListServices(arg0 context.Context, arg1 *api.DirectoryListServicesRequest) (*api.DirectoryListServicesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServices", arg0, arg1)
	ret0, _ := ret[0].(*api.DirectoryListServicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices.
func (mr *MockDirectoryServerMockRecorder) ListServices(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockDirectoryServer)(nil).ListServices), arg0, arg1)
}

// RequestAccessToService mocks base method.
func (m *MockDirectoryServer) RequestAccessToService(arg0 context.Context, arg1 *api.RequestAccessToServiceRequest) (*api.RequestAccessToServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestAccessToService", arg0, arg1)
	ret0, _ := ret[0].(*api.RequestAccessToServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestAccessToService indicates an expected call of RequestAccessToService.
func (mr *MockDirectoryServerMockRecorder) RequestAccessToService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestAccessToService", reflect.TypeOf((*MockDirectoryServer)(nil).RequestAccessToService), arg0, arg1)
}

// mustEmbedUnimplementedDirectoryServer mocks base method.
func (m *MockDirectoryServer) mustEmbedUnimplementedDirectoryServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDirectoryServer")
}

// mustEmbedUnimplementedDirectoryServer indicates an expected call of mustEmbedUnimplementedDirectoryServer.
func (mr *MockDirectoryServerMockRecorder) mustEmbedUnimplementedDirectoryServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDirectoryServer", reflect.TypeOf((*MockDirectoryServer)(nil).mustEmbedUnimplementedDirectoryServer))
}

// MockUnsafeDirectoryServer is a mock of UnsafeDirectoryServer interface.
type MockUnsafeDirectoryServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeDirectoryServerMockRecorder
}

// MockUnsafeDirectoryServerMockRecorder is the mock recorder for MockUnsafeDirectoryServer.
type MockUnsafeDirectoryServerMockRecorder struct {
	mock *MockUnsafeDirectoryServer
}

// NewMockUnsafeDirectoryServer creates a new mock instance.
func NewMockUnsafeDirectoryServer(ctrl *gomock.Controller) *MockUnsafeDirectoryServer {
	mock := &MockUnsafeDirectoryServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeDirectoryServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeDirectoryServer) EXPECT() *MockUnsafeDirectoryServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedDirectoryServer mocks base method.
func (m *MockUnsafeDirectoryServer) mustEmbedUnimplementedDirectoryServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDirectoryServer")
}

// mustEmbedUnimplementedDirectoryServer indicates an expected call of mustEmbedUnimplementedDirectoryServer.
func (mr *MockUnsafeDirectoryServerMockRecorder) mustEmbedUnimplementedDirectoryServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDirectoryServer", reflect.TypeOf((*MockUnsafeDirectoryServer)(nil).mustEmbedUnimplementedDirectoryServer))
}

// MockTXLogClient is a mock of TXLogClient interface.
type MockTXLogClient struct {
	ctrl     *gomock.Controller
	recorder *MockTXLogClientMockRecorder
}

// MockTXLogClientMockRecorder is the mock recorder for MockTXLogClient.
type MockTXLogClientMockRecorder struct {
	mock *MockTXLogClient
}

// NewMockTXLogClient creates a new mock instance.
func NewMockTXLogClient(ctrl *gomock.Controller) *MockTXLogClient {
	mock := &MockTXLogClient{ctrl: ctrl}
	mock.recorder = &MockTXLogClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTXLogClient) EXPECT() *MockTXLogClientMockRecorder {
	return m.recorder
}

// ListRecords mocks base method.
func (m *MockTXLogClient) ListRecords(ctx context.Context, in *api.TXLogListRecordsRequest, opts ...grpc.CallOption) (*api.TXLogListRecordsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecords", varargs...)
	ret0, _ := ret[0].(*api.TXLogListRecordsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecords indicates an expected call of ListRecords.
func (mr *MockTXLogClientMockRecorder) ListRecords(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecords", reflect.TypeOf((*MockTXLogClient)(nil).ListRecords), varargs...)
}

// MockTXLogServer is a mock of TXLogServer interface.
type MockTXLogServer struct {
	ctrl     *gomock.Controller
	recorder *MockTXLogServerMockRecorder
}

// MockTXLogServerMockRecorder is the mock recorder for MockTXLogServer.
type MockTXLogServerMockRecorder struct {
	mock *MockTXLogServer
}

// NewMockTXLogServer creates a new mock instance.
func NewMockTXLogServer(ctrl *gomock.Controller) *MockTXLogServer {
	mock := &MockTXLogServer{ctrl: ctrl}
	mock.recorder = &MockTXLogServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTXLogServer) EXPECT() *MockTXLogServerMockRecorder {
	return m.recorder
}

// ListRecords mocks base method.
func (m *MockTXLogServer) ListRecords(arg0 context.Context, arg1 *api.TXLogListRecordsRequest) (*api.TXLogListRecordsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecords", arg0, arg1)
	ret0, _ := ret[0].(*api.TXLogListRecordsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecords indicates an expected call of ListRecords.
func (mr *MockTXLogServerMockRecorder) ListRecords(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecords", reflect.TypeOf((*MockTXLogServer)(nil).ListRecords), arg0, arg1)
}

// mustEmbedUnimplementedTXLogServer mocks base method.
func (m *MockTXLogServer) mustEmbedUnimplementedTXLogServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTXLogServer")
}

// mustEmbedUnimplementedTXLogServer indicates an expected call of mustEmbedUnimplementedTXLogServer.
func (mr *MockTXLogServerMockRecorder) mustEmbedUnimplementedTXLogServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTXLogServer", reflect.TypeOf((*MockTXLogServer)(nil).mustEmbedUnimplementedTXLogServer))
}

// MockUnsafeTXLogServer is a mock of UnsafeTXLogServer interface.
type MockUnsafeTXLogServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeTXLogServerMockRecorder
}

// MockUnsafeTXLogServerMockRecorder is the mock recorder for MockUnsafeTXLogServer.
type MockUnsafeTXLogServerMockRecorder struct {
	mock *MockUnsafeTXLogServer
}

// NewMockUnsafeTXLogServer creates a new mock instance.
func NewMockUnsafeTXLogServer(ctrl *gomock.Controller) *MockUnsafeTXLogServer {
	mock := &MockUnsafeTXLogServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeTXLogServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeTXLogServer) EXPECT() *MockUnsafeTXLogServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedTXLogServer mocks base method.
func (m *MockUnsafeTXLogServer) mustEmbedUnimplementedTXLogServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTXLogServer")
}

// mustEmbedUnimplementedTXLogServer indicates an expected call of mustEmbedUnimplementedTXLogServer.
func (mr *MockUnsafeTXLogServerMockRecorder) mustEmbedUnimplementedTXLogServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTXLogServer", reflect.TypeOf((*MockUnsafeTXLogServer)(nil).mustEmbedUnimplementedTXLogServer))
}
