// Code generated by MockGen. DO NOT EDIT.
// Source: authenticator.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	oidc "github.com/coreos/go-oidc"
	gomock "github.com/golang/mock/gomock"
	sessions "github.com/gorilla/sessions"
	oauth2 "golang.org/x/oauth2"
	http "net/http"
	reflect "reflect"
)

// MockOAuth2Config is a mock of OAuth2Config interface
type MockOAuth2Config struct {
	ctrl     *gomock.Controller
	recorder *MockOAuth2ConfigMockRecorder
}

// MockOAuth2ConfigMockRecorder is the mock recorder for MockOAuth2Config
type MockOAuth2ConfigMockRecorder struct {
	mock *MockOAuth2Config
}

// NewMockOAuth2Config creates a new mock instance
func NewMockOAuth2Config(ctrl *gomock.Controller) *MockOAuth2Config {
	mock := &MockOAuth2Config{ctrl: ctrl}
	mock.recorder = &MockOAuth2ConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOAuth2Config) EXPECT() *MockOAuth2ConfigMockRecorder {
	return m.recorder
}

// AuthCodeURL mocks base method
func (m *MockOAuth2Config) AuthCodeURL(state string, opts ...oauth2.AuthCodeOption) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{state}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthCodeURL", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// AuthCodeURL indicates an expected call of AuthCodeURL
func (mr *MockOAuth2ConfigMockRecorder) AuthCodeURL(state interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{state}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthCodeURL", reflect.TypeOf((*MockOAuth2Config)(nil).AuthCodeURL), varargs...)
}

// Exchange mocks base method
func (m *MockOAuth2Config) Exchange(ctx context.Context, code string, opts ...oauth2.AuthCodeOption) (*oauth2.Token, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, code}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exchange", varargs...)
	ret0, _ := ret[0].(*oauth2.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exchange indicates an expected call of Exchange
func (mr *MockOAuth2ConfigMockRecorder) Exchange(ctx, code interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, code}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exchange", reflect.TypeOf((*MockOAuth2Config)(nil).Exchange), varargs...)
}

// MockProvider is a mock of Provider interface
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// Endpoint mocks base method
func (m *MockProvider) Endpoint() oauth2.Endpoint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Endpoint")
	ret0, _ := ret[0].(oauth2.Endpoint)
	return ret0
}

// Endpoint indicates an expected call of Endpoint
func (mr *MockProviderMockRecorder) Endpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Endpoint", reflect.TypeOf((*MockProvider)(nil).Endpoint))
}

// Verifier mocks base method
func (m *MockProvider) Verifier(config *oidc.Config) *oidc.IDTokenVerifier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verifier", config)
	ret0, _ := ret[0].(*oidc.IDTokenVerifier)
	return ret0
}

// Verifier indicates an expected call of Verifier
func (mr *MockProviderMockRecorder) Verifier(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verifier", reflect.TypeOf((*MockProvider)(nil).Verifier), config)
}

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockStore) Get(r *http.Request, name string) (*sessions.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", r, name)
	ret0, _ := ret[0].(*sessions.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockStoreMockRecorder) Get(r, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStore)(nil).Get), r, name)
}

// New mocks base method
func (m *MockStore) New(r *http.Request, name string) (*sessions.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", r, name)
	ret0, _ := ret[0].(*sessions.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New
func (mr *MockStoreMockRecorder) New(r, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockStore)(nil).New), r, name)
}

// Save mocks base method
func (m *MockStore) Save(r *http.Request, w http.ResponseWriter, s *sessions.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", r, w, s)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockStoreMockRecorder) Save(r, w, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStore)(nil).Save), r, w, s)
}
