// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: queries.sql

package queries

import (
	"context"
	"database/sql"
	"time"
)

const countExpiredSessions = `-- name: CountExpiredSessions :one
SELECT count(*) 
FROM http_sessions.sessions
WHERE expires_on < now()
`

func (q *Queries) CountExpiredSessions(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countExpiredSessionsStmt, countExpiredSessions)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSession = `-- name: CreateSession :exec

INSERT INTO http_sessions.sessions (
    key, 
    data, 
    created_at, 
    updated_at, 
    expires_on
)
VALUES ($1, $2, $3, $4, $5)
`

type CreateSessionParams struct {
	Key       []byte
	Data      []byte
	CreatedAt time.Time
	UpdatedAt sql.NullTime
	ExpiresOn sql.NullTime
}

// Copyright Â© VNG Realisatie 2022
// Licensed under the EUPL
func (q *Queries) CreateSession(ctx context.Context, arg *CreateSessionParams) error {
	_, err := q.exec(ctx, q.createSessionStmt, createSession,
		arg.Key,
		arg.Data,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ExpiresOn,
	)
	return err
}

const deleteExpiredSessions = `-- name: DeleteExpiredSessions :exec
DELETE
FROM http_sessions.sessions 
WHERE expires_on < now()
`

func (q *Queries) DeleteExpiredSessions(ctx context.Context) error {
	_, err := q.exec(ctx, q.deleteExpiredSessionsStmt, deleteExpiredSessions)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE
FROM http_sessions.sessions
WHERE key = $1
`

func (q *Queries) DeleteSession(ctx context.Context, key []byte) error {
	_, err := q.exec(ctx, q.deleteSessionStmt, deleteSession, key)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, 
    key, 
    data, 
    created_at, 
    updated_at, 
    expires_on 
FROM http_sessions.sessions 
WHERE key = $1
`

func (q *Queries) GetSession(ctx context.Context, key []byte) (*HttpSessionsSession, error) {
	row := q.queryRow(ctx, q.getSessionStmt, getSession, key)
	var i HttpSessionsSession
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresOn,
	)
	return &i, err
}

const updateSession = `-- name: UpdateSession :exec
UPDATE http_sessions.sessions 
SET data=$1, 
    updated_at=$2, 
    expires_on=$3 
WHERE key=$4
`

type UpdateSessionParams struct {
	Data      []byte
	UpdatedAt sql.NullTime
	ExpiresOn sql.NullTime
	Key       []byte
}

func (q *Queries) UpdateSession(ctx context.Context, arg *UpdateSessionParams) error {
	_, err := q.exec(ctx, q.updateSessionStmt, updateSession,
		arg.Data,
		arg.UpdatedAt,
		arg.ExpiresOn,
		arg.Key,
	)
	return err
}
