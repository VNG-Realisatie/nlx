// Code generated by MockGen. DO NOT EDIT.
// Source: go.nlx.io/nlx/management-api/pkg/outway (interfaces: Client)

// Package mock_outway is a generated GoMock package.
package mock_outway

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"

	api "go.nlx.io/nlx/outway/api"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// SignOrderClaim mocks base method.
func (m *MockClient) SignOrderClaim(arg0 context.Context, arg1 *api.SignOrderClaimRequest, arg2 ...grpc.CallOption) (*api.SignOrderClaimResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignOrderClaim", varargs...)
	ret0, _ := ret[0].(*api.SignOrderClaimResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignOrderClaim indicates an expected call of SignOrderClaim.
func (mr *MockClientMockRecorder) SignOrderClaim(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignOrderClaim", reflect.TypeOf((*MockClient)(nil).SignOrderClaim), varargs...)
}
