// Code generated by MockGen. DO NOT EDIT.
// Source: session.go

// Package mock_session is a generated GoMock package.
package mock_session

import (
	fmt "fmt"
	gomock "github.com/golang/mock/gomock"
	models "go.nlx.io/nlx/management-api/models"
	http "net/http"
	reflect "reflect"
)

// MockSession is a mock of Session interface
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// IsAuthenticated mocks base method
func (m *MockSession) IsAuthenticated() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthenticated")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAuthenticated indicates an expected call of IsAuthenticated
func (mr *MockSessionMockRecorder) IsAuthenticated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthenticated", reflect.TypeOf((*MockSession)(nil).IsAuthenticated))
}

// Account mocks base method
func (m *MockSession) Account() (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Account")
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Account indicates an expected call of Account
func (mr *MockSessionMockRecorder) Account() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Account", reflect.TypeOf((*MockSession)(nil).Account))
}

// AccountByName mocks base method
func (m *MockSession) AccountByName(name string) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountByName", name)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountByName indicates an expected call of AccountByName
func (mr *MockSessionMockRecorder) AccountByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountByName", reflect.TypeOf((*MockSession)(nil).AccountByName), name)
}

// Login mocks base method
func (m *MockSession) Login(w http.ResponseWriter, id fmt.Stringer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", w, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login
func (mr *MockSessionMockRecorder) Login(w, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockSession)(nil).Login), w, id)
}

// Logout mocks base method
func (m *MockSession) Logout(w http.ResponseWriter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", w)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout
func (mr *MockSessionMockRecorder) Logout(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockSession)(nil).Logout), w)
}
