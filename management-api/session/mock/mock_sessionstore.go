// Code generated by MockGen. DO NOT EDIT.
// Source: sessionstore.go

// Package mock_session is a generated GoMock package.
package mock_session

import (
	chi "github.com/go-chi/chi"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockSessionstore is a mock of Sessionstore interface
type MockSessionstore struct {
	ctrl     *gomock.Controller
	recorder *MockSessionstoreMockRecorder
}

// MockSessionstoreMockRecorder is the mock recorder for MockSessionstore
type MockSessionstoreMockRecorder struct {
	mock *MockSessionstore
}

// NewMockSessionstore creates a new mock instance
func NewMockSessionstore(ctrl *gomock.Controller) *MockSessionstore {
	mock := &MockSessionstore{ctrl: ctrl}
	mock.recorder = &MockSessionstoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionstore) EXPECT() *MockSessionstoreMockRecorder {
	return m.recorder
}

// Middleware mocks base method
func (m *MockSessionstore) Middleware(next http.Handler) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Middleware", next)
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// Middleware indicates an expected call of Middleware
func (mr *MockSessionstoreMockRecorder) Middleware(next interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Middleware", reflect.TypeOf((*MockSessionstore)(nil).Middleware), next)
}

// Routes mocks base method
func (m *MockSessionstore) Routes() chi.Router {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Routes")
	ret0, _ := ret[0].(chi.Router)
	return ret0
}

// Routes indicates an expected call of Routes
func (mr *MockSessionstoreMockRecorder) Routes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Routes", reflect.TypeOf((*MockSessionstore)(nil).Routes))
}
