/* tslint:disable */
/* eslint-disable */
/**
 * management.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ManagementDirectoryListServicesResponse,
    ManagementDirectoryListServicesResponseFromJSON,
    ManagementDirectoryListServicesResponseToJSON,
    ManagementDirectoryService,
    ManagementDirectoryServiceFromJSON,
    ManagementDirectoryServiceToJSON,
    ManagementGetTermsOfServiceResponse,
    ManagementGetTermsOfServiceResponseFromJSON,
    ManagementGetTermsOfServiceResponseToJSON,
    ManagementOutgoingAccessRequest,
    ManagementOutgoingAccessRequestFromJSON,
    ManagementOutgoingAccessRequestToJSON,
    RpcStatus,
    RpcStatusFromJSON,
    RpcStatusToJSON,
} from '../models';

export interface DirectoryGetOrganizationServiceRequest {
    organizationSerialNumber: string;
    serviceName: string;
}

export interface DirectoryRequestAccessToServiceRequest {
    organizationSerialNumber: string;
    serviceName: string;
}

/**
 * 
 */
export class DirectoryApi extends runtime.BaseAPI {

    /**
     */
    async directoryGetOrganizationServiceRaw(requestParameters: DirectoryGetOrganizationServiceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ManagementDirectoryService>> {
        if (requestParameters.organizationSerialNumber === null || requestParameters.organizationSerialNumber === undefined) {
            throw new runtime.RequiredError('organizationSerialNumber','Required parameter requestParameters.organizationSerialNumber was null or undefined when calling directoryGetOrganizationService.');
        }

        if (requestParameters.serviceName === null || requestParameters.serviceName === undefined) {
            throw new runtime.RequiredError('serviceName','Required parameter requestParameters.serviceName was null or undefined when calling directoryGetOrganizationService.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/directory/organizations/{organizationSerialNumber}/services/{serviceName}`.replace(`{${"organizationSerialNumber"}}`, encodeURIComponent(String(requestParameters.organizationSerialNumber))).replace(`{${"serviceName"}}`, encodeURIComponent(String(requestParameters.serviceName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementDirectoryServiceFromJSON(jsonValue));
    }

    /**
     */
    async directoryGetOrganizationService(requestParameters: DirectoryGetOrganizationServiceRequest, initOverrides?: RequestInit): Promise<ManagementDirectoryService> {
        const response = await this.directoryGetOrganizationServiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async directoryGetTermsOfServiceRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<ManagementGetTermsOfServiceResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/directory/terms-of-service`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementGetTermsOfServiceResponseFromJSON(jsonValue));
    }

    /**
     */
    async directoryGetTermsOfService(initOverrides?: RequestInit): Promise<ManagementGetTermsOfServiceResponse> {
        const response = await this.directoryGetTermsOfServiceRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async directoryListServicesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<ManagementDirectoryListServicesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/directory/services`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementDirectoryListServicesResponseFromJSON(jsonValue));
    }

    /**
     */
    async directoryListServices(initOverrides?: RequestInit): Promise<ManagementDirectoryListServicesResponse> {
        const response = await this.directoryListServicesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async directoryRequestAccessToServiceRaw(requestParameters: DirectoryRequestAccessToServiceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ManagementOutgoingAccessRequest>> {
        if (requestParameters.organizationSerialNumber === null || requestParameters.organizationSerialNumber === undefined) {
            throw new runtime.RequiredError('organizationSerialNumber','Required parameter requestParameters.organizationSerialNumber was null or undefined when calling directoryRequestAccessToService.');
        }

        if (requestParameters.serviceName === null || requestParameters.serviceName === undefined) {
            throw new runtime.RequiredError('serviceName','Required parameter requestParameters.serviceName was null or undefined when calling directoryRequestAccessToService.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/directory/organizations/{organizationSerialNumber}/services/{serviceName}/access-requests`.replace(`{${"organizationSerialNumber"}}`, encodeURIComponent(String(requestParameters.organizationSerialNumber))).replace(`{${"serviceName"}}`, encodeURIComponent(String(requestParameters.serviceName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementOutgoingAccessRequestFromJSON(jsonValue));
    }

    /**
     */
    async directoryRequestAccessToService(requestParameters: DirectoryRequestAccessToServiceRequest, initOverrides?: RequestInit): Promise<ManagementOutgoingAccessRequest> {
        const response = await this.directoryRequestAccessToServiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
