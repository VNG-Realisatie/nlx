/* tslint:disable */
/* eslint-disable */
/**
 * management.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ManagementAccessGrant,
  ManagementCreateAccessRequestRequest,
  ManagementCreateOutgoingOrderRequest,
  ManagementCreateServiceRequest,
  ManagementCreateServiceResponse,
  ManagementDownloadFinanceExportResponse,
  ManagementGetServiceResponse,
  ManagementGetStatisticsOfServicesResponse,
  ManagementGetTermsOfServiceStatusResponse,
  ManagementInway,
  ManagementIsFinanceEnabledResponse,
  ManagementIsTXLogEnabledResponse,
  ManagementListAccessGrantsForServiceResponse,
  ManagementListAuditLogsResponse,
  ManagementListIncomingAccessRequestsResponse,
  ManagementListIncomingOrdersResponse,
  ManagementListInwaysResponse,
  ManagementListOutgoingOrdersResponse,
  ManagementListOutwaysResponse,
  ManagementListServicesResponse,
  ManagementOutgoingAccessRequest,
  ManagementRegisterOutwayRequest,
  ManagementSettings,
  ManagementSynchronizeOrdersResponse,
  ManagementUpdateOutgoingOrderRequest,
  ManagementUpdateServiceRequest,
  ManagementUpdateServiceResponse,
  ManagementUpdateSettingsRequest,
  RpcStatus,
} from '../models';
import {
    ManagementAccessGrantFromJSON,
    ManagementAccessGrantToJSON,
    ManagementCreateAccessRequestRequestFromJSON,
    ManagementCreateAccessRequestRequestToJSON,
    ManagementCreateOutgoingOrderRequestFromJSON,
    ManagementCreateOutgoingOrderRequestToJSON,
    ManagementCreateServiceRequestFromJSON,
    ManagementCreateServiceRequestToJSON,
    ManagementCreateServiceResponseFromJSON,
    ManagementCreateServiceResponseToJSON,
    ManagementDownloadFinanceExportResponseFromJSON,
    ManagementDownloadFinanceExportResponseToJSON,
    ManagementGetServiceResponseFromJSON,
    ManagementGetServiceResponseToJSON,
    ManagementGetStatisticsOfServicesResponseFromJSON,
    ManagementGetStatisticsOfServicesResponseToJSON,
    ManagementGetTermsOfServiceStatusResponseFromJSON,
    ManagementGetTermsOfServiceStatusResponseToJSON,
    ManagementInwayFromJSON,
    ManagementInwayToJSON,
    ManagementIsFinanceEnabledResponseFromJSON,
    ManagementIsFinanceEnabledResponseToJSON,
    ManagementIsTXLogEnabledResponseFromJSON,
    ManagementIsTXLogEnabledResponseToJSON,
    ManagementListAccessGrantsForServiceResponseFromJSON,
    ManagementListAccessGrantsForServiceResponseToJSON,
    ManagementListAuditLogsResponseFromJSON,
    ManagementListAuditLogsResponseToJSON,
    ManagementListIncomingAccessRequestsResponseFromJSON,
    ManagementListIncomingAccessRequestsResponseToJSON,
    ManagementListIncomingOrdersResponseFromJSON,
    ManagementListIncomingOrdersResponseToJSON,
    ManagementListInwaysResponseFromJSON,
    ManagementListInwaysResponseToJSON,
    ManagementListOutgoingOrdersResponseFromJSON,
    ManagementListOutgoingOrdersResponseToJSON,
    ManagementListOutwaysResponseFromJSON,
    ManagementListOutwaysResponseToJSON,
    ManagementListServicesResponseFromJSON,
    ManagementListServicesResponseToJSON,
    ManagementOutgoingAccessRequestFromJSON,
    ManagementOutgoingAccessRequestToJSON,
    ManagementRegisterOutwayRequestFromJSON,
    ManagementRegisterOutwayRequestToJSON,
    ManagementSettingsFromJSON,
    ManagementSettingsToJSON,
    ManagementSynchronizeOrdersResponseFromJSON,
    ManagementSynchronizeOrdersResponseToJSON,
    ManagementUpdateOutgoingOrderRequestFromJSON,
    ManagementUpdateOutgoingOrderRequestToJSON,
    ManagementUpdateServiceRequestFromJSON,
    ManagementUpdateServiceRequestToJSON,
    ManagementUpdateServiceResponseFromJSON,
    ManagementUpdateServiceResponseToJSON,
    ManagementUpdateSettingsRequestFromJSON,
    ManagementUpdateSettingsRequestToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
} from '../models';

export interface ManagementApproveIncomingAccessRequestRequest {
    serviceName: string;
    accessRequestID: string;
}

export interface ManagementCreateAccessRequestOperationRequest {
    body: ManagementCreateAccessRequestRequest;
}

export interface ManagementCreateOutgoingOrderOperationRequest {
    body: ManagementCreateOutgoingOrderRequest;
}

export interface ManagementCreateServiceOperationRequest {
    body: ManagementCreateServiceRequest;
}

export interface ManagementDeleteInwayRequest {
    name: string;
}

export interface ManagementDeleteServiceRequest {
    name: string;
}

export interface ManagementGetInwayRequest {
    name: string;
}

export interface ManagementGetServiceRequest {
    name: string;
}

export interface ManagementListAccessGrantsForServiceRequest {
    serviceName: string;
}

export interface ManagementListIncomingAccessRequestsRequest {
    serviceName: string;
}

export interface ManagementRegisterInwayRequest {
    body: ManagementInway;
}

export interface ManagementRegisterOutwayOperationRequest {
    body: ManagementRegisterOutwayRequest;
}

export interface ManagementRejectIncomingAccessRequestRequest {
    serviceName: string;
    accessRequestID: string;
}

export interface ManagementRevokeAccessGrantRequest {
    accessGrantID: string;
}

export interface ManagementRevokeOutgoingOrderRequest {
    delegatee: string;
    reference: string;
}

export interface ManagementSendAccessRequestRequest {
    accessRequestID: string;
}

export interface ManagementUpdateInwayRequest {
    name: string;
    inway: ManagementInway;
}

export interface ManagementUpdateOutgoingOrderOperationRequest {
    body: ManagementUpdateOutgoingOrderRequest;
}

export interface ManagementUpdateServiceOperationRequest {
    name: string;
    body: ManagementUpdateServiceRequest;
}

export interface ManagementUpdateSettingsOperationRequest {
    body: ManagementUpdateSettingsRequest;
}

/**
 * 
 */
export class ManagementApi extends runtime.BaseAPI {

    /**
     */
    async managementAcceptTermsOfServiceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/terms-of-service`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async managementAcceptTermsOfService(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.managementAcceptTermsOfServiceRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async managementApproveIncomingAccessRequestRaw(requestParameters: ManagementApproveIncomingAccessRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.serviceName === null || requestParameters.serviceName === undefined) {
            throw new runtime.RequiredError('serviceName','Required parameter requestParameters.serviceName was null or undefined when calling managementApproveIncomingAccessRequest.');
        }

        if (requestParameters.accessRequestID === null || requestParameters.accessRequestID === undefined) {
            throw new runtime.RequiredError('accessRequestID','Required parameter requestParameters.accessRequestID was null or undefined when calling managementApproveIncomingAccessRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/access-requests/incoming/services/{serviceName}/{accessRequestID}/approve`.replace(`{${"serviceName"}}`, encodeURIComponent(String(requestParameters.serviceName))).replace(`{${"accessRequestID"}}`, encodeURIComponent(String(requestParameters.accessRequestID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async managementApproveIncomingAccessRequest(requestParameters: ManagementApproveIncomingAccessRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.managementApproveIncomingAccessRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async managementCreateAccessRequestRaw(requestParameters: ManagementCreateAccessRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementOutgoingAccessRequest>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling managementCreateAccessRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/access-requests`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ManagementCreateAccessRequestRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementOutgoingAccessRequestFromJSON(jsonValue));
    }

    /**
     */
    async managementCreateAccessRequest(requestParameters: ManagementCreateAccessRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementOutgoingAccessRequest> {
        const response = await this.managementCreateAccessRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async managementCreateOutgoingOrderRaw(requestParameters: ManagementCreateOutgoingOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling managementCreateOutgoingOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/orders/outgoing`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ManagementCreateOutgoingOrderRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async managementCreateOutgoingOrder(requestParameters: ManagementCreateOutgoingOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.managementCreateOutgoingOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async managementCreateServiceRaw(requestParameters: ManagementCreateServiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementCreateServiceResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling managementCreateService.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/services`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ManagementCreateServiceRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementCreateServiceResponseFromJSON(jsonValue));
    }

    /**
     */
    async managementCreateService(requestParameters: ManagementCreateServiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementCreateServiceResponse> {
        const response = await this.managementCreateServiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async managementDeleteInwayRaw(requestParameters: ManagementDeleteInwayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling managementDeleteInway.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/inways/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async managementDeleteInway(requestParameters: ManagementDeleteInwayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.managementDeleteInwayRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async managementDeleteServiceRaw(requestParameters: ManagementDeleteServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling managementDeleteService.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/services/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async managementDeleteService(requestParameters: ManagementDeleteServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.managementDeleteServiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async managementDownloadFinanceExportRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementDownloadFinanceExportResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/finance/export`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementDownloadFinanceExportResponseFromJSON(jsonValue));
    }

    /**
     */
    async managementDownloadFinanceExport(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementDownloadFinanceExportResponse> {
        const response = await this.managementDownloadFinanceExportRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async managementGetInwayRaw(requestParameters: ManagementGetInwayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementInway>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling managementGetInway.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/inways/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementInwayFromJSON(jsonValue));
    }

    /**
     */
    async managementGetInway(requestParameters: ManagementGetInwayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementInway> {
        const response = await this.managementGetInwayRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async managementGetServiceRaw(requestParameters: ManagementGetServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementGetServiceResponse>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling managementGetService.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/services/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementGetServiceResponseFromJSON(jsonValue));
    }

    /**
     */
    async managementGetService(requestParameters: ManagementGetServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementGetServiceResponse> {
        const response = await this.managementGetServiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async managementGetSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementSettings>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/settings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementSettingsFromJSON(jsonValue));
    }

    /**
     */
    async managementGetSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementSettings> {
        const response = await this.managementGetSettingsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async managementGetStatisticsOfServicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementGetStatisticsOfServicesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/statistics/services`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementGetStatisticsOfServicesResponseFromJSON(jsonValue));
    }

    /**
     */
    async managementGetStatisticsOfServices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementGetStatisticsOfServicesResponse> {
        const response = await this.managementGetStatisticsOfServicesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async managementGetTermsOfServiceStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementGetTermsOfServiceStatusResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/terms-of-service`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementGetTermsOfServiceStatusResponseFromJSON(jsonValue));
    }

    /**
     */
    async managementGetTermsOfServiceStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementGetTermsOfServiceStatusResponse> {
        const response = await this.managementGetTermsOfServiceStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async managementIsFinanceEnabledRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementIsFinanceEnabledResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/finance/enabled`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementIsFinanceEnabledResponseFromJSON(jsonValue));
    }

    /**
     */
    async managementIsFinanceEnabled(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementIsFinanceEnabledResponse> {
        const response = await this.managementIsFinanceEnabledRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async managementIsTXLogEnabledRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementIsTXLogEnabledResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/txlog/enabled`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementIsTXLogEnabledResponseFromJSON(jsonValue));
    }

    /**
     */
    async managementIsTXLogEnabled(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementIsTXLogEnabledResponse> {
        const response = await this.managementIsTXLogEnabledRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async managementListAccessGrantsForServiceRaw(requestParameters: ManagementListAccessGrantsForServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementListAccessGrantsForServiceResponse>> {
        if (requestParameters.serviceName === null || requestParameters.serviceName === undefined) {
            throw new runtime.RequiredError('serviceName','Required parameter requestParameters.serviceName was null or undefined when calling managementListAccessGrantsForService.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/access-grants/services/{serviceName}`.replace(`{${"serviceName"}}`, encodeURIComponent(String(requestParameters.serviceName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementListAccessGrantsForServiceResponseFromJSON(jsonValue));
    }

    /**
     */
    async managementListAccessGrantsForService(requestParameters: ManagementListAccessGrantsForServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementListAccessGrantsForServiceResponse> {
        const response = await this.managementListAccessGrantsForServiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async managementListAuditLogsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementListAuditLogsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/audit-logs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementListAuditLogsResponseFromJSON(jsonValue));
    }

    /**
     */
    async managementListAuditLogs(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementListAuditLogsResponse> {
        const response = await this.managementListAuditLogsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async managementListIncomingAccessRequestsRaw(requestParameters: ManagementListIncomingAccessRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementListIncomingAccessRequestsResponse>> {
        if (requestParameters.serviceName === null || requestParameters.serviceName === undefined) {
            throw new runtime.RequiredError('serviceName','Required parameter requestParameters.serviceName was null or undefined when calling managementListIncomingAccessRequests.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/access-requests/incoming/services/{serviceName}`.replace(`{${"serviceName"}}`, encodeURIComponent(String(requestParameters.serviceName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementListIncomingAccessRequestsResponseFromJSON(jsonValue));
    }

    /**
     */
    async managementListIncomingAccessRequests(requestParameters: ManagementListIncomingAccessRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementListIncomingAccessRequestsResponse> {
        const response = await this.managementListIncomingAccessRequestsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async managementListIncomingOrdersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementListIncomingOrdersResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/orders/incoming`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementListIncomingOrdersResponseFromJSON(jsonValue));
    }

    /**
     */
    async managementListIncomingOrders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementListIncomingOrdersResponse> {
        const response = await this.managementListIncomingOrdersRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async managementListInwaysRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementListInwaysResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/inways`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementListInwaysResponseFromJSON(jsonValue));
    }

    /**
     */
    async managementListInways(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementListInwaysResponse> {
        const response = await this.managementListInwaysRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async managementListOutgoingOrdersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementListOutgoingOrdersResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/orders/outgoing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementListOutgoingOrdersResponseFromJSON(jsonValue));
    }

    /**
     */
    async managementListOutgoingOrders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementListOutgoingOrdersResponse> {
        const response = await this.managementListOutgoingOrdersRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async managementListOutwaysRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementListOutwaysResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/outways`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementListOutwaysResponseFromJSON(jsonValue));
    }

    /**
     */
    async managementListOutways(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementListOutwaysResponse> {
        const response = await this.managementListOutwaysRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async managementListServicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementListServicesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/services`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementListServicesResponseFromJSON(jsonValue));
    }

    /**
     */
    async managementListServices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementListServicesResponse> {
        const response = await this.managementListServicesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async managementRegisterInwayRaw(requestParameters: ManagementRegisterInwayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementInway>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling managementRegisterInway.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/inways`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ManagementInwayToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementInwayFromJSON(jsonValue));
    }

    /**
     */
    async managementRegisterInway(requestParameters: ManagementRegisterInwayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementInway> {
        const response = await this.managementRegisterInwayRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async managementRegisterOutwayRaw(requestParameters: ManagementRegisterOutwayOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling managementRegisterOutway.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/outways`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ManagementRegisterOutwayRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async managementRegisterOutway(requestParameters: ManagementRegisterOutwayOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.managementRegisterOutwayRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async managementRejectIncomingAccessRequestRaw(requestParameters: ManagementRejectIncomingAccessRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.serviceName === null || requestParameters.serviceName === undefined) {
            throw new runtime.RequiredError('serviceName','Required parameter requestParameters.serviceName was null or undefined when calling managementRejectIncomingAccessRequest.');
        }

        if (requestParameters.accessRequestID === null || requestParameters.accessRequestID === undefined) {
            throw new runtime.RequiredError('accessRequestID','Required parameter requestParameters.accessRequestID was null or undefined when calling managementRejectIncomingAccessRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/access-requests/incoming/services/{serviceName}/{accessRequestID}/reject`.replace(`{${"serviceName"}}`, encodeURIComponent(String(requestParameters.serviceName))).replace(`{${"accessRequestID"}}`, encodeURIComponent(String(requestParameters.accessRequestID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async managementRejectIncomingAccessRequest(requestParameters: ManagementRejectIncomingAccessRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.managementRejectIncomingAccessRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async managementRevokeAccessGrantRaw(requestParameters: ManagementRevokeAccessGrantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementAccessGrant>> {
        if (requestParameters.accessGrantID === null || requestParameters.accessGrantID === undefined) {
            throw new runtime.RequiredError('accessGrantID','Required parameter requestParameters.accessGrantID was null or undefined when calling managementRevokeAccessGrant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/access-grants/{accessGrantID}/revoke`.replace(`{${"accessGrantID"}}`, encodeURIComponent(String(requestParameters.accessGrantID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementAccessGrantFromJSON(jsonValue));
    }

    /**
     */
    async managementRevokeAccessGrant(requestParameters: ManagementRevokeAccessGrantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementAccessGrant> {
        const response = await this.managementRevokeAccessGrantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async managementRevokeOutgoingOrderRaw(requestParameters: ManagementRevokeOutgoingOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.delegatee === null || requestParameters.delegatee === undefined) {
            throw new runtime.RequiredError('delegatee','Required parameter requestParameters.delegatee was null or undefined when calling managementRevokeOutgoingOrder.');
        }

        if (requestParameters.reference === null || requestParameters.reference === undefined) {
            throw new runtime.RequiredError('reference','Required parameter requestParameters.reference was null or undefined when calling managementRevokeOutgoingOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/orders/outgoing/{delegatee}/{reference}/revoke`.replace(`{${"delegatee"}}`, encodeURIComponent(String(requestParameters.delegatee))).replace(`{${"reference"}}`, encodeURIComponent(String(requestParameters.reference))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async managementRevokeOutgoingOrder(requestParameters: ManagementRevokeOutgoingOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.managementRevokeOutgoingOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async managementSendAccessRequestRaw(requestParameters: ManagementSendAccessRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementOutgoingAccessRequest>> {
        if (requestParameters.accessRequestID === null || requestParameters.accessRequestID === undefined) {
            throw new runtime.RequiredError('accessRequestID','Required parameter requestParameters.accessRequestID was null or undefined when calling managementSendAccessRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/access-requests/outgoing/{accessRequestID}/send`.replace(`{${"accessRequestID"}}`, encodeURIComponent(String(requestParameters.accessRequestID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementOutgoingAccessRequestFromJSON(jsonValue));
    }

    /**
     */
    async managementSendAccessRequest(requestParameters: ManagementSendAccessRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementOutgoingAccessRequest> {
        const response = await this.managementSendAccessRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async managementSynchronizeOrdersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementSynchronizeOrdersResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/orders/synchronize`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementSynchronizeOrdersResponseFromJSON(jsonValue));
    }

    /**
     */
    async managementSynchronizeOrders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementSynchronizeOrdersResponse> {
        const response = await this.managementSynchronizeOrdersRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async managementUpdateInwayRaw(requestParameters: ManagementUpdateInwayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementInway>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling managementUpdateInway.');
        }

        if (requestParameters.inway === null || requestParameters.inway === undefined) {
            throw new runtime.RequiredError('inway','Required parameter requestParameters.inway was null or undefined when calling managementUpdateInway.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/inways/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ManagementInwayToJSON(requestParameters.inway),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementInwayFromJSON(jsonValue));
    }

    /**
     */
    async managementUpdateInway(requestParameters: ManagementUpdateInwayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementInway> {
        const response = await this.managementUpdateInwayRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async managementUpdateOutgoingOrderRaw(requestParameters: ManagementUpdateOutgoingOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling managementUpdateOutgoingOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/orders/outgoing`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ManagementUpdateOutgoingOrderRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async managementUpdateOutgoingOrder(requestParameters: ManagementUpdateOutgoingOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.managementUpdateOutgoingOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async managementUpdateServiceRaw(requestParameters: ManagementUpdateServiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementUpdateServiceResponse>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling managementUpdateService.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling managementUpdateService.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/services/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ManagementUpdateServiceRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementUpdateServiceResponseFromJSON(jsonValue));
    }

    /**
     */
    async managementUpdateService(requestParameters: ManagementUpdateServiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementUpdateServiceResponse> {
        const response = await this.managementUpdateServiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async managementUpdateSettingsRaw(requestParameters: ManagementUpdateSettingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling managementUpdateSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/settings`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ManagementUpdateSettingsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async managementUpdateSettings(requestParameters: ManagementUpdateSettingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.managementUpdateSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
