// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: outway.proto

package api

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OutwayClient is the client API for Outway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OutwayClient interface {
	SignOrderClaim(ctx context.Context, in *SignOrderClaimRequest, opts ...grpc.CallOption) (*SignOrderClaimResponse, error)
}

type outwayClient struct {
	cc grpc.ClientConnInterface
}

func NewOutwayClient(cc grpc.ClientConnInterface) OutwayClient {
	return &outwayClient{cc}
}

func (c *outwayClient) SignOrderClaim(ctx context.Context, in *SignOrderClaimRequest, opts ...grpc.CallOption) (*SignOrderClaimResponse, error) {
	out := new(SignOrderClaimResponse)
	err := c.cc.Invoke(ctx, "/nlx.outway.Outway/SignOrderClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OutwayServer is the server API for Outway service.
// All implementations must embed UnimplementedOutwayServer
// for forward compatibility
type OutwayServer interface {
	SignOrderClaim(context.Context, *SignOrderClaimRequest) (*SignOrderClaimResponse, error)
	mustEmbedUnimplementedOutwayServer()
}

// UnimplementedOutwayServer must be embedded to have forward compatible implementations.
type UnimplementedOutwayServer struct {
}

func (UnimplementedOutwayServer) SignOrderClaim(context.Context, *SignOrderClaimRequest) (*SignOrderClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignOrderClaim not implemented")
}
func (UnimplementedOutwayServer) mustEmbedUnimplementedOutwayServer() {}

// UnsafeOutwayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OutwayServer will
// result in compilation errors.
type UnsafeOutwayServer interface {
	mustEmbedUnimplementedOutwayServer()
}

func RegisterOutwayServer(s grpc.ServiceRegistrar, srv OutwayServer) {
	s.RegisterService(&Outway_ServiceDesc, srv)
}

func _Outway_SignOrderClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignOrderClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutwayServer).SignOrderClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlx.outway.Outway/SignOrderClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutwayServer).SignOrderClaim(ctx, req.(*SignOrderClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Outway_ServiceDesc is the grpc.ServiceDesc for Outway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Outway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nlx.outway.Outway",
	HandlerType: (*OutwayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignOrderClaim",
			Handler:    _Outway_SignOrderClaim_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "outway.proto",
}
