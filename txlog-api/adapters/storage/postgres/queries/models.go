// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package queries

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/tabbed/pqtype"
)

type TransactionlogDirection string

const (
	TransactionlogDirectionIn  TransactionlogDirection = "in"
	TransactionlogDirectionOut TransactionlogDirection = "out"
)

func (e *TransactionlogDirection) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionlogDirection(s)
	case string:
		*e = TransactionlogDirection(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionlogDirection: %T", src)
	}
	return nil
}

type NullTransactionlogDirection struct {
	TransactionlogDirection TransactionlogDirection
	Valid                   bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionlogDirection) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionlogDirection, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionlogDirection.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionlogDirection) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.TransactionlogDirection, nil
}

type TransactionlogDatasubject struct {
	ID       int64
	RecordID int64
	Key      string
	Value    string
}

type TransactionlogRecord struct {
	ID               int64
	Direction        TransactionlogDirection
	Created          time.Time
	SrcOrganization  string
	DestOrganization string
	ServiceName      string
	TransactionID    string
	Data             pqtype.NullRawMessage
	Delegator        string
	OrderReference   string
}
