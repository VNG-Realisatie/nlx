// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: queries.sql

package queries

import (
	"context"
	"time"

	"github.com/tabbed/pqtype"
)

const createDataSubject = `-- name: CreateDataSubject :exec
INSERT INTO transactionlog.datasubjects (
    record_id,
    key,
    value
)
VALUES ($1, $2, $3)
`

type CreateDataSubjectParams struct {
	RecordID int64
	Key      string
	Value    string
}

func (q *Queries) CreateDataSubject(ctx context.Context, arg *CreateDataSubjectParams) error {
	_, err := q.exec(ctx, q.createDataSubjectStmt, createDataSubject, arg.RecordID, arg.Key, arg.Value)
	return err
}

const createRecord = `-- name: CreateRecord :one
INSERT INTO transactionlog.records (
    direction,
    src_organization,
    dest_organization,
    service_name,
    transaction_id,
    data,
    delegator,
    order_reference,
    created
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
returning id
`

type CreateRecordParams struct {
	Direction        TransactionlogDirection
	SrcOrganization  string
	DestOrganization string
	ServiceName      string
	TransactionID    string
	Data             pqtype.NullRawMessage
	Delegator        string
	OrderReference   string
	Created          time.Time
}

func (q *Queries) CreateRecord(ctx context.Context, arg *CreateRecordParams) (int64, error) {
	row := q.queryRow(ctx, q.createRecordStmt, createRecord,
		arg.Direction,
		arg.SrcOrganization,
		arg.DestOrganization,
		arg.ServiceName,
		arg.TransactionID,
		arg.Data,
		arg.Delegator,
		arg.OrderReference,
		arg.Created,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const listRecords = `-- name: ListRecords :many

SELECT id,
    direction,
    created,
    src_organization,
    dest_organization,
    service_name,
    transaction_id,
    data,
    delegator,
    order_reference
FROM transactionlog.records
ORDER BY created DESC
LIMIT $1
`

// Copyright Â© VNG Realisatie 2022
// Licensed under the EUPL
func (q *Queries) ListRecords(ctx context.Context, limit int32) ([]*TransactionlogRecord, error) {
	rows, err := q.query(ctx, q.listRecordsStmt, listRecords, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*TransactionlogRecord{}
	for rows.Next() {
		var i TransactionlogRecord
		if err := rows.Scan(
			&i.ID,
			&i.Direction,
			&i.Created,
			&i.SrcOrganization,
			&i.DestOrganization,
			&i.ServiceName,
			&i.TransactionID,
			&i.Data,
			&i.Delegator,
			&i.OrderReference,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
