// Code generated by MockGen. DO NOT EDIT.
// Source: api/txlog_grpc.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"

	api "go.nlx.io/nlx/txlog-api/api"
)

// MockTXLogServiceClient is a mock of TXLogServiceClient interface.
type MockTXLogServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTXLogServiceClientMockRecorder
}

// MockTXLogServiceClientMockRecorder is the mock recorder for MockTXLogServiceClient.
type MockTXLogServiceClientMockRecorder struct {
	mock *MockTXLogServiceClient
}

// NewMockTXLogServiceClient creates a new mock instance.
func NewMockTXLogServiceClient(ctrl *gomock.Controller) *MockTXLogServiceClient {
	mock := &MockTXLogServiceClient{ctrl: ctrl}
	mock.recorder = &MockTXLogServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTXLogServiceClient) EXPECT() *MockTXLogServiceClientMockRecorder {
	return m.recorder
}

// CreateRecord mocks base method.
func (m *MockTXLogServiceClient) CreateRecord(ctx context.Context, in *api.CreateRecordRequest, opts ...grpc.CallOption) (*api.CreateRecordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRecord", varargs...)
	ret0, _ := ret[0].(*api.CreateRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecord indicates an expected call of CreateRecord.
func (mr *MockTXLogServiceClientMockRecorder) CreateRecord(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecord", reflect.TypeOf((*MockTXLogServiceClient)(nil).CreateRecord), varargs...)
}

// ListRecords mocks base method.
func (m *MockTXLogServiceClient) ListRecords(ctx context.Context, in *api.ListRecordsRequest, opts ...grpc.CallOption) (*api.ListRecordsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecords", varargs...)
	ret0, _ := ret[0].(*api.ListRecordsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecords indicates an expected call of ListRecords.
func (mr *MockTXLogServiceClientMockRecorder) ListRecords(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecords", reflect.TypeOf((*MockTXLogServiceClient)(nil).ListRecords), varargs...)
}

// MockTXLogServiceServer is a mock of TXLogServiceServer interface.
type MockTXLogServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockTXLogServiceServerMockRecorder
}

// MockTXLogServiceServerMockRecorder is the mock recorder for MockTXLogServiceServer.
type MockTXLogServiceServerMockRecorder struct {
	mock *MockTXLogServiceServer
}

// NewMockTXLogServiceServer creates a new mock instance.
func NewMockTXLogServiceServer(ctrl *gomock.Controller) *MockTXLogServiceServer {
	mock := &MockTXLogServiceServer{ctrl: ctrl}
	mock.recorder = &MockTXLogServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTXLogServiceServer) EXPECT() *MockTXLogServiceServerMockRecorder {
	return m.recorder
}

// CreateRecord mocks base method.
func (m *MockTXLogServiceServer) CreateRecord(arg0 context.Context, arg1 *api.CreateRecordRequest) (*api.CreateRecordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecord", arg0, arg1)
	ret0, _ := ret[0].(*api.CreateRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecord indicates an expected call of CreateRecord.
func (mr *MockTXLogServiceServerMockRecorder) CreateRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecord", reflect.TypeOf((*MockTXLogServiceServer)(nil).CreateRecord), arg0, arg1)
}

// ListRecords mocks base method.
func (m *MockTXLogServiceServer) ListRecords(arg0 context.Context, arg1 *api.ListRecordsRequest) (*api.ListRecordsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecords", arg0, arg1)
	ret0, _ := ret[0].(*api.ListRecordsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecords indicates an expected call of ListRecords.
func (mr *MockTXLogServiceServerMockRecorder) ListRecords(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecords", reflect.TypeOf((*MockTXLogServiceServer)(nil).ListRecords), arg0, arg1)
}

// mustEmbedUnimplementedTXLogServiceServer mocks base method.
func (m *MockTXLogServiceServer) mustEmbedUnimplementedTXLogServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTXLogServiceServer")
}

// mustEmbedUnimplementedTXLogServiceServer indicates an expected call of mustEmbedUnimplementedTXLogServiceServer.
func (mr *MockTXLogServiceServerMockRecorder) mustEmbedUnimplementedTXLogServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTXLogServiceServer", reflect.TypeOf((*MockTXLogServiceServer)(nil).mustEmbedUnimplementedTXLogServiceServer))
}

// MockUnsafeTXLogServiceServer is a mock of UnsafeTXLogServiceServer interface.
type MockUnsafeTXLogServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeTXLogServiceServerMockRecorder
}

// MockUnsafeTXLogServiceServerMockRecorder is the mock recorder for MockUnsafeTXLogServiceServer.
type MockUnsafeTXLogServiceServerMockRecorder struct {
	mock *MockUnsafeTXLogServiceServer
}

// NewMockUnsafeTXLogServiceServer creates a new mock instance.
func NewMockUnsafeTXLogServiceServer(ctrl *gomock.Controller) *MockUnsafeTXLogServiceServer {
	mock := &MockUnsafeTXLogServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeTXLogServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeTXLogServiceServer) EXPECT() *MockUnsafeTXLogServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedTXLogServiceServer mocks base method.
func (m *MockUnsafeTXLogServiceServer) mustEmbedUnimplementedTXLogServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTXLogServiceServer")
}

// mustEmbedUnimplementedTXLogServiceServer indicates an expected call of mustEmbedUnimplementedTXLogServiceServer.
func (mr *MockUnsafeTXLogServiceServerMockRecorder) mustEmbedUnimplementedTXLogServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTXLogServiceServer", reflect.TypeOf((*MockUnsafeTXLogServiceServer)(nil).mustEmbedUnimplementedTXLogServiceServer))
}
