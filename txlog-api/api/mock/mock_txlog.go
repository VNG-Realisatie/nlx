// Code generated by MockGen. DO NOT EDIT.
// Source: api/txlog_grpc.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"

	api "go.nlx.io/nlx/txlog-api/api"
)

// MockTXLogClient is a mock of TXLogClient interface.
type MockTXLogClient struct {
	ctrl     *gomock.Controller
	recorder *MockTXLogClientMockRecorder
}

// MockTXLogClientMockRecorder is the mock recorder for MockTXLogClient.
type MockTXLogClientMockRecorder struct {
	mock *MockTXLogClient
}

// NewMockTXLogClient creates a new mock instance.
func NewMockTXLogClient(ctrl *gomock.Controller) *MockTXLogClient {
	mock := &MockTXLogClient{ctrl: ctrl}
	mock.recorder = &MockTXLogClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTXLogClient) EXPECT() *MockTXLogClientMockRecorder {
	return m.recorder
}

// CreateRecord mocks base method.
func (m *MockTXLogClient) CreateRecord(ctx context.Context, in *api.CreateRecordRequest, opts ...grpc.CallOption) (*api.CreateRecordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRecord", varargs...)
	ret0, _ := ret[0].(*api.CreateRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecord indicates an expected call of CreateRecord.
func (mr *MockTXLogClientMockRecorder) CreateRecord(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecord", reflect.TypeOf((*MockTXLogClient)(nil).CreateRecord), varargs...)
}

// ListRecords mocks base method.
func (m *MockTXLogClient) ListRecords(ctx context.Context, in *api.ListRecordsRequest, opts ...grpc.CallOption) (*api.ListRecordsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecords", varargs...)
	ret0, _ := ret[0].(*api.ListRecordsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecords indicates an expected call of ListRecords.
func (mr *MockTXLogClientMockRecorder) ListRecords(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecords", reflect.TypeOf((*MockTXLogClient)(nil).ListRecords), varargs...)
}

// MockTXLogServer is a mock of TXLogServer interface.
type MockTXLogServer struct {
	ctrl     *gomock.Controller
	recorder *MockTXLogServerMockRecorder
}

// MockTXLogServerMockRecorder is the mock recorder for MockTXLogServer.
type MockTXLogServerMockRecorder struct {
	mock *MockTXLogServer
}

// NewMockTXLogServer creates a new mock instance.
func NewMockTXLogServer(ctrl *gomock.Controller) *MockTXLogServer {
	mock := &MockTXLogServer{ctrl: ctrl}
	mock.recorder = &MockTXLogServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTXLogServer) EXPECT() *MockTXLogServerMockRecorder {
	return m.recorder
}

// CreateRecord mocks base method.
func (m *MockTXLogServer) CreateRecord(arg0 context.Context, arg1 *api.CreateRecordRequest) (*api.CreateRecordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecord", arg0, arg1)
	ret0, _ := ret[0].(*api.CreateRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecord indicates an expected call of CreateRecord.
func (mr *MockTXLogServerMockRecorder) CreateRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecord", reflect.TypeOf((*MockTXLogServer)(nil).CreateRecord), arg0, arg1)
}

// ListRecords mocks base method.
func (m *MockTXLogServer) ListRecords(arg0 context.Context, arg1 *api.ListRecordsRequest) (*api.ListRecordsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecords", arg0, arg1)
	ret0, _ := ret[0].(*api.ListRecordsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecords indicates an expected call of ListRecords.
func (mr *MockTXLogServerMockRecorder) ListRecords(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecords", reflect.TypeOf((*MockTXLogServer)(nil).ListRecords), arg0, arg1)
}

// mustEmbedUnimplementedTXLogServer mocks base method.
func (m *MockTXLogServer) mustEmbedUnimplementedTXLogServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTXLogServer")
}

// mustEmbedUnimplementedTXLogServer indicates an expected call of mustEmbedUnimplementedTXLogServer.
func (mr *MockTXLogServerMockRecorder) mustEmbedUnimplementedTXLogServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTXLogServer", reflect.TypeOf((*MockTXLogServer)(nil).mustEmbedUnimplementedTXLogServer))
}

// MockUnsafeTXLogServer is a mock of UnsafeTXLogServer interface.
type MockUnsafeTXLogServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeTXLogServerMockRecorder
}

// MockUnsafeTXLogServerMockRecorder is the mock recorder for MockUnsafeTXLogServer.
type MockUnsafeTXLogServerMockRecorder struct {
	mock *MockUnsafeTXLogServer
}

// NewMockUnsafeTXLogServer creates a new mock instance.
func NewMockUnsafeTXLogServer(ctrl *gomock.Controller) *MockUnsafeTXLogServer {
	mock := &MockUnsafeTXLogServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeTXLogServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeTXLogServer) EXPECT() *MockUnsafeTXLogServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedTXLogServer mocks base method.
func (m *MockUnsafeTXLogServer) mustEmbedUnimplementedTXLogServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTXLogServer")
}

// mustEmbedUnimplementedTXLogServer indicates an expected call of mustEmbedUnimplementedTXLogServer.
func (mr *MockUnsafeTXLogServerMockRecorder) mustEmbedUnimplementedTXLogServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTXLogServer", reflect.TypeOf((*MockUnsafeTXLogServer)(nil).mustEmbedUnimplementedTXLogServer))
}
